# SOME DESCRIPTIVE TITLE.
# Copyright (C) Creative Commons Zero
# This file is distributed under the same license as the Blender Reference Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-06 15:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/game_engine/physics/introduction.rst:4
# d567f7d3758d44a8a0c54bfdd9b41a7b
msgid "Blender Game Physics"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:6
# 66820b63032344e3b5e6fb808c3af4eb
msgid "Blender includes advanced physics simulation in the form of the Bullet Physics Engine (`BulletPhysics.org <http://bulletphysics.org>`__). Most of your work will involve setting the right properties on the objects in your scene, then you can sit back and let the engine take over. The physics simulation can be used for Games, but also for Animation."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:12
# 3fd5c10de8a342f5a286056260794664
msgid "The Blender Game Engine (BGE) is based on Rigid-Body Physics, which differs significantly from the complementary set of tools available in the form of Soft Body Physics Simulations. Though the BGE does have a Soft Body type, it is not nearly as nuanced as the non-BGE Soft Body. The inverse is even more true: it is difficult to get the non-BGE physics to resemble anything like a stiff shape. Rigid Body Physics does not have, as an effect or a cause, any mesh deformations. For a discussion on how to partially overcome this, see: `Mesh Deformations`_."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:24
# f9cfb0705c1747ed8099017a4f45dc9e
msgid "Global Options"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:26
# 11b98c1c032b45729eeddc91c4a536df
msgid "The global Physics Engine settings can be found in the :doc:`World Properties </game_engine/world>`, which include the Gravity constant and some important engine performance tweaks."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:31
# e519da327b854b528501cecd52eafdf6
msgid "Object Physics"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:39
# 1b169a68f9b3417ca9f81c70b9d5eef3
msgid "Physics Type"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:43
# b3d77ba1022a4c90aae0e42abcc43574
msgid ":doc:`No Collision </game_engine/physics/object/no_collision>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:44
# e56ee8a0fcd24030a4f0c5be5a32e2dd
msgid "Is not affected by the simulation nor affects other objects."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:45
# ed65880a4b8043dda578d86a12db599c
msgid ":doc:`Static </game_engine/physics/object/static>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:46
# 7045f5a4b6d746338780358ec9435ee9
msgid "Participates in the simulation, affecting other objects, but is not affected by it."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:47
# 4f8422e21e3f4ed096f8e92d733ee1d8
msgid ":doc:`Dynamic </game_engine/physics/object/dynamic>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:48
# caac67ff9b444b05857671df9591ab1b
msgid "Object that can move besides colliding and being collided with."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:49
# 26637a5cbd7e45cba91d5c9afb58b592
msgid ":doc:`Rigid Body </game_engine/physics/object/rigid_body>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:50
# 2d44c1c449e94558a4533e9a7cca5572
msgid "Has rigid body dynamics."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:51
# e266902c8eab49168f111ca63f98a6de
msgid ":doc:`Soft Body </game_engine/physics/object/soft_body>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:52
# 68511a76629a4a4692400925a243b707
msgid "Soft body dynamics."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:53
# 1e586ad5704c4d7886de6afdc94ef8a8
msgid ":doc:`Character Controller </game_engine/physics/object/character>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:54
# 396e5470f79049ed9d2be95228fd84bb
msgid "Character controller."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:55
# a2acb18bc39e407f8a6e346ff649303b
msgid ":doc:`Vehicle Controller </game_engine/physics/object/vehicle>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:56
# e8e82bab4bb84313ac0816a927a3840b
msgid "Vehicle controller."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:57
# d5adebefd90242e4a0c936bd435583dd
msgid ":doc:`Occluder </game_engine/physics/object/occluder>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:58
# e439bf7d1fe14c3b9a050aca711512bf
msgid "Prevents calculation of rendered objects (not their physics, though!)."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:59
# e482069279a1494eb3347ed0a1057ac5
msgid ":doc:`Sensor </game_engine/physics/object/sensor>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:60
# 7c33c657bd1d478885e7ec9285d4a90c
msgid "Detects presence without restituting collisions."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:63
# 5143b71f25c143c6ab364db5e30cf650
msgid ":doc:`Navigation Mesh </game_engine/physics/object/navigation_mesh>`"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:62
# d5dfca5bfee1479da53fc12afc328773
msgid "To make pathfinding paths. Useful for Artificial Intelligence."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:66
# 5ad71d0c45ef45b3b11f61880bd95ba4
msgid "Material Physics"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:67
# 96016b3fcc144983963a74032716dbe0
msgid "Physics can be associated with a material on the material properties tab. These are settings that one would normally associate with a material, such has it's friction and they are meant to be used in conjunction with the object physics settings, not replace it."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:74
# 0ca52cb25c2b42e39a135cce9a1dddb0
msgid "Constraints"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:76
# 491e9044d95f495ea4f26c06b2a54406
msgid "It is imperative to understand that the Blender Constraints generally don't work inside the BGE. This means interesting effects such as *Copy Rotation* are unavailable directly."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:79
# 8b6b62be9c79420387bba3e95265bb8e
msgid "Your options include:"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:81
# 6613c1d2bb664041adb43ee5c5eeb7b7
msgid ":doc:`Parenting </modeling/objects/groups_and_parenting>` - But not Vertex Parenting."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:82
# fad5feb4c64d4a10b473f1b89950c563
msgid ":doc:`Rigid Body Joint </rigging/constraints/relationship/rigid_body_joint>` - This is the one Constraint that you can set up through the UI that works in the BGE. It has several options, and can be very powerful - see ITS page for a detailed description and demo .blend. Don't forget that you can loop through objects using ``bpy`` instead of clicking thousands of times to set up chains of these Constraints."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:87
# bc2d7b657c54485c9c831d6dfb10b9d0
msgid "Rigid Body Joints on the Fly - You can add/remove them after the BGE starts by using ``bge.constraints.createConstraint()``. This can be good either to simply automate their setup, or to truly make them dynamic. A simple demo can be viewed in: `BGE-Physics-DynamicallyCreateConstraint.blend <http://wiki.blender.org/index.php/Media:BGE-Physics-DynamicallyCreateConstraint.blend>`__"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:92
# a90f013d6f0246dd96c2072593ce1537
msgid "`Python Controllers </game_engine/logic/controllers/python>`__ - As always, in the BGE, you can get the most power when you drop into Python and start toying with the settings directly. For instance, the *Copy Rotation* mentioned above is not hard -- All you have to do is something to the effect of ``own.worldOrientation = bge.logic.getCurrentScene().objects['TheTargetObject'].worldOrientation``"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:100
# c4b694341dac45968b591e0b6f892656
msgid "Visualizing Physics"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:104
# 42535edb08784e7181cfe621f670782b
msgid "Go to :menuselection:`Game --> Show Physics Visualization` to show lines representing various attributes of the Bullet representation of your objects. Note that these might be easier to see when you turn on Wireframe Mode (:kbd:`Z`) before you press :kbd:`P`. Also note that you can see how the Bullet triangulation is working (it busts all your Quads to Tris at run-time, but the BGE meshes are still quads at run-time)."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:112
# 20c5a4770d304eae9b5e345150918fa4
msgid "**RGB/XYZ Widget** - Representing the object's Local Orientation and Origin."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:113
# c8e48bc8e2ea4007bdbfd62f30fb9a90
msgid "**Green** - \"sleeping meshes\" that are not moving, saving calculations until an external event \"wakes\" it."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:114
# 8a2958042695416abf1dd1b5597d4a21
msgid "**White** - White lines represent active bounding meshes at are undergoing physics calulations, untill such calculations are so small that the object is put to rest. This is how you can see the effects of the *Collision Bounds*. - **Thick, or Many White Lines** - A compound collision mesh/meshes."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:118
# 9a66ab5a247544a79934222cf6b6989d
msgid "**Violet** - Bounding meshes for Soft bodies."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:119
# 2fb95bf5de8c4dd9b3d8722c4b7dc0fe
msgid "**Red** - The Bounding Box, the outer boundary of object. It is always aligned with global X Y and Z, and is used to optimize calculations. Also represents meshes that have been forced into \"no sleep\" status."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:122
# a7220c69b871450b8b98030e1938efcf
msgid "**Yellow** - Normals."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:123
# e5d9389f5fec44a1be44ca86309a088a
msgid "**Black** - When in wireframe, this is your mesh's visual appearance."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:125
# 34509a05f54e43a48cce250c66d0bc65
msgid "If you want finer-grained control over the display options, you can add this as a Python Controller and uncomment whichever pieces you want to see:"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:157
# 225bb8e81bf24cc09bf51a8c049125d7
msgid "Show Framerate and Profile"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:161
# a0b3089ec838473d98c829d015273553
msgid "A shot of `Manual-BGE-Physics-DancingSticks.blend <http://wiki.blender.org/index.php/Media:Manual-BGE-Physics-DancingSticks.blend>`__ with [Game --> Show Framerate and Profile] enabled"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:166
# 80c32375ffd54c768dc7e253ca891d55
msgid "If you enable :menuselection:`Game --> Show Framerate and Profile`, it will put some statistics in the upper-left area of the game window."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:169
# 03235853839c458698b6b3e56da70f89
msgid "These can be very informative, but also a bit cryptic. Moguri has elaborated on their meanings, for us: http://mogurijin.wordpress.com/2012/01/03/bge-profile-stats-and-what-they-mean/"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:175
# 3fc7ec59c8b24e14bb8580e5ba05a1c7
msgid "Mesh Deformations"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:177
# 0810dbedf09d4ca7953fda128af59e9d
msgid "As mentioned above, Rigid Body physics do not affect mesh deformations, nor do they account for them in the physics model. This leaves you with a few options:"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:182
# 3aa8d8bb5bd546bb887c340ffc77914f
msgid "Soft Bodies"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:184
# d37060a0cc0b4797ab9963375d77efbf
msgid "You can try using a :doc:`Soft Body </game_engine/physics/object/soft_body>`, but these are fairly hard to configure well."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:189
# cfc72f2ea7f242aa9d5f6325f581a286
msgid "Actions"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:191
# e1055a713f6a441db551b39e8fb534f4
msgid "To use an :doc:`Action Actuator </game_engine/logic/actuators/action>` to do the deformation, you have to make a choice. If you use Shapekeys in the Action, you will be fine as far as the overall collisions (but see below for the note on ``reinstancePhysicsMesh()``). The mesh itself is both a display and a physics mesh, so there is not much to configure."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:196
# b2e8200b980b4d6f98ec8011a58b9d6b
msgid "To use an Armature as the deformer will require a bit of extra thought and effort. Basically the Armature will only deform a mesh if the Armature is the parent of that mesh. But at that point, your mesh will lose its physics responsivenes, and only hang in the air (it's copying the location/rotation of the Armature). To somewhat fix this you can then parent the Armature to a collision mesh (perhaps a simple box or otherwise very-low-poly mesh). This \"Deformation Mesh\" will be the physics representative, being type: Dynamic or Rigid Body, but it will be set to Invisible. Then \"Display Mesh\" will be the opposite set to type: No Collision, but visible. This still leaves us with the problem mentioned in the previous paragraph."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:207
# 0f556ec7efdf4c9481d790470377c5cd
msgid "When you deform a display mesh, it does not update the corresponding physics mesh. You can view this evidently when you enable physics visualization (`Visualizing Physics`_) - the collision bounds will remain exactly as when they began. To fix this, you must call ``own.reinstancePhysicsMesh()`` in some form. Currently this only works on *Triangle Mesh* bounds, not *Convex Hull*. We have prepared a demonstration file in `Manual-BGE-Physics-DancingSticks.blend <http://wiki.blender.org/index.php/Media:Manual-BGE-Physics-DancingSticks.blend>`__. Note that we had to increase the :menuselection:`World --> Physics --> Physics Steps --> Substeps` to make the collisions work well. The more basic case is the case the Shapekeyed Action, which you can see in the back area of the scene. Since it is the only object involved, you can call ``reinstancePhysicsMesh()`` unadorned, and it will do the right thing."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:221
# 77c5d27afe7549178a8d7bebc4fa5c52
msgid "The more complicated case is the :menuselection:`Collision Mesh --> Armature --> Display Mesh` cluster, which you can see in the front of the scene. What it does in the .blend is call ``reinstancePhysicsMesh(viz)``, that is, passing in a reference to the visual mesh. If we tried to establish this relationship without the use of Python, we would find that Blender's dependency check system would reject it as a cyclic setup. This is an example of where Blender's checking is too coarsely-grained, as this circle is perfectly valid: the grandparent object (the Collision Mesh) controls the location/rotation, while the middle object (the Armature) receives the animated Action, where the child (the Display Mesh) receives the deformation, and passes that on up to the top, harmlessly. Something to note is that the Collision Mesh is merely a plane -- that is all it requires for this, since it will be getting the mesh data from ``viz``."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:237
# 590bcf80535d49e394e28a363aae908f
msgid "Ragdolls"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:239
# b4a81ef8bdc6456aac036efbd106e6ee
msgid "A third option is to create your items out of many sub-objects, connected together with Rigid Body Joints or similar. This can be quite a bit more work, but the results can be much more like a realistic response to collisions. For an Add-on that can help you out in the process, check out the `Blender Ragdoll Implementation Kit <http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts/Game_Engine/BRIK_ragdolls>`__."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:249
# e8a5c289ce614455ba23a34385988807
msgid "Digging Deeper"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:251
# a599a14433bd4054812bbf7c87bdf55f
msgid "Sometimes you will want to look at:"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:253
# 0de0dc977172451fb101f6f11c0c4fe8
msgid "The main Bullet Physics page - http://bulletphysics.org/wordpress/"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:254
# f2c4a7fa7d6e4832a830d63c2a98c2c8
msgid "The Bullet Wiki - http://www.bulletphysics.org/mediawiki-1.5.8/index.php?title=Documentation"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:255
# 7c6c8c502b924cd6bf96c8f4e19b5f62
msgid "The Bullet API Docs - http://www.continuousphysics.com/Bullet/BulletFull/index.html"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:256
# c1f5ed78f67140f4b7edb3e772ba5e9d
msgid "The Bullet Forums - http://www.bulletphysics.org/Bullet/phpBB3/"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:260
# 8a0a38a95e9f4b33bb724db9d4728671
msgid "Recording to Keyframes"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:262
# 99fd1a565e1642b6825ec0ad66b18c87
msgid "Beyond gaming, sometimes you wish to render a complex scene that involves collisions, multiple forces, friction between multiple bodies, and air drag or even a simple setup that is just easier to achieve using the realtime physics."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:266
# e9c08395fa67455f91f80bea1c5375b2
msgid "Blender provides a way to ''bake'' or ''record'' a physics simulation into keyframes allowing it then to be played as an action either for animation or games. Keep in mind that the result of this method is a recording, no longer a simulation. This means that the result is completely deterministic (the same everytime it is run) and unable to interact with new objects that are added to the physics simulation after it was recorded. This may, or not, be desired according to the situation."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:276
# 19b5d7f9e43d42c582689b48005bdcac
msgid "Menu to record Keyframes to the Dopesheet."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:278
# 9af8322933c44f04acf36ab423e8e8b7
msgid "All you have to do to achieve this effect is go to the Info Editor (the bar at the top of the window) :menuselection:`Game --> Record Animation`, and it will lock away your keyframes for use in *Blender Render* mode. You can go back to the 3D view and hit :kbd:`Alt-A` to play it back, or :kbd:`Ctrl-F12` to render it out as an animation."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:284
# 5659c172762c4803b75fb52628cb1c27
msgid "Note that you can also use Game Logic Bricks and scripting. Everything will be recorded."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:288
# e312c91c29174f359dc1c9096ec902a8
msgid "Keyframe Clean-up"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:292
# c472aa5ec04746818cd983390e14137c
msgid "Resulting recorded animation"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:294
# 86edb092f7e2496bb01ba1c80361780a
msgid "*Record Animation* keys redundant data (data that was did not change relative to the last frame). Pressing :kbd:`O` while in the *DopeSheet* will remove all superfluous keyframes. Unwanted channels can also be removed."
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:301
# bbc2cc57ecf14e52a063d4c2219e84e0
msgid "Cleaned up recording"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:305
# e478ba3d3dbf40fbaa21cc630ed8d5d1
msgid "Exporting"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:308
# 7462d5091e5c4a65b3dbbf8c213e4bdc
msgid ".bullet / Bullet compatible engines"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:310
# 90940a2e11394f19a915264ea64e22af
msgid "You can snapshot the physics world at any time with the following code:"
msgstr ""

#: ../../../manual/game_engine/physics/introduction.rst:319
# ac96fb3f3f11474ca757b69032321c7e
msgid "This will allow importing into other Bullet-based projects. See the `Bullet Wiki on Serialization <http://bulletphysics.org/mediawiki-1.5.8/index.php/Bullet_binary_serialization>`__ for more."
msgstr ""

