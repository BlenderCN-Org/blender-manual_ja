# SOME DESCRIPTIVE TITLE.
# Copyright (C) Creative Commons Zero
# This file is distributed under the same license as the Blender Reference Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-06 15:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/composite_nodes/types/converter/math.rst:4
# ff8812fec96f4bcd9dd51737481c6a94
msgid "Math Node"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:8
# 00d35ab2310d4671becaaa8c00da09a6
msgid "Math node"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:11
# bd6517c4824d448fa19a1467ccd8f008
msgid "This node performs the selected math operation on an image or buffer. All common math functions are supported. If only an image is fed to one Value socket, the math function will apply the other Value consistently to every pixel in producing the output Value. Select the math function by clicking the up-down selector where the \"Add\" selection is shown."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:16
# 41585fd9430c4ef5b0d09a487677c20d
msgid "The trig functions of Sine, Cosine, Tangent use only the top socket and accept values in radians between 0 and 2*pi for one complete cycle."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:21
# f296873a42a94f6988532174c8df332c
msgid "Examples"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:24
# 83a29c973f3c495ab92883887d41dfe9
msgid "Manual Z-Mask"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:29
# 08dc1b9adfd5435e95e84d165d874ea3
msgid "Example"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:32
# a6de603f4b1f455193b41fca952f8167
msgid "This example has one scene input by the top RenderLayer node, which has a cube that is about 10 BU from the camera. The bottom RenderLayer node inputs a scene (FlyCam) with a plane that covers the left half of the view and is 7 BU from the camera. Both are fed through their respective Map Value nodes to divide the Z buffer by 20 (multiply by .05, as shown in the Size field) and clamped to be a Min/Max of 0.0/1.0 respectively."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:40
# 16e91c87913443ef8cc556d329ae8773
msgid "For the Minimum function, the node selects those Z values where the corresponding pixel is closer to the camera; so it chooses the Z values for the plane and part of the cube. The background has an infinite Z value, so it is clamped to 1.0 (shown as white). In the maximum example, the Z values of the cube are greater than the plane, so they are chosen for the left side, but the plane (FlyCam) Renderlayer's Z are infinite (mapped to 1.0) for the right side, so they are chosen."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:50
# f7aad0e893bb43e68d5258d8604d3a6d
msgid "Using Sine Function to Pulsate"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:54
# 6ffa4d6bbef44dbc99a5bec9300be414
msgid "This example has a Time node putting out a linear sequence from 0 to 1 over the course of 101 frames. The green vertical line in the curve widget shows that frame 25 is being put out, or a value of .25. That value is multiplied by 2*pi and converted to 1.0 by the Sine function, since we all know that Sine(2*pi/4)=Sine(pi/2)=+1.0."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:59
# 5d19da7f978a4f76954a0888a0375686
msgid "Since the Sine function can put out values between -1.0 and 1.0, the Map Value node scales that to 0.0 to 1.0 by taking the input (-1 to 1), adding 1 (making 0 to 2), and multiplying the result by one half (thus scaling the output between 0 and 1). The default ColorRamp converts those values to a grayscale. Thus, medium gray corresponds to a 0.0 output by the sine, black to -1.0, and white to 1.0. As you can see, Sine(pi/2)=1.0. Like having your own visual color calculator! Animating this noodle provides a smooth cyclic sequence through the range of grays."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:68
# 4397f7d4c6f44519a558f983ef608bf5
msgid "Use this function to vary, for example, the alpha channel of an image to produce a fading in/out effect. Alter the Z channel to move an scene in/out of focus. Alter a color channel value to make a color \"pulse\"."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:75
# 3a8f5feaadb142f9aa5a142ac128154c
msgid "Brightening/Scaling a Channel"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:79
# 244764a99bce4792a7cd411f1ad89742
msgid "This example has a Multiply node increasing the luminance channel (Y) of the image to make it brighter. Note that you should use a Map Value node with Min() and Max () enabled to clamp the output to valid values. With this approach you could use a logarithmic function to make a high-dynamic range image. For this particular example, there is also a Brighten/Contrast node that might give simpler control over brightness."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:88
# b0499b5705424d4c8e49c5aa91b50455
msgid "Quantize/Restrict Color Selection"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:90
# ba1900487a6242a287bf220cede3cb8d
msgid "In this example, we want to restrict the color output to only 256 possible values. Possible use of this is to see what the image will look like on an 8-bit cell phone display. To do this, we want to restrict the R, G and B values of any pixel to be one of a certain value, such that when they are combined, will not result in more than 256 possible values. The number of possible values of an output is the number of channel values multiplied by each other, or Q = R * G * B."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:97
# 1d6eff39a1254cdd93a34a12a32c1712
msgid "Since there are 3 channels and 256 values, we have some flexibility how to quantize each channel, since there are a lot of combinations of R*G*B that would equal 256. For example, if {R,G,B} = {4,4,16}, then 4 * 4 * 16 = 256. Also, {6,6,7} would give 252 possible values. The difference in appearance between {4,4,16} and {6,6,7} is that the first set (4,4, 16} would have fewer shades of red and green, but lots of shades of blue. The set {6,6, 7} would have a more even distribution of colors. To get better image quality with fewer color values, give more possible values to the predominant colors in the image."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:109
# dd3d4a9726c84654aa4523d4ae951050
msgid "Theory"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:111
# 65b9a1adc190485394ab18f4aa0f8648
msgid "`Two Approaches to Quantizing to 6 values <http://wiki.blender.org/index.php/File:Manual-Compositing-Node-Math_ColorBand>`__"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:114
# eced484630d54346acc9a5327fc0ea8b
msgid "To accomplish this quantization of an image to 256 possible values, lets use the set {6,6,7}. To split up a continuous range of values between 0 and 1 (the full Red spectrum) into 6 values, we need to construct an algorithm or function that takes any input value but only puts out 6 possible values, as illustrated by the image to the right. We want to include 0 as true black, with five other colors in between. The approach shown produces {0,.2,.4,.6,.8,1}. Dividing 1.0 by 5 equals .2, which tells us how far apart each quantified value is from the other."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:122
# 6e87f3feca4a49f0ae1c0a50baeb6cc5
msgid "So, to get good even shading, we want to take values that are 0.16 or less and map them to 0.0; values between 0.16 and 0.33 get fixed to 0.2; colorband values between 0.33 and 0.5 get quantized to 0.4, and so on up to values between 0.83 and 1.0 get mapped to 1.0."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:128
# 1f1ca33e923f48e890f80d892c1826ae
msgid "Function f(x)"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:130
# b117c65c8bc242e39f3502e64fc86861
msgid "An algebraic function is made up of primitive mathematical operations (add, subtract, multiply, sine, cosine, etc) that operate on an input value to provide a desired output value."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:134
# 8dbb34b57c6d45be843dcef4bd02c7bc
msgid "`Spreadsheet showing a function <http://wiki.blender.org/index.php/File:Manual-Compositing-Node-Math_spreadsheet>`__"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:137
# 106d739f908742d99aeb2727122d023f
msgid "The theory behind this function is scaled truncation. Let us suppose we want a math function that takes in a range of values between 0 and 1, such as .552, but only outputs a value of 0.0, 0.2, 0.4, etc. We can imagine then that we need to get that range 0 to 1 powered up to something 0 to 6 so that we can chop off and make it a whole number. So, with six divisions, how can we do that? The answer is we multiply the range by 6. The output of that first math multiply node is a range of values between 0 and 6. To get even divisions, because we are using the rounding function (see documentation above), we want any number plus or minus around a whole number will get rounded to that number. So, we subtract a half, which shifts everything over. The Round() function then makes that range 0 to 5. We then divide by 5 to get back a range of numbers between 0 and 1 which can then be combined back with the other color channels. Thus, you get the function"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:151
# cf6c010db65046de8bd8bf208518d833
msgid "f(x,n)=round[ x*n-1/2 ] /(n-1)"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:153
# 6d801518cdc34f4fa5144e1f48eee690
msgid "where n is the number of possible output values, and x is the input pixel color and f(x,n) is the output value. There's only one slight problem, and that is for the value exactly equal to 1, the formula result is 1.2, which is an invalid value. This is because the round function is actually a roundup function, and exactly 5.5 is rounded up to 6. So, by subtracting .501, we compensate and thus 5. 499 is rounded to 5. At the other end of the spectrum, pure black, or 0, when .501 subtracted, rounds up to 0 since the Round() function does not return a negative number."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:161
# 21013dff13b14cfa895379cd7c16f8d9
msgid "Sometimes using a spreadsheet can help you figure out how to put these nodes together to get the result that you want. Stepping you through the formula for n=6 and x=0.70, locate the line on the spreadsheet that has the 8-bit value 179 and R value 0.7. Multiplying by 6 gives 4.2. Subtracting 1/2 gives 3.7, which rounds up to 4. 4 divided by 5 = .8. Thus, f(0.7, 6) = 0.8 or an 8-bit value of 204. You can see that this same 8-bit value is output for a range of input values. Yeah! Geeks Rule! This is how you program Blender to do compositing based on Algebra. Thank a Teacher if you understand this."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:172
# b20b484e815d48968bb073c8ae994cbc
msgid "Reality"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:178
# 4c43b7dd8e9849fb80b3ce861c0adba9
msgid "To implement this function in Blender, consider the noodle above. First, feed the image to the Separate RGB node. For the Red channel, we string the math nodes into a function that takes each red color, multiplies (scales) it up by the desired number of divisions (6), offsets it by 0.5, rounds the value to the nearest whole number, and then divides the image pixel color by 5. So, the transformation is {0..1} becomes {0..6}, subtracting centers the medians to {-0.5...5.5} and the rounding to the nearest whole number produces {0,1,2,3,4, 5} since the function rounds down, and then dividing by five results in six values {0.0,0.2,0.4,0.6,0.8,1.0}."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:188
# 944e110bfe1b4cac8eab662076ec735c
msgid "The result is that the output value can only be one of a certain set of values, stair-stepped because of the rounding function of the math node noodle. Copying this one channel to operate on Green and Blue gives the noodle below. To get the 6:6:7, we set the three multiply nodes to {6,6,7} and the divide nodes to {5,5,6}."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:193
# c76d92136bee4e818b2b06d201a3a67b
msgid "If you make this into a node group, you can easily re-use this setup from project to project. When you do, consider using a math node to drive the different values that you would have to otherwise set manually, just to error-proof your work."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:199
# 862cdab5570a43edaa4bf3ad998a3412
msgid "Summary"
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:201
# 8a65f7a21a88479e92cc1c5d225170e4
msgid "Normally, an output render consists of 32- or 24-bit color depth, and each pixel can be one of millions of possible colors. This noodle example takes each of the Red, Green and Blue channels and normalizes them to one of a few values. When all three channels are combined back together, each color can only be one of 256 possible values."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:208
# e6bb62f0a3de46ee9d04e90d29e17ac3
msgid "While this example uses the Separate/Combine RGB to create distinct colors, other Separate/Combine nodes can be used as well. If using the YUV values, remember that U and V vary between -0.5 and +0.5, so you will have to first add on a half to bring the range between 0 and 1, and then after dividing, subtract a half to bring in back into standard range."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:214
# ec2dcb6a576644dd9d89084a918ec76d
msgid "The JPG or PNG image format will store each of the colors according to their image standard for color depth (e.g. JPG is 24-bit), but the image will be very very small, since reducing color depth and quantizing colors is essentially what the JPEG compression algorithm accomplishes."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:219
# 2b05c864f9e04b138a545d7ded6e9c54
msgid "You do not have to reduce the color depth of each channel evenly. For example, if blue was the dominant color in an image, to preserve image quality, you could reduce Red to 2 values, Green to 4, and let the blue take on 256/(2*4) or 32 values. If using the HSV, you could reduce the Saturation and Value to 2 values (0 or 1.0) by Multiply by 2 and Divide by 2, and restrict the Hue to 64 possible values."
msgstr ""

#: ../../../manual/composite_nodes/types/converter/math.rst:225
# b46cd52e16744884b6220e22625f8db1
msgid "You can use this noodle to quantize any channel; alpha, speed (vector), z-values, and so forth."
msgstr ""

