# SOME DESCRIPTIVE TITLE.
# Copyright (C) Creative Commons Zero
# This file is distributed under the same license as the Blender Reference Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-06 15:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/render/freestyle/python.rst:4
# 4c87ffa071204e519959cd91097a7bb4
msgid "Python Scripting Mode"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:6
# 240a1273d7cb464d9d0547aa7e20cc61
msgid "The Python Scripting mode offers full programmability for line stylization. In this control mode, all stylization operations are written as Python scripts referred to as style modules in the Freestyle terminology. The input to a style module is a view map (i.e., a set of detected feature edges), and the output is a set of stylized strokes."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:11
# 484f7037ec164b1da83962b78e1d98c8
msgid "A style module is composed of successive calls of five basic operators: selection, chaining, splitting, sorting and stroke creation. The selection operator identifies a subset of input feature edges based on one or more user-defined selection conditions (predicates). The selected edges are processed with the chaining, splitting and sorting operators to build chains of feature edges. These operators are also controlled by user-supplied predicates and functions in order to determine how to transform the feature edges into chains. Finally, the chains are transformed into stylized strokes by the stroke creation operator, which takes a list of user-defined stroke shaders."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:21
# c049c2d34fd14934acaf70847c0544ae
msgid "Python style modules are stored within .blend files as text datablocks. External style module files first need to be loaded in the Text Editor window. Then the pull-down menu within an entry of the style module stack allows you to select a module from the list of loaded style modules."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:30
# 06136ec50b954215919b6c631891156c
msgid "A screen capture of a style module (cartoon.py) loaded in the Text Editor window (left), as well as Freestyle options in the Python Scripting mode in the Render Layers buttons (right)"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:34
# 77496f1fc12a4300bcac559d0fd7e37e
msgid "Freestyle for Blender comes with a number of Python style modules that can serve as a starting point of your own style module writing. See also the section of the Freestyle Python API in the Blender Python API reference manual for the full detail of style module constructs."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:44
# 72a80ab8b9f44912b6b1e73bad7941e4
msgid "By T.K. using the Python Scripting mode (`File:Turning_Pages.zip <http://wiki.blender.org/index.php/File:Turning_Pages.zip>`__, CC0)"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:50
# c9933e1a705f416fae4f905c82852c8e
msgid "By T.K. using the Python Scripting mode (`File:Lily_Broken_Topology.zip <http://wiki.blender.org/index.php/File:Lily_Broken_Topology.zip>`__, CC0)"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:55
# c61b783e03e341ef916793b1198fc495
msgid "Writing Style Modules"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:57
# 7ff902f83def4457a52a155a755b1b32
msgid "A style module is a piece of code responsible for the stylization of Freestyle line drawing. The input of a style module is a set of feature edges called view map (ViewMap). The output is a set of stylized lines also referred to as strokes. A style module is structured as a pipeline of operations that allow for building strokes from the input edges within the view map. There are five kinds of operations (corresponding operator functions in parentheses):"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:65
# c42070260499454d9f0d5338ae2f42f3
msgid "Selection (Operators.select())"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:66
# d6bb841998804599ba69d98f5e729ddc
msgid "Chaining (Operators.chain(), Operators.bidirectional_chain())"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:67
# c449f77ee07949988ce77f8042a187fc
msgid "Splitting (Operators.sequential_split(), Operators.recursive_split())"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:68
# c8be6bcc7f2b4261a20787c118142fdd
msgid "Sorting (Operators.sort())"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:69
# 8b0cfa8475f444d3bda4e6c3fb59ab35
msgid "Stroke creation (Operators.create())"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:71
# ccbc93c50f6d451f959475af228ab61e
msgid "The input view map is populated with a set of ViewEdge objects. The selection operation is used to pick up ViewEdges of interest to artists based on user-defined selection conditions (predicates). Chaining operations take the subset of ViewEdges and build Chains by concatenating ViewEdges according to user-defined predicates and functions. The Chains can be further refined by splitting them into smaller pieces (e.g., at points where edges make an acute turn) and selecting a fraction of them (e.g., to keep only those longer than a length threshold). The sorting operation is used to arrange the stacking order of chains to draw one line on top of another. The chains are finally transformed into stylized strokes by the stroke creation operation applying a series of stroke shaders to individual chains."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:82
# fdf1fe23e1074c41abff2898851c11b2
msgid "ViewEdges, Chains and Strokes are generically referred to as one-dimensional (1D) elements. A 1D element is a polyline that is a series of connected straight lines. Vertices of 1D elements are called 0D elements in general."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:86
# f07256996bbe4bcd882166e22ffb7bed
msgid "All the operators act on a set of active 1D elements. The initial active set is the set of ViewEdges in the input view map. The active set is updated by the operators."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:92
# 5967a670eb574180be27b10dfac3bd20
msgid "Selection"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:94
# 8cafa66cbff742a09bdcc0e53e78a741
msgid "The selection operator goes through every element of the active set and keeps only the ones satisfying a certain predicate. The Operators.select() method takes as the argument a unary predicate that works on any Interface1D that represents a 1D element. For example:"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:104
# 19d59dc7074347c5bb26abd656d45cbc
msgid "This selection operation uses the QuantitativeInvisibilityUP1D predicate to select only the visible ViewEdge (more precisely, those whose quantitative invisibility is equal to 0). The selection operator is intended to selectively apply the style to a fraction of the active 1D elements."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:109
# 71d36c397bd043b5831e508c42098a47
msgid "It is noted that QuantitativeInvisibilityUP1D is a class implementing the predicate that tests line visibility, and the Operators.select() method takes an instance of the predicate class as argument. The testing of the predicate for a given 1D element is actually done by calling the predicate instance, that is, by invoking the __call__ method of the predicate class. In other words, the Operators.select () method takes as argument a functor which in turn takes an Interface0D object as argument. The Freestyle Python API employs functors extensively to implement predicates, as well as functions."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:120
# 8901e4fbca1d4eeca1da68904ca9c183
msgid "Chaining"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:122
# 32923ca978184f0ab023457b431d9cab
msgid "The chaining operators act on the set of active ViewEdge objects and determine the topology of the future strokes. The idea is to implement an iterator to traverse the ViewMap graph by marching along ViewEdges. The iterator defines a chaining rule that determines the next ViewEdge to follow at a given vertex (see ViewEdgeIterator). Several such iterators are provided as part of the Freestyle Python API (see ChainPredicateIterator and ChainSilhouetteIterator). Custom iterators can be defined by inheriting the ViewEdgeIterator class. The chaining operator also takes as argument a UnaryPredicate working on Interface1D as a stopping criterion. The chaining stops when the iterator has reached a ViewEdge satisfying this predicate during the march along the graph."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:133
# d995dcc0eac94658986931fc2be452d5
msgid "Chaining can be either unidirectional (Operators::chain()) or bidirectional (Operators::bidirectional_chain()). In the latter case, the chaining will propagate in the two directions from the starting edge."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:137
# a43fe1b4e3784b49b9b1e2fede39fb20
msgid "The following is a code example of bidirectional chaining:"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:146
# 8361aa229b124aa98d2f3426ccefddc9
msgid "The chaining operator uses the ChainSilhouetteIterator as the chaining rule and stops chaining as soon as the iterator has come to an invisible ViewEdge."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:149
# d649aa897b0f4f8881aeed00f152a6b5
msgid "The chaining operators process the set of active ViewEdge objects in order. The active ViewEdges can be previously sorted using the Operators::sort() method (see below). It starts a chain with the first ViewEdge of the active set. All ViewEdges that have already been involved in the chaining process are marked (in the case of the example above, the time stamp of each ViewEdge is modified by default), in order not to process the same ViewEdge twice. Once the chaining reaches a ViewEdge that satisfies the stopping predicate, the chain is terminated. Then a new chain is started from the first unmarked ViewEdge in the active set. This operation is repeated until the last unmarked ViewEdge of the active set was processed. At the end of the chaining operation, the active set is set to the Chains that have just been constructed."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:164
# 70e99b41f2d04c8eb5fc65fb62c578cf
msgid "Splitting"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:166
# eefa68fec90f49d58e9901613cf09f84
msgid "The splitting operation is used to refine the topology of each Chain. Splitting is performed either sequentially or recursively. Sequential splitting (Operators::sequentialSplit()) in its basic form, parses the Chain at a given arbitrary resolution and evaluates a unary predicate (working on 0D elements) at each point along the Chain. Every time the predicate is satisfied, the chain is split into two chains. At the end of the sequential split operation, the active set of chains is set to the new chains."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:181
# eb6a8c28347f4ec6aa6fb8e0c3eabf31
msgid "In this example, the chain is split every 2 units. A more elaborated version uses two predicates instead of one: One to determine the starting point of the new chain and the other to determine its ending point. This second version can lead to a set of Chains that are disjoint or that overlap if the two predicates are different. (see Operators::sequentialSplit() for more details)."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:187
# f1a7609575674e79b4c883b05c7dba5b
msgid "Recursive splitting (Operators::recursiveSplit()) evaluates a function on the 0D elements along the Chain at a given resolution and find the point that gives the maximum value for the function. The Chain is then split into two at that point. This process is recursively repeated on each of the two new Chains, until the input Chain satisfies a user-specified stopping condition."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:200
# 33cf7245cdaa438988ed5914056ba196
msgid "In the code example above, the Chains are recursively split at points of the highest 2D curvature. The curvature is evaluated at points along the Chain at a resolution of 5 units. Chains shorter than 5 units won't be split anymore."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:207
# 1bec44f55f2e4bb4b164332c8f5879eb
msgid "Sorting"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:209
# c96cbfb1979a46bdb5df4490a4b2ccb3
msgid "The sorting operator (Operators::sort()) arranges the stacking order of active 1D elements. It takes as argument a binary predicate used as a \"smaller than\" operator to order two 1D elements."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:219
# 050a31e504ae44ac8adb89f51bd30283
msgid "In this code example, the sorting uses the Length2DBP1D binary predicate to sort the Interface1D objects in the ascending order in terms of 2D length."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:222
# b7d3e9b4f2ab4aa1bf5d2ba5cd118987
msgid "The sorting is particularly useful when combined with causal density. Indeed, the causal density evaluates the density of the resulting image as it is modified. If we wish to use such a tool to decide to remove strokes whenever the local density is too high, it is important to control the order in which the strokes are drawn. In this case, we would use the sorting operator to insure that the most \"important\" lines are drawn first."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:230
# fafa77edb41e40e1ab94bce51a6ab3f2
msgid "Stroke creation"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:232
# b073620b7a544a45aa517be0b5ee4125
msgid "Finally, the stroke creation operator (Operators::create()) takes the active set of Chains as input and build Strokes. The operator takes two arguments. The first is a unary predicate that works on Interface1D that is designed to make a last selection on the set of chains. A Chain that doesn't satisfy the condition won't lead to a Stroke. The second input is a list of Shaders that will be responsible for the shading of each built stroke."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:250
# 5e3fc640cf3a40508bbe1ee91d4c5944
msgid "In this example, the DensityUP1D predicate is used to remove all Chains whose mean density is higher than 0.1. Each chain is transformed into a stroke by resampling it so as to have a point every 5 units and assigning to it a constant thickness of 2 units and a dark gray constant color."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:257
# dcffab995a2a42ffb463efeda9926a5f
msgid "User control on the pipeline definition"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:259
# d0277e423f3c49d0ae446dcec93ed62b
msgid "Style module writing offers different types of user control, even though individual style modules have a fixed pipeline structure. One is the sequencing of different pipeline control structures, and another is through the definition of functor objects that are passed as argument all along the pipeline."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:264
# 07a9ac15e8024d92a551cde6fe85deb5
msgid "Different pipeline control structures can be defined by sequencing the selection, chaining, splitting, and sorting operations. The stroke creation is always the last operation that concludes a style module."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:268
# b6497d2011c543ecb6c00cd3107659cd
msgid "Predicates, functions, chaining iterators, and stroke shaders can be defined by inheriting base classes and overriding appropriate methods. See the reference manual entries of the following base classes for more information on the user-scriptable constructs."
msgstr ""

#: ../../../manual/render/freestyle/python.rst:273
# b79bb117ce9140c0bfa96ed861c548f4
msgid "UnaryPredicate0D"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:274
# 0e9674de2c3a4c818edf442be89489a4
msgid "UnaryPredicate1D"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:275
# 2a18a61aed7845b3beb9e96f57df84f8
msgid "BinaryPredicate0D"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:276
# 612a391dbbb343f191cf24c430dc907d
msgid "BinaryPredicate1D"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:277
# 8e5d2b6603204854abe6c17224d7c419
msgid "UnaryFunction0DDouble"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:278
# 63aed14b4ab4414b806ba38b55441b52
msgid "UnaryFunction0DEdgeNature"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:279
# 5a1b03b869af43a0aca47a2fe44372fe
msgid "UnaryFunction0DFloat"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:280
# b5e97e77fce04191b66ff0745e43cde0
msgid "UnaryFunction0DId"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:281
# 4aa2a46ddd8e466395eae5186fce8005
msgid "UnaryFunction0DMaterial"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:282
# 2b58ddddb7d2412393679339f3a77eae
msgid "UnaryFunction0DUnsigned"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:283
# 6b9f30dffb1a4898b9420377669a8713
msgid "UnaryFunction0DVec2f"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:284
# c554dddde30a4f61aedca090ae49f0ee
msgid "UnaryFunction0DVec3f"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:285
# a8e6d2fb57684be5b06c7b31d6be4da9
msgid "UnaryFunction0DVectorViewShape"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:286
# d92e699c0c47457ab1f030c1a13f9f47
msgid "UnaryFunction0DViewShape"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:287
# a5dba1c6606b410797ed08c26d611841
msgid "UnaryFunction1DDouble"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:288
# 8ed21fc4de0d447a84e17ba73e9f5368
msgid "UnaryFunction1DEdgeNature"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:289
# b577ef8c4af2492b8fef69f1cf83efcc
msgid "UnaryFunction1DFloat"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:290
# 80f5d28e737c45cd84423ba4c11c6ef2
msgid "UnaryFunction1DUnsigned"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:291
# e414aa698f3f4313b7fcb6447aa81f52
msgid "UnaryFunction1DVec2f"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:292
# 1523df94b7e24b8596b688a81fdf3019
msgid "UnaryFunction1DVec3f"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:293
# e97dc97ba02145588c6864f440f4e5e1
msgid "UnaryFunction1DVectorViewShape"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:294
# 9dea3957f6824fea92236ab3e163802e
msgid "UnaryFunction1DVoid"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:295
# a2b2501eed1a4af485c5ea900f6f5ef3
msgid "ViewEdgeIterator"
msgstr ""

#: ../../../manual/render/freestyle/python.rst:296
# 24c071f2b8604299a7bc6c6209b6ffb3
msgid "StrokeShader"
msgstr ""

