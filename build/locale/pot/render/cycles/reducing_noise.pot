# SOME DESCRIPTIVE TITLE.
# Copyright (C) Creative Commons Zero
# This file is distributed under the same license as the Blender Reference Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-06 15:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/render/cycles/reducing_noise.rst:4
# 375446fdcebf4b5fbd96f537cf0c29ac
msgid "Reducing Noise"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:6
# 3a7a86edb25b43228233a87153e02d80
msgid "When performing a final render, it is important to reduce noise as much as possible. Here we'll discuss a number of tricks that, while breaking the laws of physics, are particularly important when rendering animations within a reasonable time. Click to enlarge the example images to see the noise differences well."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:13
# b20fd54e1f474fe3a7c042c8ff8f329b
msgid "Path Tracing"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:15
# d0c97a4e1c4542898cddcd6f1be343ab
msgid "Cycles uses path tracing with next event estimation, which is not good at rendering all types of light effects, like caustics, but has the advantage of being able to render more detailed and larger scenes compared to some other rendering algorithms. This is because we do not need to store, for example, a photon map in memory, and because we can keep rays relatively coherent to use an on-demand image cache, compared to e.g. bidirectional path tracing."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:26
# 8e2bea5417b141c282926af293bc7a00
msgid "We do the inverse of what reality does, tracing light rays from the camera into the scene and onto lights, rather than from the light sources into the scene and then into the camera. This has the advantage that we do not waste light rays that will not end up in the camera, but also means that it is difficult to find some light paths that may contribute a lot. Light rays will be sent either according to the surface BRDF, or in the direction of known light sources (lamps, emitting meshes with Sample as Lamp)."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:34
# 0b1b3f12341e4e2081365bba1e7b23bb
msgid "For more details, see the :doc:`Light Paths </render/cycles/settings/light_paths>` and :doc:`Integrator </render/cycles/settings/integrator>` documentation."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:39
# 828e4869981d453aab166d6d1e126f9a
msgid "Where Noise Comes From"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:41
# df7d0b92c08244c9b2e59f346ffeb868
msgid "To understand where noise can come from, take for example this scene. When we trace a light ray into the specified location, this is what the diffuse shader \"sees\". To find the light that is reflected from this surface, we need to find the average color from all these pixels. Note the glossy highlight on the sphere, and the bright spot the lamp casts on the nearby wall. These hotspots are 100x brighter than other parts of the image and will contribute significantly to the lighting of this pixel."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:62
# 4f2b15581dd145f7b8fd721c4c45cbb7
msgid "The lamp is a known light source, so it will not be too hard to find, but the glossy highlight (s) that it causes are a different matter. The best we can do with path tracing is to distribute light rays randomly over the hemisphere, hoping to find all the important bright spots. If for some pixels we miss some bright spot, but we do find it for another, that results in noise. The more samples we take, the higher the probability that we cover all the important sources of light."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:69
# 1c0ba28300d84080a72f1d5c2fd9389b
msgid "With some tricks we can reduce this noise. If we blur the bright spots, they become bigger and less intense, making them easier to find and less noisy. This will not give the same exact result, but often it's close enough when viewed through a diffuse or soft glossy reflection. Below is an example of using Filter Glossy and Smooth Light Falloff."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:89
# 288d63a8c0e4484983c04d5d7026a980
msgid "Bounces"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:91
# 0bd2e13517784dda92e635a8b71ddbdb
msgid "In reality light will bounce a huge number of times due to the speed of light being very high. In practice more bounces will introduce more noise, and it might be good to use something like the Limited Global Illumination preset that uses **fewer bounces for different shader types**. Diffuse surfaces typically can get away with fewer bounces, while glossy surfaces need a few more, and transmission shaders such as glass usually need the most."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:111
# 7c79672491794e1583a62142e752957d
msgid "Also important is to **use shader colors that do not have components of value 1.0** or values near that; try to keep the maximum value to 0.8 or less and make your lights brighter. In reality, surfaces are rarely perfectly reflecting all light, but there are of course exceptions; usually glass will let most light through, which is why we need more bounces there. High values for the color components tend to introduce noise because light intensity then does not decrease much as it bounces off each surface."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:121
# bb65f529851a458fb1e8468a65920edc
msgid "Caustics and Filter Glossy"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:123
# 26273ab9cf91413d8634efa67cddff1d
msgid "Caustics are a well-known source of noise, causing fireflies. They happen because the renderer has difficulty finding specular highlights viewed through a soft glossy or diffuse reflection. There is a :ref:`No Caustics <render-cycles-integrator-no_caustics>` option to disable glossy behind a diffuse reflection entirely. Many render engines will typically disable caustics by default."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:143
# f4ea1bb15c95456095a4d01ef4a7c741
msgid "However using No Caustics will result in missing light, and it still does not cover the case where a sharp glossy reflection is viewed through a soft glossy reflection. There is a :ref:`Filter Glossy <render-cycles-integrator-filter_glossy>` option to reduce the noise from such cases at the cost of accuracy. This will blur the sharp glossy reflection to make it easier to find, by increasing the shader Roughness."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:149
# 9b16ae1835a84bf095f3c58244fd2997
msgid "The above images show default settings, no caustics, and filter glossy set to 1.0."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:153
# 931b35dc8f4e418eb1cac8cbddc7197c
msgid "Light Falloff"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:155
# b3aa2af374bc468eb0daf2147ec01747
msgid "In reality light in a vacuum will always fall off at a rate of 1/(distance^2). However as distance goes to zero, this value goes to infinity and we can get very bright spots in the image. These are mostly a problem for indirect lighting, where the probability of hitting such a small but extremely bright spot is low and so happens only rarely. This is a typical recipe for fireflies."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:172
# 4eb2b6f601254685b927ce64b7b196f0
msgid "To reduce this problem, the :ref:`render-cycles-nodes-more-light_falloff` node has a **Smooth factor, that can be used to reduce the maximum intensity** a light can contribute to nearby surfaces. The images above show default falloff and smooth value 1.0."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:178
# cdd93f90825c4ef1bf0e750337bbaef4
msgid "Sample as Lamp"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:180
# e5db077f2b694e49a7afdaf18b1de488
msgid "Materials with emission shaders can be configured to be **sampled as lamp** (:ref:`render-cycles-integrator-material_settings`). This means that they will get rays sent directly towards them, rather than ending up there based on rays randomly bouncing around. For very bright mesh light sources, this can reduce noise significantly. However when the emission is not particularly bright, this will take samples away from other brighter light sources for which it is important to find them this way."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:188
# 9d1954e8b82449d2bb47a159ce32c9ae
msgid "The optimal setting here is difficult to guess; it may be a matter of trial and error, but often it is clear that a somewhat glowing object may be only contributing light locally, while a mesh light used as a lamp would need this option enabled. Here is an example where the emissive spheres contribute little to the lighting, and the image renders with slightly less noise by disabling Sample as Lamp on them."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:204
# 1afef2adec824ec49c307fc61799f1d9
msgid "The world background also has a *Sample as Lamp* (:ref:`render-cycles-integrator-world_settings`) option. This is mostly useful for environment maps that have small bright spots in them, rather than being smooth. This option will then, in a preprocess, determine the bright spots, and send light rays directly towards them. Again, enabling this option may take samples away from more important light sources if it is not needed."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:213
# b71437abe45d4f039f4049279f859bf2
msgid "Glass and Transparent Shadows"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:215
# ce6b6d22088a46238941982ef1c99816
msgid "With caustics disabled, glass will miss shadows, and with filter glossy they might be too soft. We can make a glass shader that will **use a Glass BSDF when viewed directly, and a Transparent BSDF when viewed indirectly**. The Transparent BSDF can be used for transparent shadows to find light sources straight through surfaces, and will give properly-colored shadows, but without the caustics. The Light Path node is used to determine when to use which of the two shaders."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:237
# ff51e6b601214fd29436e980d2b6ed63
msgid "Above we can see the node setup used for the glass transparency trick; on the left the render has too much shadow due to missing caustics, and on the right the render with the trick."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:243
# 6a308c05d4514c3cabc96dbeaaaf4ece
msgid "Window Lights"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:245
# 2a548948f7f7459597b197928e66cfdc
msgid "When rendering a daylight indoor scene where most of the light is coming in through a window or door opening, it is difficult for the integrator to find its way to them. We can replace the opening with a plane with an emission shader, so that the integrator knows in which direction to fire rays. For camera rays we can make this mesh light invisible, so that we can still look into the outside scene. This is done either by disabling camera ray visibility on the object, or by switching between glass and emission shaders in the material."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:254
# bfdb4ec3b0424d8c95fadef809f9898e
msgid "The two renders below have the same render time, with the second render using a mesh light positioned in the window."
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:268
# 5640d170127a4a54a3d1d59e601e1682
msgid "Clamp Fireflies"
msgstr ""

#: ../../../manual/render/cycles/reducing_noise.rst:270
# a34f14f63af14051a992903443364a88
msgid "Ideally with all the previous tricks, fireflies would be eliminated, but they could still happen. For that, **the intensity that any individual light ray sample will contribute to a pixel can be clamped** to a maximum value with the integrator :ref:`Clamp setting <render-cycles-integrator-clamp_samples>`. If set too low this can cause missing highlights in the image, which might be useful to preserve for camera effects such as bloom or glare."
msgstr ""

