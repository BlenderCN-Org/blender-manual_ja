# SOME DESCRIPTIVE TITLE.
# Copyright (C) Creative Commons Zero
# This file is distributed under the same license as the Blender Reference Manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender Reference Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-06 15:40+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../manual/animation/techs/object/constraint.rst:4
# d03fe619c4114c61a2b8dcaf52d3d62e
msgid "Using Constraints in Animation"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:6
# 862468d1b94f47d6927ae81ab552c712
msgid ":doc:`Constraints </rigging/constraints/index>` are a way to control an object's properties (its location/rotation/scale), using either plain static values (like the :doc:`\"limit\" ones </rigging/constraints/transform/limit_location>`), or (an)other object(s), called \"targets\" (like e.g. the :doc:`\"copy\" ones </rigging/constraints/transform/copy_location>`)."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:12
# a4df090d85614a5bbb61b6eb9e3ca024
msgid "Even though these constraints might be useful in static projects, their main usage is obviously in animation. There are two different aspects in constraints' animation:"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:16
# 11d5fd194da54164bb2346912c0b9b83
msgid "You can control an object's animation through the targets used by its constraints (this is a form of indirect animation)."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:18
# cdfaa325bf734ac5b1ca73659210779b
msgid "You can animate constraints' settings"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:22
# f473517652894faa8b0d6aec6523280b
msgid "Controlling Animation with Constraints"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:24
# 97e6bf95cdfe434d90fb929de251d268
msgid "This applies only to constraints using target(s). Indeed, these targets can then control the constraint's owner's properties, and hence, animating the targets will indirectly animate the owner."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:28
# a7863056c1674e1a8f1a146cad8b2b3a
msgid "This indirect \"constraint\" animation can be very simple, like for example with the :doc:`Copy Location constraint </rigging/constraints/transform/copy_location>`, where the owner object will simply copy the location of its target (with an optional constant offset). But you can also have very complex behaviors, like when using the :doc:`Action constraint </rigging/constraints/relationship/action>`, which is a sort of :doc:`Animation Driver </animation/basics/drivers>` for actions!"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:35
# 33cfe05591664f129baf5f7201004a0e
msgid "We should also mention the classical :doc:`Child Of constraint </rigging/constraints/relationship/child_of>`, which creates parent/child relationship. These relationships indeed imply indirect animation (as transforming the parent affects by default all its children). But the *Child Of* constraint is also very important, as it allows you to parent your objects to bones, and hence use :doc:`Armatures </animation/techs/armatures>` to animate them!"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:41
# 63c5dafd7e434d71beb9212101e3d8ca
msgid "Back to our simple *Copy Location* example, you can have two different behaviors of this constraint:"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:44
# 3544b1c7f891482f94fc73ee39d7deba
msgid "When its *Offset* button is disabled (the default), the location of the owner is \"absolutely\" controlled by the constraint's target, which means nothing (except other constraints below in the stack...) will be able to control the owner's position. Not even the object's animation curves."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:47
# 9083de265d9046c48d6fe0116eb7d905
msgid "However, when the *Offset* button is enabled, the location of the owner is \"relatively\" controlled by the constraint's target. This means that location's properties of the owner are offset from the location of the target. And these owner's location properties can be controlled e.g. by its *Loc...* curves (or actions, or NLA...)!"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:55
# c76fd5397bdb4d6eb7c9a5969a077995
msgid "Example"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:57
# 96ca10ed19f447f391868abcdfaebcd4
msgid "Let's use the *Copy Location* constraint and its *Offset* button. For example, you can make your owner (let's call it ``moon``) describe perfect circles centered on the ``(0.0, 0.0, 0.0)`` point (using e.g. pydriven *LocX* / *LocY* animation curves, see :doc:`this page </animation/basics/drivers#drivers>`), and then make it copy the location of a target (called, I don't know... ``earth``, for example) - with the *Offset* button enabled. Congratulation, you just modeled a satellite in a (simplified) orbit around its planet... Just do the same thing with its planet around its star (which you might call ``sun``, what do you think?), and why not, for the star around its galaxy..."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:68
# 0d37610f96694f4dbf64e223fa5efb06
msgid "Here is a small animation of a \"solar\" system created using (among a few others) the technique described above:"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:73
# b979c7629f55401c905e336e36e787d8
msgid "Note that the this \"solar\" system is not realistic at all (wrong scale, the \"earth\" is rotating in the wrong direction around the \"sun\", ...)."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:76
# 10a2ed305286486987a700b1d415e295
msgid "You can download the ``.blend`` file (`download here <http://wiki.blender.org/index.php/File:ManAnimationTechsUsingConstraintsExSolarSys.blend>`__) used to create this animation."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:82
# 7de61fb6f17d403a9336cc7440ded466
msgid "Animating Constraints Influence"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:84
# 4ab59641c43f493d9e0af4daa44cb6e3
msgid "More \"classically\", you can also animate a few properties of each constraint using animation curves."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:87
# de2fdc91c2e6402ca5d34bb48d8d250e
msgid "You only have two animation curves (see also: :doc:`/animation/editors/graph`):"
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:89
# 1997b03be71142299442f0c7ac27db20
msgid "You can animate the *Influence* of a constraint. For example, in the `Example`_ above, I used it to first stick the camera to the \"moon\", then to the \"earth\", and finally to nothing, using two *Copy Location* constraints with *Offset* set, and their *Influence* cross-fading together..."
msgstr ""

#: ../../../manual/animation/techs/object/constraint.rst:93
# 56495f2624c84b89bccba77d377446d6
msgid "More anecdotal, you can also, for some constraints using an armature's bone as target, animate where along this bone (between root and tip) lays the real target point (``0.0`` means \"full-root\", and ``1.0``, \"full-tip\")."
msgstr ""

