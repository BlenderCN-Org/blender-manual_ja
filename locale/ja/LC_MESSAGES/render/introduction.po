# 
msgid ""
msgstr ""
"Project-Id-Version: Blender Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-03 14:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../manual/render/introduction.rst:4
msgid "Introduction"
msgstr ""

#: ../../manual/render/introduction.rst:32
msgid "Workflow"
msgstr ""

#: ../../manual/render/introduction.rst:34
msgid "In general, the process for rendering is:"
msgstr ""

#: ../../manual/render/introduction.rst:6
msgid "Reference"
msgstr ""

#: ../../manual/render/introduction.rst:14
msgid ""
"Rendering is the process of creating a 2D image (or video) from your 3D "
"scene. What that image looks like is based on four factors which the user "
"can control:"
msgstr ""

#: ../../manual/render/introduction.rst:17
msgid "A :doc:`Camera </render/camera/introduction>`"
msgstr ""

#: ../../manual/render/introduction.rst:18
msgid ""
"The :doc:`Lighting </render/blender_render/lighting/introduction>` in your "
"scene"
msgstr ""

#: ../../manual/render/introduction.rst:19
msgid ""
"The :doc:`Material </render/blender_render/materials/introduction>` of each "
"object"
msgstr ""

#: ../../manual/render/introduction.rst:20
msgid "Various render settings (quality, image size, layers etc)"
msgstr ""

#: ../../manual/render/introduction.rst:22
msgid ""
"Your computer will perform various complex calculations based on those "
"factors in order to give you your rendered image. This process may take some"
" time depending on the complexity of the scene and your hardware."
msgstr ""

#: ../../manual/render/introduction.rst:25
msgid ""
"Once the render is complete, it is possible to do additional manipulation of"
" the image, called :doc:`Post Processing </render/post_process/index>`."
msgstr ""

#: ../../manual/render/introduction.rst:28
msgid ""
"Finally, the output can be saved to an image or video file using one of the "
":doc:`output formats </render/output>`."
msgstr ""

#: ../../manual/render/introduction.rst:36
msgid "Position the camera"
msgstr ""

#: ../../manual/render/introduction.rst:37
msgid "Light the scene"
msgstr ""

#: ../../manual/render/introduction.rst:38
msgid "Setup materials"
msgstr ""

#: ../../manual/render/introduction.rst:39
msgid "Render a test image using lower quality settings"
msgstr ""

#: ../../manual/render/introduction.rst:40
msgid "Change or fix anything you noticed in the render"
msgstr ""

#: ../../manual/render/introduction.rst:41
msgid "Repeat the above two steps until you are satisfied"
msgstr ""

#: ../../manual/render/introduction.rst:42
msgid ""
"Render a high quality image, change or fix any issues and repeat until "
"satisfied"
msgstr ""

#: ../../manual/render/introduction.rst:43
msgid ""
"Save your image to a file, or render the animation to a video or image "
"sequence."
msgstr ""

#: ../../manual/render/introduction.rst:47
msgid "Render Engines"
msgstr ""

#: ../../manual/render/introduction.rst:49
msgid ""
"The Render Engine is the set of code which controls how your materials and "
"lighting are used, and ultimately what the rendered image looks like."
msgstr ""

#: ../../manual/render/introduction.rst:52
msgid ""
"Some engines may be better at certain things than others due to the math "
"they use or core principles around which they were written."
msgstr ""

#: ../../manual/render/introduction.rst:55
msgid "Blender includes two render engines by default:"
msgstr ""

#: ../../manual/render/introduction.rst:57
msgid ":doc:`Blender Render </render/blender_render/index>`"
msgstr ""

#: ../../manual/render/introduction.rst:58
msgid ":doc:`Cycles </render/cycles/index>`"
msgstr ""

#: ../../manual/render/introduction.rst:60
msgid ""
"More render engines from third-party developers can also be added using :doc"
":`Add-ons </extensions/python/add_ons>`"
msgstr ""

#~ msgid ""
#~ "Rendering is the final process of CG (short of post processing, of course) "
#~ "and is the phase in which a 2D image corresponding to your 3D scene is "
#~ "finally created. Rendering is a CPU-intensive process. You can render an "
#~ "image on your computer, or use a render farm which is a network of PCs that "
#~ "each work on a different section of the image or on different frames. This "
#~ "section provides a full explanation of the features in Blender related to "
#~ "the process of producing your image or animation."
#~ msgstr ""

#~ msgid ""
#~ "After you have set up the materials, textures, lighting, and the camera, you"
#~ " can begin rendering. It is unlikely that you will get it right on the first"
#~ " render, so be prepared to do many test renderings. This section describes "
#~ "the options and settings for the rendering process that will result in the "
#~ "desired image quality."
#~ msgstr ""

#~ msgid ""
#~ "We know that around the world, our users have PCs of widely varying power. "
#~ "Rendering is *the* process in CG that can chew up CPU and disk space like "
#~ "there's no tomorrow. Especially in corporate environments, it is easy to "
#~ "fill up terabyte servers by uploading ten hour-long DV tapes and doing some "
#~ "editing. So there are lots of options to try to shoehorn a big job into a "
#~ "small PC by providing you with multiple sets of options that chunk up the "
#~ "work as best we can, while still preserving image integrity."
#~ msgstr ""

#~ msgid ""
#~ "This page discusses the main options found on the Render panel, and "
#~ "subsequent pages explain more."
#~ msgstr ""

#~ msgid "Overview"
#~ msgstr ""

#~ msgid "Create all the objects in the scene"
#~ msgstr ""

#~ msgid ":doc:`Position the Camera </render/camera/introduction>`"
#~ msgstr ""

#~ msgid ""
#~ "Render a test image at 25% or so without oversampling or ray tracing etc., "
#~ "so that it is very fast and does not slow you down"
#~ msgstr ""

#~ msgid "Set and adjust the materials/textures and lighting"
#~ msgstr ""

#~ msgid "Iterate the above steps until satisfied with the quality level"
#~ msgstr ""

#~ msgid ""
#~ "Render progressively higher-quality full-size images, making small "
#~ "refinements and using more compute time"
#~ msgstr ""

#~ msgid "Save your images"
#~ msgstr ""

#~ msgid "Render Workbench Integration"
#~ msgstr ""

#~ msgid ""
#~ "Blender has three independent rendering workbenches which flow the image "
#~ "processing in a pipeline from one to the other in order:"
#~ msgstr ""

#~ msgid "Rendering Engine"
#~ msgstr ""

#~ msgid ""
#~ "You can use each one of these independently, or in a linked workflow. For "
#~ "example, you can use the Sequencer by itself to do post-processing on a "
#~ "video stream. You can use the Compositor by itself to perform some color "
#~ "adjustment on an image. You can render the scene via the active Render "
#~ "Layer, and save that image directly, with the scene image computed in "
#~ "accordance with the active render layer, without using the Compositor or "
#~ "Sequencer. These possibilities are shown in the top part of the image to the"
#~ " right."
#~ msgstr ""

#~ msgid ""
#~ "The bottom part of the possibilities graphic shows the ultimate blender: "
#~ "post-processed images and a dynamic component render layer from Scene A are "
#~ "mixed with two render layers from Scene B in the compositor, then sequenced "
#~ "and finally saved for your viewing enjoyment."
#~ msgstr ""

#~ msgid ""
#~ "These examples are only a small part of the possibilities in using Blender. "
#~ "Please read on to learn about all the options, and then exercise your "
#~ "creativity in developing your own unique workflow."
#~ msgstr ""

#~ msgid "The Render Settings Panel"
#~ msgstr ""

#~ msgid ""
#~ "The Render tab contains all of the options for the internal render engine, "
#~ "or an external one, if selected."
#~ msgstr ""

#~ msgid "Render"
#~ msgstr ""

#~ msgid ""
#~ "Here you can activate the rendering process, by rendering a :doc:`Still "
#~ "Image </render/display>` or an :doc:`Animation "
#~ "</render/workflows/animations>`."
#~ msgstr ""

#~ msgid ""
#~ "You can also select where the image is rendered to. This are described on "
#~ "the :doc:`Render Display </render/display>` page."
#~ msgstr ""

#~ msgid "Layers"
#~ msgstr ""

#~ msgid ""
#~ "The Layers menu contains options for rendering in :doc:`Layers "
#~ "</render/post_process/layers>` and :doc:`Passes "
#~ "</render/post_process/passes>`"
#~ msgstr ""

#~ msgid "Dimensions"
#~ msgstr ""

#~ msgid ""
#~ "This menu has settings for the size of the rendered images (see :doc:`Output"
#~ " Options </render/output>`), and options for rendering sequences (see "
#~ ":doc:`Animations </render/workflows/animations>`))."
#~ msgstr ""

#~ msgid "Anti-Aliasing"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Antialiasing </render/internal/antialiasing>` is important for "
#~ "producing high quality renders that do not have \"jaggies\" or stair-stepped"
#~ " pixel artifacts."
#~ msgstr ""

#~ msgid "Motion Blur"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Motion Blur </render/post_process/motion_blur>` is an important effect"
#~ " in rendering moving images. It prevents the animation from appearing "
#~ "unrealistic and stuttery, as in stop-motion, where each frame is a perfect "
#~ "still image."
#~ msgstr ""

#~ msgid "Shading"
#~ msgstr ""

#~ msgid ""
#~ "These are options for controlling what shading effects are calculated in the"
#~ " render. Deselecting them disables them."
#~ msgstr ""

#~ msgid "Uses a linear workflow when enabled"
#~ msgstr ""

#~ msgid ":doc:`Alpha </render/output>`"
#~ msgstr ""

#~ msgid "Set how transparent pixels are rendered."
#~ msgstr ""

#~ msgid "Output"
#~ msgstr ""

#~ msgid ""
#~ "Set where images are rendered to and what file type. See :doc:`Output "
#~ "Options </render/output>`."
#~ msgstr ""

#~ msgid "Performance"
#~ msgstr ""

#~ msgid ""
#~ "Control the way the renderer performs with respect to the computer's memory "
#~ "and processor. See :doc:`Performance </render/performance/index>`."
#~ msgstr ""

#~ msgid "Post Processing"
#~ msgstr ""

#~ msgid ""
#~ "Fields are used when :doc:`Rendering for Video </render/output/video>`."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Dithering </render/post_process/index>` is method of blurring pixels."
#~ msgstr ""

#~ msgid ""
#~ "You can also enable :doc:`Edge Rendering </render/post_process/index>` to "
#~ "create sketch-like or toon-like effects."
#~ msgstr ""

#~ msgid "Stamp"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Stamping </render/post_process/index>` inserts text over the rendered "
#~ "images, as well as stamps meta-data into image formats that support it (PNG,"
#~ " JPEG and EXR)."
#~ msgstr ""

#~ msgid "Bake"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Render Baking </render/workflows/bake>` is a process that creates "
#~ "texture files that hold desired rendered effects, like lighting, shadows, or"
#~ " color information. This is useful for working with real-time graphics that "
#~ "benefit from not having to calculate shading when not necessary."
#~ msgstr ""

#~ msgid ""
#~ "The rendering of the current scene is performed by pressing the big *Image* "
#~ "button in the *Render* panel, or by pressing :kbd:`F12` (you can define how "
#~ "the rendered image is displayed on-screen in the :doc:`Render Output Options"
#~ " </render/output>`). See also the :doc:`Render Window </render/display>`."
#~ msgstr ""

#~ msgid ""
#~ "A movie is produced by pressing the big *Animation* button. The result of a "
#~ "rendering is kept in a buffer and shown in its own window. It can be saved "
#~ "by pressing :kbd:`F3` or via the *File→Save Image* menu using the output "
#~ "option in the *Output* panel. Animations are saved according to the format "
#~ "specified, usually as a series of frames in the output directory. See "
#~ ":doc:`Output Options </render/output>` and :doc:`Animations "
#~ "</render/workflows/animations>`."
#~ msgstr ""

#~ msgid ""
#~ "The image is rendered according to the dimensions defined in the "
#~ "*Dimensions* Panel."
#~ msgstr ""

#~ msgid ""
#~ "You can also link scenes and renders in Blender as shown, either directly or"
#~ " through intermediate file storage. Each scene can have multiple render "
#~ "layers, and each Render Layer is mixed inside the Compositor. The active "
#~ "render layer is the render layer that is displayed and checked active. If "
#~ "the displayed render layer is not checked active/enabled, then the next "
#~ "checked render layer in the list is used to compute the image. The image is "
#~ "displayed as the final render if *Compositing* and *Sequencer* are NOT "
#~ "enabled."
#~ msgstr ""

#~ msgid ""
#~ "If *Compositing* is enabled, the render layers are fed into the Compositor. "
#~ "The nodes manipulate the image and send it to the Composite output, where it"
#~ " can be saved, or, if *Do Sequence* is on, it is sent to the Sequencer."
#~ msgstr ""

#~ msgid ""
#~ "If *Sequencer* is enabled, the result from the compositor (if Do Composite "
#~ "is enabled) or the active Render layer (if Do Composite is not enabled) is "
#~ "fed into the Scene strip in the Sequencer. There, it is manipulated "
#~ "according to the VSE settings, and finally delivered as the image for that "
#~ "scene."
#~ msgstr ""

#~ msgid ""
#~ "Things get a little more complicated when a .blend file has multiple scenes,"
#~ " for example Scene A and Scene B. In Scene B, if *Compositing* is enabled, "
#~ "the Render Layer node in Scene B's compositor can pull in a Render Layer "
#~ "from Scene A. Note that this image will not be the post-processed one. If "
#~ "you want to pull in the composited and/or sequenced result from Scene A, you"
#~ " will have to render Scene A out to a file using Scene A's compositor and/or"
#~ " sequencer, and then use the Image input node in Scene B's compositor to "
#~ "pull it in."
#~ msgstr ""

#~ msgid ""
#~ "Blender has an internal render engine that it uses. This is a fast renderer,"
#~ " and can produce nice results if fine tuned. There are several other "
#~ "external renderers that can be loaded, which offer more advanced rendering "
#~ "tools."
#~ msgstr ""

#~ msgid ":doc:`Compositor </composite_nodes/introduction>`"
#~ msgstr ""

#~ msgid ":doc:`Color Management </render/post_process/cm_and_exposure>`"
#~ msgstr ""

#~ msgid "Alternative Render Engines"
#~ msgstr ""

#~ msgid ":doc:`Light the scene </render/blender_render/lighting/introduction>`"
#~ msgstr ""

#~ msgid ":doc:`Sequencer </editors/sequencer/introduction>`"
#~ msgstr ""

#~ msgid ":doc:`Textures </render/blender_render/textures/introduction>`"
#~ msgstr ""

#~ msgid ":doc:`Shadows </render/blender_render/lighting/shadows>`"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Subsurface Scattering "
#~ "</render/blender_render/materials/properties/subsurface_scattering>`"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Environment Maps "
#~ "</render/blender_render/textures/mapping/environment>`"
#~ msgstr ""

#~ msgid ":doc:`Ray Tracing </render/blender_render/lighting/shadows>`"
#~ msgstr ""

#~ msgid ""
#~ "Control effects that are applied after the image has been rendered. If you "
#~ "are using the :doc:`Compositor </composite_nodes/index>` or :doc:`Sequencer "
#~ "</editors/sequencer/index>`, you can tell Blender to process those effects "
#~ "instead of directly rendering the scene."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Alternative Render Engines </render/engines/index>` apart from the "
#~ "original Blender rendering engine are available that have their respective "
#~ "advantages and disadvantages. :doc:`LuxRender </render/engines/luxrender>` "
#~ "for photorealistic, accurate rendering (separate installation required) and "
#~ "the :doc:`Cycles </render/cycles/index>` engine are a couple of the most "
#~ "popular examples. The :doc:`Cycles </render/cycles/index>` rendering engine "
#~ "is an add-on that is included with Blender and already activated for you. "
#~ "See the :doc:`Cycles Render Engine </render/cycles/index>` for further "
#~ "information."
#~ msgstr ""

#~ msgid ":doc:`Shadows </lighting/shadows>`"
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Subsurface Scattering </materials/properties/subsurface_scattering>`"
#~ msgstr ""

#~ msgid ":doc:`Light the scene </lighting/introduction>`"
#~ msgstr ""

#~ msgid ":doc:`Sequencer </sequencer/introduction>`"
#~ msgstr ""

#~ msgid ":doc:`Textures </textures/introduction>`"
#~ msgstr ""

#~ msgid ":doc:`Environment Maps </textures/mapping/environment>`"
#~ msgstr ""

#~ msgid ":doc:`Ray Tracing </lighting/shadows>`"
#~ msgstr ""

#~ msgid ""
#~ "Control effects that are applied after the image has been rendered. If you "
#~ "are using the :doc:`Compositor </composite_nodes/index>` or :doc:`Sequencer "
#~ "</sequencer/index>`, you can tell Blender to process those effects instead "
#~ "of directly rendering the scene."
#~ msgstr ""

#~ msgid ""
#~ ":doc:`Alternative Render Engines </render/engines/index>` apart from the "
#~ "original Blender rendering engine are available that have their respective "
#~ "advantages and disadvantages. :doc:`LuxRender </render/engines/luxrender>` "
#~ "for photorealistic, accurate rendering (separate installation required)  and"
#~ " the :doc:`Cycles </render/cycles/index>` engine are a couple of the most "
#~ "popular examples.  The :doc:`Cycles </render/cycles/index>` rendering engine"
#~ " is an add-on that is included with Blender and already activated for you. "
#~ "See the :doc:`Cycles Render Engine </render/cycles/index>` for further "
#~ "information."
#~ msgstr ""

#~ msgid ""
#~ "Blender has in internal render engine that it uses. This is a fast renderer,"
#~ " and can produce nice results if fine tuned. There are several other "
#~ "external renderers that can be loaded, which offer more advanced rendering "
#~ "tools."
#~ msgstr ""

#~ msgid "Workflow In general, the process for rendering is:"
#~ msgstr ""

#~ msgid ":doc:`Light the scene </lighting>`"
#~ msgstr ""

#~ msgid ":doc:`Compositor </composite_nodes>`"
#~ msgstr ""

#~ msgid ":doc:`Sequencer </sequencer>`"
#~ msgstr ""

#~ msgid ":doc:`Textures </textures>`"
#~ msgstr ""

#~ msgid ":doc:`Environment Maps </textures/types/environment_maps>`"
#~ msgstr ""

#~ msgid ":doc:`Ray Tracing </introduction_to_shading>`"
#~ msgstr ""

#~ msgid ":doc:`Color Management </render/color_management>`"
#~ msgstr ""

#~ msgid ""
#~ "Control effects that are applied after the image has been rendered. If you "
#~ "are using the :doc:`Compositor </composite_nodes>` or :doc:`Sequencer "
#~ "</sequencer>`, you can tell Blender to process those effects instead of "
#~ "directly rendering the scene."
#~ msgstr ""

#~ msgid ""
#~ "The rendering of the current scene is performed by pressing the big "
#~ ":guilabel:`Image` button in the :guilabel:`Render` panel, or by pressing "
#~ ":kbd:`f12` (you can define how the rendered image is displayed on-screen in "
#~ "the :doc:`Render Output Options </render/output>`). See also the "
#~ ":doc:`Render Window </render/display>`."
#~ msgstr ""

#~ msgid ""
#~ "A movie is produced by pressing the big :guilabel:`Animation` button. The "
#~ "result of a rendering is kept in a buffer and shown in its own window. It "
#~ "can be saved by pressing :kbd:`f3` or via the :guilabel:`File→Save Image` "
#~ "menu using the output option in the :guilabel:`Output` panel. Animations are"
#~ " saved according to the format specified, usually as a series of frames in "
#~ "the output directory. See :doc:`Output Options </render/output>` and "
#~ ":doc:`Animations </render/workflows/animations>`."
#~ msgstr ""

#~ msgid ""
#~ "The image is rendered according to the dimensions defined in the "
#~ ":guilabel:`Dimensions` Panel."
#~ msgstr ""

#~ msgid "Distributed Render Farm"
#~ msgstr ""

#~ msgid ""
#~ "There are several levels of CPU allocation that you can use to decrease "
#~ "overall render time by applying more brainpower to the task."
#~ msgstr ""

#~ msgid ""
#~ "First, if you have a multi-core CPU, you can increase the number of threads,"
#~ " and Blender will use that number of CPUs to compute the render."
#~ msgstr ""

#~ msgid ""
#~ "Second, if you have a local area network with available PCs, you can split "
#~ "the work up by frames. For example, if you want to render a 200-frame "
#~ "animation, and have 5 PCs of roughly equal processing power, you can "
#~ "allocate PC#1 to produce frames 1-40, PC#2 to frames 41-80, and so on. If "
#~ "one PC is slower than the others, simply allocate fewer frames to that PC. "
#~ "To do LAN renders, map the folder containing the .blend file (in which you "
#~ "should have packed your external data, like the textures, ...) as a "
#~ "shareable drive. Start Blender on each PC and open the .blend file. Change "
#~ "the Start and End frame counts on that PC, but do not save the .blend file. "
#~ "Start Rendering. If you use relative paths for your output pathspec, the "
#~ "rendered frames will be placed on the host PC."
#~ msgstr ""

#~ msgid ""
#~ "Third, you can do WAN rendering, which is where you email or fileshare or "
#~ "Verse-share the .blend file (with packed data!) across the Internet, and use"
#~ " anyone's PC to perform some of the rendering. They would in turn email you "
#~ "the finished frames as they are done. If you have reliable friends, this is "
#~ "a way for you to work together."
#~ msgstr ""

#~ msgid ""
#~ "Fourth, you can use a render farm service. These services, like BURP, are "
#~ "run by an organization. You email them your file, and then they distribute "
#~ "it out across their PCs for rendering. BURP is mentioned because it is free,"
#~ " and is a service that uses fellow Blender users' PCs with a BOINC-type of "
#~ "background processing. Other services are paid subscriptions or pay-as-you-"
#~ "go services."
#~ msgstr ""

#~ msgid ""
#~ "You can also link scenes and renders in Blender as shown, either directly or"
#~ " through intermediate file storage. Each scene can have multiple render "
#~ "layers, and each Render Layer is mixed inside the Compositor. The active "
#~ "render layer is the render layer that is displayed and checked active. If "
#~ "the displayed render layer is not checked active/enabled, then the next "
#~ "checked render layer in the list is used to compute the image. The image is "
#~ "displayed as the final render if :guilabel:`Compositing` and "
#~ ":guilabel:`Sequencer` are NOT enabled."
#~ msgstr ""

#~ msgid ""
#~ "If :guilabel:`Compositing` is enabled, the render layers are fed into the "
#~ "Compositor. The nodes manipulate the image and send it to the Composite "
#~ "output, where it can be saved, or, if *Do Sequence* is on, it is sent to the"
#~ " Sequencer."
#~ msgstr ""

#~ msgid ""
#~ "If :guilabel:`Sequencer` is enabled, the result from the compositor (if Do "
#~ "Composite is enabled) or the active Render layer (if Do Composite is not "
#~ "enabled) is fed into the Scene strip in the Sequencer. There, it is "
#~ "manipulated according to the VSE settings, and finally delivered as the "
#~ "image for that scene."
#~ msgstr ""

#~ msgid ""
#~ "Things get a little more complicated when a .blend file has multiple scenes,"
#~ " for example Scene A and Scene B. In Scene B, if :guilabel:`Compositing` is "
#~ "enabled, the Render Layer node in Scene B's compositor can pull in a Render "
#~ "Layer from Scene A. Note that this image will not be the post-processed one."
#~ " If you want to pull in the composited and/or sequenced result from Scene A,"
#~ " you will have to render Scene A out to a file using Scene A's compositor "
#~ "and/or sequencer, and then use the Image input node in Scene B's compositor "
#~ "to pull it in."
#~ msgstr ""
