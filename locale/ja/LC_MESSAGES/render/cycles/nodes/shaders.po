# 
msgid ""
msgstr ""
"Project-Id-Version: Blender Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-03 14:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../manual/render/cycles/nodes/shaders.rst:5
msgid "Shader Nodes"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:7
msgid "BSDF"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:13
msgid "Diffuse"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:15
msgid "Lambertian and Oren-Nayar diffuse reflection."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:18
#: ../../manual/render/cycles/nodes/shaders.rst:46
#: ../../manual/render/cycles/nodes/shaders.rst:73
#: ../../manual/render/cycles/nodes/shaders.rst:104
#: ../../manual/render/cycles/nodes/shaders.rst:141
#: ../../manual/render/cycles/nodes/shaders.rst:168
#: ../../manual/render/cycles/nodes/shaders.rst:204
#: ../../manual/render/cycles/nodes/shaders.rst:239
#: ../../manual/render/cycles/nodes/shaders.rst:261
#: ../../manual/render/cycles/nodes/shaders.rst:306
#: ../../manual/render/cycles/nodes/shaders.rst:338
#: ../../manual/render/cycles/nodes/shaders.rst:379
#: ../../manual/render/cycles/nodes/shaders.rst:410
msgid "Color input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:18
msgid ""
"Color of the surface, or physically speaking, the probability that light is "
"reflected or transmitted for each wavelength."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:20
#: ../../manual/render/cycles/nodes/shaders.rst:75
#: ../../manual/render/cycles/nodes/shaders.rst:106
#: ../../manual/render/cycles/nodes/shaders.rst:206
#: ../../manual/render/cycles/nodes/shaders.rst:241
msgid "Roughness input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:21
msgid ""
"Surface roughness; 0.0 gives standard Lambertian reflection, higher values "
"activate the Oren-Nayar BSDF."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:22
#: ../../manual/render/cycles/nodes/shaders.rst:48
#: ../../manual/render/cycles/nodes/shaders.rst:77
#: ../../manual/render/cycles/nodes/shaders.rst:117
#: ../../manual/render/cycles/nodes/shaders.rst:147
#: ../../manual/render/cycles/nodes/shaders.rst:211
#: ../../manual/render/cycles/nodes/shaders.rst:243
#: ../../manual/render/cycles/nodes/shaders.rst:266
#: ../../manual/render/cycles/nodes/shaders.rst:312
msgid "Normal input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:23
#: ../../manual/render/cycles/nodes/shaders.rst:49
#: ../../manual/render/cycles/nodes/shaders.rst:78
#: ../../manual/render/cycles/nodes/shaders.rst:118
#: ../../manual/render/cycles/nodes/shaders.rst:148
#: ../../manual/render/cycles/nodes/shaders.rst:212
#: ../../manual/render/cycles/nodes/shaders.rst:244
#: ../../manual/render/cycles/nodes/shaders.rst:267
#: ../../manual/render/cycles/nodes/shaders.rst:313
msgid ""
"Normal used for shading; if nothing is connected the default shading normal "
"is used."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:26
#: ../../manual/render/cycles/nodes/shaders.rst:52
#: ../../manual/render/cycles/nodes/shaders.rst:80
#: ../../manual/render/cycles/nodes/shaders.rst:122
#: ../../manual/render/cycles/nodes/shaders.rst:151
#: ../../manual/render/cycles/nodes/shaders.rst:172
#: ../../manual/render/cycles/nodes/shaders.rst:214
#: ../../manual/render/cycles/nodes/shaders.rst:247
#: ../../manual/render/cycles/nodes/shaders.rst:270
msgid "BSDF output"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:25
msgid ""
"Diffuse :abbr:`BSDF (Bidirectional scattering distribution function)` "
"shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:32
msgid "Diffuse behavior"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:42
msgid "Translucent"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:47
#: ../../manual/render/cycles/nodes/shaders.rst:205
msgid ""
"Color of the surface, or physically speaking, the probability that light is "
"transmitted for each wavelength."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:51
msgid ""
"Translucent :abbr:`BSDF (Bidirectional scattering distribution function)` "
"shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:61
msgid "Translucent Shader"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:65
msgid "Glossy"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:67
msgid ""
"Glossy reflection with microfacet distribution, used for materials such as "
"metal or mirrors."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:71
#: ../../manual/render/cycles/nodes/shaders.rst:102
#: ../../manual/render/cycles/nodes/shaders.rst:202
#: ../../manual/render/cycles/nodes/shaders.rst:237
msgid "Distribution"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:74
#: ../../manual/render/cycles/nodes/shaders.rst:105
#: ../../manual/render/cycles/nodes/shaders.rst:142
#: ../../manual/render/cycles/nodes/shaders.rst:262
#: ../../manual/render/cycles/nodes/shaders.rst:307
msgid ""
"Color of the surface, or physically speaking, the probability that light is "
"reflected for each wavelength."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:76
msgid ""
"Influences sharpness of the reflection; perfectly sharp at 0.0 and smoother "
"with higher values."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:80
#: ../../manual/render/cycles/nodes/shaders.rst:246
msgid ""
"Glossy :abbr:`BSDF (Bidirectional scattering distribution function)` shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:94
msgid "Anisotropic"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:96
msgid ""
"Anisotropic glossy reflection, with separate control over U and V direction "
"roughness. The tangents used for shading are derived from the active UV map."
" If no UV map is available, they are automatically generated using a sphere "
"mapping based on the mesh bounding box."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:107
msgid ""
"Sharpness of the reflection; perfectly sharp at 0.0 and smoother with higher"
" values."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:110
msgid "Anisotropy input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:109
msgid ""
"Amount of anisotropy in the reflection; 0.0 gives a round highlight. Higher "
"values give elongated highlights orthogonal to the tangent direction; "
"negative values give highlights shaped along the tangent direction."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:115
msgid "Rotation input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:113
msgid ""
"Rotation of the anisotropic tangent direction. Value 0.0 equals 0- rotation,"
" 0.25 equals 90- and 1.0 equals 360- = 0- . This can be used to texture the "
"tangent direction."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:119
msgid "Tangent input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:120
msgid ""
"Tangent used for shading; if nothing is connected the default shading "
"tangent is used."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:122
msgid ""
"Anisotropic glossy :abbr:`BSDF (Bidirectional scattering distribution "
"function)` shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:128
msgid "Anisotropic rotation on 0"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:132
msgid "Anisotropic rotation on 0.25 (90- )"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:136
msgid "Toon"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:138
msgid ""
"Diffuse and Glossy Toon :abbr:`BSDF (Bidirectional scattering distribution "
"function)` for creating cartoon light effects."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:143
msgid "Size input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:144
msgid ""
"Parameter between 0.0 and 1.0 that gives a angle of reflection between 0- "
"and 90- ."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:145
msgid "Smooth input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:146
msgid ""
"This value specifies an angle over which a smooth transition from full to no"
" reflection happens."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:150
msgid ""
"Toon :abbr:`BSDF (Bidirectional scattering distribution function)` shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:155
msgid "Toon Shader"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:159
msgid "Transparent"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:161
msgid ""
"Transparent :abbr:`BSDF (Bidirectional scattering distribution function)` "
"without refraction, passing straight through the surface, as if there were "
"no geometry there. Useful with alpha maps, for example. This shader "
":ref:`affects light paths somewhat differently <render-cycles-light_paths-"
"transparency>` than other :abbr:`BSDF (Bidirectional scattering distribution"
" function)` s. Note that only pure white transparent shaders are completely "
"transparent."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:168
msgid ""
"Color of the surface, or physically speaking, the probability for each "
"wavelength that light is blocked or passes straight through the surface."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:171
msgid ""
"Transparent :abbr:`BSDF (Bidirectional scattering distribution function)` "
"shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:179
msgid "Transparent behaviour"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:185
msgid "Transparent Shader (pure white)"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:189
msgid "Transparent Shader (gray)"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:193
msgid "Glass"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:195
msgid ""
"Glass-like shader mixing refraction and reflection at grazing angles. Like "
"the transparent shader, only pure white will make it transparent. The glass "
"shader tends to cause noise due to caustics. Since the Cycles path tracing "
"integrator is not very good at rendering caustics, it helps to combine this "
"with a transparent shader for shadows; for :ref:`more details see here "
"<render-cycles-reducing_noise-glass_and_transp_shadows>`"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:207
#: ../../manual/render/cycles/nodes/shaders.rst:242
msgid ""
"Influences sharpness of the refraction; perfectly sharp at 0.0 and smoother "
"with higher values."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:209
msgid "IOR input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:209
msgid ""
"Index of refraction defining how much the ray changes direction. At 1. 0 "
"rays pass straight through like transparent; higher values give more "
"refraction."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:214
msgid ""
"Glass :abbr:`BSDF (Bidirectional scattering distribution function)` shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:228
msgid "Refraction"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:230
msgid ""
"Glossy refraction with sharp or microfacet distribution, used for materials "
"that transmit light. For best results this node should be considered as a "
"building block and not be used on its own, but rather mixed with a glossy "
"node using a fresnel factor. Otherwise it will give quite dark results at "
"the edges for glossy refraction."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:240
msgid ""
"Color of the surface, or physically speaking, the probability that light is "
"refracted for each wavelength."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:251
msgid "Refraction Shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:255
msgid "Velvet"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:257
msgid ""
"Velvet reflection shader for materials such as cloth. It is meant to be used"
" together with other shaders (such as a *Diffuse Shader*) and isn't "
"particularly useful on it's own."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:264
msgid "Sigma input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:264
msgid ""
"Variance of the normal distribution, controlling the sharpness of the peak -"
" can be thought of as a kind of *roughness*."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:269
msgid ""
"Velvet :abbr:`BSDF (Bidirectional scattering distribution function)` shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:279
msgid "The Velvet Shader"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:283
msgid "BSSRDF"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:286
msgid "Subsurface Scattering"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:288
msgid ""
"Simple subsurface multiple scattering, for materials such as skin, wax, "
"marble, milk and others. For these materials, rather than light being "
"reflect directly off the surface, it will penetrate the surface and bounce "
"around internally before getting absorbed or leaving the surface at a nearby"
" point."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:293
msgid ""
"How far the color scatters on average can be configured per RGB color "
"channel. For example, for skin, red colors scatter further, which gives "
"distinctive red-colored shadows, and a soft appearance."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:304
msgid "Falloff"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:298
msgid ""
"Lighting distance falloff function. **Cubic** is a sharp falloff useful for "
"many simple materials. The function is (radius - x)\\ :sup:`3` **Gaussian** "
"gives a smoother falloff following a normal distribution, which is "
"particularly useful for more advanced materials that use measured data that "
"was fitted to one or more such Gaussian functions. The function is e\\ "
":sup:`-8x`:sup:`2`:sup:`/radius`:sup:`2`, such that the radius roughly "
"matches the maximum falloff distance. To match a given measured variance v, "
"set radius = sqrt(16*v)."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:308
msgid "Scale input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:309
msgid "Global scale factor for the scattering radius."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:310
msgid "Radius input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:311
msgid ""
"Scattering radius for each RGB color channel, the maximum distance that "
"light can scatter."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:322
msgid "Texture Blur input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:315
msgid ""
"How much of the texture will be blurred along with the lighting, mixing the "
"texture at the incoming and outgoing points on the surface. Note that the "
"right choice depends on the texture. Consider for example a texture created "
"from a photograph of skin, in this cases the colors will already be pre-"
"blurred and texture blur could be set to 0. Even for hand painted textures "
"no or minimal blurring might be appropriate, as a texture artist would "
"likely paint in softening already, one would usually not even know what an "
"unblurred skin texture looks like, we always see it blurred. For a "
"procedural texture on the other hand this option would likely have a higher "
"value."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:326
msgid "BSSRDF output"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:325
msgid ""
":abbr:`BSSRDF (Bidirectional subsurface scattering distribution function)` "
"shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:330
msgid "A skin-toned SSS shader with color radius: 1.0, 0.8, 0.5."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:334
msgid "Emission"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:336
msgid "Lambertian emission, to be used for material and lamp surface outputs."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:339
#: ../../manual/render/cycles/nodes/shaders.rst:380
msgid "Color of the emitted light."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:342
#: ../../manual/render/cycles/nodes/shaders.rst:381
msgid "Strength input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:341
msgid ""
"Strength of the emitted light. For point and area lamps, the unit is Watts. "
"For materials, a value of 1.0 will ensure that the object in the image has "
"the exact same color as the Color input, i.e. make it 'shadeless'."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:346
msgid "Emission output"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:345
msgid "Emission shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:359
msgid ""
"Cycles uses a physically correct light falloff by default, whereas Blender "
"Internal uses a smoothed falloff with a Distance parameter. A similar effect"
" can be found by using the Light Falloff node with the Smooth parameter."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:363
msgid ""
"Lamp strength for point, spot and area lamps is specified in Watts. This "
"means you typically need higher values than Blender Internal, as you "
"couldn't use a 1W lamp to light a room; you need something stronger like a "
"100W lamp."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:367
msgid ""
"Sun lamps are specified in Watts/m^2, which require much smaller values like"
" 1 W/m^2. This can be confusing, but specifying strength in Watts wouldn't "
"have been convenient; the real sun for example has strength "
"384600000000000000000000000W. Emission shaders on meshes are also in "
"Watts/m^2."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:374
msgid "Background"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:376
msgid ""
"Background light emission. This node should only be used for the world "
"surface output; it is ignored in other cases."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:382
msgid "Strength of the emitted light."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:385
msgid "Background output"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:384
msgid "Background shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:388
msgid "Holdout"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:390
msgid ""
"A holdout shader is useful for compositing, to create a \"hole\" in the "
"image with zero alpha transparency where the object with this shader is "
"located."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:395
msgid "Holdout output"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:394
msgid "Holdout shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:399
msgid "The white area is a region with zero Alpha."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:403
msgid "Ambient Occlusion"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:405
msgid ""
"The ambient occlusion node gives per-material control for the amount of AO. "
"When AO is enabled in the world, it affects all diffuse BSDFs in the scene. "
"With this option it's possible to let only some materials be affected by AO,"
" or to let it influence some materials more or less than others."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:411
msgid "surface reflection color."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:414
msgid "AO output"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:413
msgid "Ambient Occlusion shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:418
msgid "White AO shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:422
msgid "Mix and Add"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:427
msgid "Shader inputs"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:430
msgid "Fac input"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:430
msgid ""
"Blend weight to use for mixing two shaders; at zero it uses the first shader"
" entirely and at one the second shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:434
msgid "Shader output"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:433
msgid "Mixed shader."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:438
msgid "A mix of a glossy and a diffuse shader makes a nice ceramic material."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:70
#: ../../manual/render/cycles/nodes/shaders.rst:101
msgid ""
"Microfacet distribution to use. *Sharp* results in perfectly sharp "
"reflections like a mirror, while *Beckmann*, *GGX* and *Ashikhmin-Shirley* "
"can use the *Roughness* input for blurry reflections."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:202
msgid ""
"Microfacet distribution to use. *Sharp* results in perfectly sharp "
"refractions like clear glass, while *Beckmann* and *GGX* can use the "
"*Roughness* input for rough glass."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:237
msgid ""
"Microfacet distribution to use. *Sharp* results in perfectly sharp "
"refractions, while *Beckmann* and *GGX* can use the *Roughness* input for "
"blurry refractions."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:424
msgid ""
"Mix or add shaders together. Mixing can be used for material layering, where"
" the *Fac* input may, for example, be connected to a Blend Weight node."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:428
msgid ""
"Shaders to mix, such that incoming rays hit either with the specified "
"probability in the *Fac* socket."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:44
msgid "Lambertian diffuse transmission."
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:85
msgid "Sharp Glossy"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:86
msgid "Rough Glossy"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:219
msgid "Sharp Glass"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:220
msgid "Rough Glass"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:352
msgid "Emission shader, with strength at ``1.0``"
msgstr ""

#: ../../manual/render/cycles/nodes/shaders.rst:356
msgid "Emission shader, with strength at ``3.0``"
msgstr ""

#~ msgid "Lambertian diffuse  transmission."
#~ msgstr ""

#~ msgid ""
#~ "FIXME(Tag Unsupported:div; <div "
#~ "class=\"center\">[[File:Manual_cycles_nodes_bsdf_translucent.png]]</div> )"
#~ msgstr ""

#~ msgid "Sharp Glossy behavior"
#~ msgstr ""

#~ msgid "Rough Glossy behavior"
#~ msgstr ""

#~ msgid "A Sharp Glossy Material"
#~ msgstr ""

#~ msgid "A Rough Glossy Material"
#~ msgstr ""

#~ msgid "Sharp Glass behaviour"
#~ msgstr ""

#~ msgid "Rough Glass behaviour"
#~ msgstr ""

#~ msgid "A Sharp Glass Material"
#~ msgstr ""

#~ msgid "A Rough Glass Material"
#~ msgstr ""

#~ msgid ""
#~ "FIXME(Tag Unsupported:div; <div "
#~ "class=\"center\">[[File:Manual_cycles_nodes_bsdf_velvet.png]]</div> )"
#~ msgstr ""

#~ msgid "A white Emissive material, with strength at 1.0."
#~ msgstr ""

#~ msgid "A white Emissive material, with strength at 3.0."
#~ msgstr ""

#~ msgid ""
#~ "Microfacet distribution to use. :guilabel:`Sharp` results in perfectly sharp"
#~ " reflections like a mirror, while :guilabel:`Beckmann`, :guilabel:`GGX` and "
#~ ":guilabel:`Ashikhmin-Shirley` can use the :guilabel:`Roughness` input for "
#~ "blurry reflections."
#~ msgstr ""

#~ msgid ""
#~ "Microfacet distribution to use. :guilabel:`Sharp` results in perfectly sharp"
#~ " refractions like clear glass, while :guilabel:`Beckmann` and "
#~ ":guilabel:`GGX` can use the :guilabel:`Roughness` input for rough glass."
#~ msgstr ""

#~ msgid ""
#~ "Microfacet distribution to use. :guilabel:`Sharp` results in perfectly sharp"
#~ " refractions, while :guilabel:`Beckmann` and :guilabel:`GGX` can use the "
#~ ":guilabel:`Roughness` input for blurry refractions."
#~ msgstr ""

#~ msgid ""
#~ "Mix or add shaders together. Mixing can be used for material layering, where"
#~ " the :guilabel:`Fac` input may, for example, be connected to a Blend Weight "
#~ "node."
#~ msgstr ""

#~ msgid ""
#~ "Shaders to mix, such that incoming rays hit either with the specified "
#~ "probability in the :guilabel:`Fac` socket."
#~ msgstr ""
