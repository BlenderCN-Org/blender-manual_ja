# 
msgid ""
msgstr ""
"Project-Id-Version: Blender Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-03 14:26+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../manual/composite_nodes/types/input.rst:8
msgid "Composite Input Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:10
msgid "Input nodes *produce* information from some source."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:12
msgid "For instance, an input could be:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:14
msgid "taken directly from the active camera in a selected scene,"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:15
msgid "from a JPG, PNG, etc. file as a static picture,"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:16
msgid "a movie clip (such as an animation sequence or home movie), or"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:17
msgid "just a color."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:19
msgid ""
"These nodes generate the information that feeds other nodes.  As such, they "
"have no input-connectors; only outputs."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:24
#: ../../manual/composite_nodes/types/input.rst:35
msgid "Render Layers Node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:26
#: ../../manual/composite_nodes/types/input.rst:195
#: ../../manual/composite_nodes/types/input.rst:531
#: ../../manual/composite_nodes/types/input.rst:585
#: ../../manual/composite_nodes/types/input.rst:602
#: ../../manual/composite_nodes/types/input.rst:632
msgid "Reference"
msgstr "リファレンス"

#: ../../manual/composite_nodes/types/input.rst:38
msgid ""
"This node is the starting place to getting a picture of your scene into the "
"compositing node map."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:41
msgid ""
"This node inputs an image from a scene within your blend file. Select the "
"scene and the active render layer from the yellow selection list at the "
"bottom of the node. Blender uses the active camera for that scene to create "
"an image of the objects specified in the :doc:`RenderLayer "
"</render/post_process/layers>`."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:50
msgid ""
"Depending on the Renderlayer passes that are enabled, other sockets are "
"available. By default the Z is enabled:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:55
msgid "The example shows that two other passes are enabled:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:60
msgid ""
"Use the re-render button (Small landscape icon - to the right of the "
"Renderlayer name) to re-render the scene and refresh the image and map."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:63
msgid ""
"You may recall that a .blend file may contain many scenes. The Renderlayer "
"node can pick up the scene info from any available scene by selecting the "
"scene from the left-hand selector. If that *other* scene also uses the "
"compositor and/or sequencer, you should note that the scene information "
"taken is the raw information (pre-compositing and pre-sequencing). If you "
"wish to use composited information from another scene, you will have to "
"render that scene to a multilayer OpenEXR frameset as an intermediate file "
"store, and then use the Image input node instead."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:74
msgid "Using the Alpha Socket"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:79
msgid ""
"In a Blender scene, your objects are floating out there in virtual space. "
"While some objects are in front of one another (Z depth), there is no "
"ultimate background. Your world settings can give you the illusion of a "
"horizon, but it's just that: an illusion. Further, some objects are semi-"
"transparent; this is called having an Alpha value. A semi-transparent object"
" allows light (and any background image) to pass through it to the camera. "
"When you render an image, Blender puts out, in addition to a pretty image, a"
" map of what solid objects actually are there, and where infinity is, and a "
"map of the alpha values for semi-transparent objects. You can see this map "
"by mapping it to a blue screen:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:92
msgid "Viewing the Alpha values"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:95
msgid ""
"In the little node map above, we have connected the Alpha output socket of "
"the RenderLayer node to a Map Value node (explained later, but basically "
"this node takes a set of values and maps them to something we can use). The "
"Color Ramp node (also explained later in detail) takes each value and maps "
"it to a color that we can see with our eyes. Finally, the output of the "
"Color Ramp is output to a Composite viewer to show you, our dear reader, a "
"picture of the Alpha  values. Notice that we have set up the map so that "
"things that are perfectly solid (opaque) are white, and things that are "
"perfectly transparent (or where there is nothing) are blue."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:108
msgid "Optional Sockets"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:110
msgid ""
"For any of the optional sockets to appear on the node, you MUST have the "
"corresponding pass enabled. In order for the output socket on the "
"RenderLayer node to show, that pass must be enabled in the RenderLayer panel"
" in the Buttons window. For example, in order to be able to have the Shadow "
"socket show up on the RenderLayer input node, you must have the \"Shad\" "
"button enabled in the Buttons window, Scene Render buttons, Renderlayer "
"panel. See the RenderLayer tab (Buttons window, Output frame, Render Layers "
"tab, Passes selector buttons) for Blender to put out the values "
"corresponding to the socket."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:119
msgid ""
"For a simple scene, a monkey and her bouncy ball, the following picture "
"expertly provides a great example of what each pass looks like:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:128
msgid "The available sockets are:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:130
msgid "Z: distance away from the camera, in Blender Units"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:131
msgid "Normal (Nor): How the color is affected by light coming from the side"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:132
msgid "UV: how the image is distorted by the UV mapping"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:133
msgid "Speed (Vec): How fast the object is moving, and in what direction"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:134
msgid "Color (Col): the RGB values that color the image that you see"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:135
msgid "Diffuse: the softening of colors as they diffuse through the materials"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:136
msgid ""
"Specular: the degree of shininess added to colors as they shine in the light"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:137
msgid "Shadow: shadows cast by objects onto other objects"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:138
msgid "AO: how the colors are affected by Ambient Occlusion in the world"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:139
msgid ""
"Reflect (Ref): for mirror type objects, the colors they reflect and are thus"
" not part of their basic material"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:140
msgid "Refract: how colors are bent by passing through transparent objects"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:141
msgid ""
"Radio (Radiosity): colors that are emitted by other objects and cast onto "
"the scene"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:142
msgid ""
"IndexOB: a numeric ordinal (index) of each object in the scene, as seen by "
"the camera."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:146
msgid "Using the Z value Socket"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:151
msgid ""
"Imagine a camera hovering over an X-Y plane. When looking through the camera"
" at the plane, Y is up/down and X is left/right, just like when you are "
"looking at a graph. The camera is up in the air though, so it has a Z value "
"from the X-Y plane, and, from the perspective of the camera, the plane, in "
"fact all the objects that the camera can see, have a Z value as a distance "
"that they are away from it. In addition to the pretty colors of an image, a "
"RenderLayer input node also generates a Z value map. This map is a whole "
"bunch of numbers that specify how far away each pixel in the image is away "
"from the camera. You can see this map by translating it into colors, or "
"shades of gray:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:165
msgid "Viewing the Z values"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:168
msgid ""
"In the little node map above, we have connected the Z output socket of the "
"RenderLayer node to a Map Value node (explained later). This node takes a "
"set of values and maps them to something we can use. The Color Ramp node "
"(also explained later in detail) takes each value and maps it to a shade of "
"gray that we can see with our eyes. Finally, the output of the colorramp is "
"output to a Composite viewer to show you, our dear reader, a picture of the "
"Z values. Notice that we have set up the Map Value node so that things "
"closer to the camera appear blacker (think: black is 0, less Z means a "
"smaller number) and pixels/items farther away have an increasing Z distance "
"and therefore get whiter. We chose a Size value of 0.05 to see Z values "
"ranging from 0 to 20 (20 is 1/0.05)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:181
msgid "Using the Speed Socket"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:193
#: ../../manual/composite_nodes/types/input.rst:204
msgid "Image node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:211
msgid "A single image from a file (such as a JPG picture)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:212
msgid "Part or all of an animation sequence (such as the 30th to 60th frame)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:213
msgid "Part or all of a movie clip (such as an AVI file)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:214
msgid ""
"the image that is currently in the UV/Image Editor (and possibly being "
"painted)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:215
msgid "an image that was loaded in the UV/Image Editor"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:217
msgid ""
"Animated image sequences or video files can also be used. See FIXME(TODO: "
"Internal Link; [[#Animations|Animations]] ) below."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:229
msgid ""
"If the image is part of a sequence, manually click the Image Type selector "
"to the right of the name, and select *Sequence*. Additional controls will "
"allow you to define how much of the sequence to pull in (see Animations "
"below). If the file is a video file, these controls will automatically "
"appear."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:236
msgid "Image Channels"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:238
msgid ""
"When the image is loaded, the available channels will be shown as sockets on"
" the node. As a minimum, the Image, Alpha, and Z channels are made "
"available. The picture may or may not have an alpha (transparency) and/or Z "
"(depth) channel, depending on the format. If the image format does not "
"support A and/or Z, default values are supplied (1.0 for A, 0.0 for Z)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:257
msgid "Formats"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:259
msgid ""
"Blender supports many image formats. Currently only the OpenEXR image format"
" stores RGB (color), A (alpha), and Z (depth) buffer information in a single"
" file, if enabled."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:265
msgid "Saving/Retrieving Render Passes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:269
msgid ""
"Blender can save the individual Render Layers and specific passes in a "
"MultiLayer file format, which is an extension of the OpenEXR format. In this"
" example, we are reading in frames 50 to 100 of a RenderLayer that were "
"generated some time ago. The passes that were saved were the Image, Alpha, "
"Z, Specular and AO passes."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:274
msgid ""
"To create a MultiLayer image set when initially rendering, simply disable Do"
" Composite, set your Format to MultiLayer, enable the Render Layer passes "
"you wish to save over the desired frame range, and Animate. Then, in "
"Blender, enable Compositing Nodes and Do Composite, and use the Image input "
"node to read in the EXR file. When you do, you will see each of the saved "
"passes available as sockets for you to use in your compositing noodle."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:283
msgid "Image Size"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:285
msgid ""
"Size matters - Pay attention to image resolution and color depth when mixing"
" and matching images. Aliasing (rough edges), color *flatness*, or distorted"
" images can all be traced to mixing inappropriate resolutions and color "
"depths."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:289
msgid ""
"The compositor can mix images with any size, and will only perform "
"operations on pixels where images have an overlap. When nodes receive inputs"
" with differently sized Images, these rules apply:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:293
msgid "The first/top Image input socket defines the output size."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:305
msgid "Animations"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:309
msgid ""
"To use image sequences or movies within your composition, press the face or "
"little film strip button located to the right of the selector. As you click,"
" a pop-up will offer you four choices:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:313
msgid "Generated -"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:314
msgid "Sequence - a sequence of frames, each frame in a separate file."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:315
msgid "Movie - a sequence of frames packed into a single .avi or .mov file"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:316
msgid "Image - a single frame or still image in a file"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:318
msgid ""
"A Movie or Image can be named anything, but a Sequence must have a digit "
"sequence somewhere in its filename, for example fire0001set.jpg, "
"fire0002set.jpg, fire0003set.jpg and so on. The number indicates the frame."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:323
msgid ""
"If a Sequence or Movie is selected, an additional set of controls will "
"appear that allows you to select part or all of the sequence. Use these "
"controls to specify which frames, out of the original sequence, that you "
"want to introduce into the animation you are about to render. You can start "
"at the beginning and only use the beginning, or even pick out a set of "
"frames from the middle of an existing animation."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:353
msgid "Generated Images"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:355
msgid ""
"`Using the Nodes to modify a painting in progress in the UV/Image window "
"<http://wiki.blender.org/index.php/File:Manual-Compositing-Node-Image-"
"Generagedjpg>`__ Blender features :doc:`Texture Paint "
"</textures/paint/painting_the_texture>` which works in the UV/Image Editor, "
"that allows you to paint on the fly, and the image is kept in memory or "
"saved. If sync lock is enabled (the lock icon in the header), changes are "
"broadcast throughout Blender as soon as you lift the mouse button. One of "
"the places that the image can go is to the Image Input node. The example "
"shows a painting session going on in the right-hand UV/Image Editor window "
"for the painting \"Untitled\". Create this image via Image?New in the "
"UV/Image Editor. Refer to the texture paint section of the user maual for "
"more info on using Texture Paint."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:367
msgid ""
"In the left-hand window, the Image input node was used to select that "
"\"Untitled\" image. Notice that the Image type icon is blank, indicating "
"that it is pulling in a Generated image. That image is colorized by the "
"noodle, with the result used as a backdrop in the Node Editor Window."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:372
msgid ""
"Using this setup and the Generated Image type is like painting and post-"
"processing as you continue painting. Changes to either the painting or the "
"post-pro noodle are dynamic and real-time."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:378
msgid "Notes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:390
msgid ""
"AVI (Audio Video Interlaced) files are encoded and often compressed using a "
"routine called a *Codec*. You must have a codec installed on your machine "
"and available to Blender that understands and is able to read the file, in "
"order for Blender to be able to de-code and extract frames from the file. If"
" you get the error message **FFMPEG or unsupported video format** when "
"trying to load the file, you need to get a Codec that understands the video "
"file. Contact the author of the file and find out how it was encoded. An "
"outside package, such as VirtualDub, might help you track this information "
"down. Codecs are supplied by video device manufacturers, Microsoft, DivX, "
"and Xvid, among others, and can often be downloaded from their web sites for"
" free."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:403
msgid "Splicing Video Sequences using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:405
msgid ""
"The above animation controls, coupled with a little mixing, is all you need "
"to splice video sequences together. There are many kinds of splices:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:408
msgid "Cut Splice - literally the ends of the footage are just stuck together"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:409
msgid "Fade In - The scene fades in, usually from black"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:410
msgid "Fade Out - The scene fades out, usually to black"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:411
msgid ""
"Mix - Toward the end of one scene, the images from the next scene meld in as"
" the first scene fades"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:412
msgid ""
"Winking and Blinking - fading one cut out while the other fades in, "
"partially or totally through black"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:413
msgid ""
"Bumps and Wipes - one cut bumps the other one out of frame, or wipes over it"
" (like from the top left corner down)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:417
msgid "Cut Splicing using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:419
msgid ""
"In the example noodle below, we have two pieces of footage that we want to "
"cut splice together."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:421
msgid "Magic Monkey - named 0001.png through 0030.png"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:422
msgid "Credits - named credits0001.png through credits0030.png"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:424
msgid ""
"The editor has reviewed the Credits and thought the first two frames could "
"be thrown away (onto the cutting room floor, as they say) along with the "
"last 8, leaving 20 frames from the total shot. Not shown in this image, but "
"crucial, is that in the Output panel, we set our render output filename to "
"\"Monkey-Credits-\", and our Animation start and end frames to 1 and 50 (30 "
"from the Monkey, 20 from the credits). Notice the Time node; it tells the "
"Mix node to use the top image until frame 30, and then, at frame 31, changes"
" the Mix factor to 1, which means to use the bottom set of images."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:435
msgid "Cut Splice using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:438
msgid ""
"Upon pressing the ANIM button, Blender will composite the animation. If you "
"specified an image format for output, for example, PNG, Blender will create "
"50 files, named \"Monkey-Credits-0001.png\" through \"Monkey-"
"Credits-0050.png\". If you specified a movie format as output, such as AVI-"
"JPEG, then Blender will create only one file, \"Monkey-Credits-.avi\", "
"containing all 50 frames."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:444
msgid ""
"Use cut scenes for rapid-fire transition, conveying a sense of energy and "
"excitement, and to pack in a lot of action in a short time. Try to avoid "
"cutting from a dark scene to a light one, because it's hard on the eyes. It "
"is very emotionally contrasting, and sometimes humorous and ironic, to cut "
"from a very active actor in one scene to a very still actor in another "
"scene, a la old Road Runner and Coyote scenes."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:453
msgid "Fade Splicing using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:455
msgid ""
"In the previous topic, we saw how to cut from one sequence to another. To "
"fade in or out, we simply replace one set of images with a flat color, and "
"expand  the Time frame for the splice. In the image below, beginning at "
"frame 20, we start fading **out** to cyan:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:463
msgid "Fading Out using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:466
msgid ""
"Cyan was chosen because that is the color of the Monkey at that time, but "
"you can just as easily choose any color. The image below shows frame 30, "
"when we have almost faded completely."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:470
msgid ""
"To fade **in**, change the Mix node and plug the image sequence into the "
"bottom socket, and specify a flat color for the top socket."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:475
#: ../../manual/composite_nodes/types/input.rst:486
msgid "Mix Splice using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:477
msgid ""
"To mix, or crossover, from one scene to the next, start feeding the second "
"scene in while the first is mixing out. The noodle below shows frame 25 of a"
" mix crossover special effect to transition from one scene to the next, "
"beginning at frame 20 with the transition completed by frame 30. Action "
"continues in the first scene as it fades out and is mixed with action that "
"starts in the second scene."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:489
msgid ""
"Use this effect to convey similarities between the two scenes. For example, "
"Scene 1 is the robber walking down the street, ending with the camera "
"focusing in on his feet. Scene 2 is a cop walking down the street after him,"
" starting with his feet and working its way up to reveal that the cop is "
"following the robber."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:496
msgid "Wink Splice using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:498
msgid ""
"A Wink is just like blinking your eyes; one scene fades to black and the "
"other fades in. To use Blender to get this effect, build on the Cut and Fade"
" splices discussed above to yield:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:504
msgid "A Wink using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:507
msgid ""
"In the above example, showing frame 27, we have adjusted some parameters to "
"show you the power of Blender and how to use its Nodes to achieve just the "
"blended crossover effect you desire:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:510
msgid ""
"Postfeed: Even though there were only 15 frames of animation in the Toucan "
"strip, the cutover (top Time node) does not occur until frame 30. Blender "
"continues to put out the last frame of an animation, *automatically "
"extending it for you*, for frames out of the strip's range."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:514
msgid ""
"Prefeed: Even though the swirl does not start playing until frame 34, "
"Blender supplies the first frame of it for Frames 31 through 33. In fact, it"
" supplies this image all the way back to frame 1."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:517
msgid ""
"Partial Fade: Notice the second 'wink' Time node. Like a real wink, it does "
"not totally fade to black; only about 75%. When transitioning between scenes"
" where you want some visual carryover, use this effect because there is not "
"a break in perceptual sequence."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:522
msgid "Multiple Feeds"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:524
msgid ""
"The above examples call out two feeds, but by replicating the Input, Time "
"and Mix nodes, you can have multiple feeds at any one time; just set the "
"Time node to tell the Mixer when to cut over to using it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:529
msgid "Texture Node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:540
msgid "Texture node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:545
msgid ""
"The Texture node makes 3D textures available to the compositor. A texture, "
"from the list of textures available in the current blend file, is selected "
"and introduced through the value and/or color socket."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:552
msgid ""
"Please read up on the Blender Library system for help on importing and "
"linking to textures in other blender files."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:557
msgid ""
"**You cannot edit the textures themselves in the node window**. To use this "
"node, create and edit the texture in the normal texture buttons, then select"
" the texture from the menu button on the node."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:573
#: ../../manual/composite_nodes/types/input.rst:620
msgid "Example"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:577
msgid ""
"In the example above, we want to simulate some red plasma gas out there in "
"space. So, we fog up an image taken from the Hubble telecscope of Orion and "
"take the ever-so-useful Cloud texture and use it to mix in red with the "
"image."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:583
msgid "Value node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:592
msgid ""
"The Value node has no inputs; it just outputs a numerical value (floating "
"point spanning 0.00 to 1.00) currently entered in the NumButton displayed in"
" its controls selection."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:596
msgid ""
"Use this node to supply a constant, fixed value to other nodes' value or "
"factor input sockets."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:600
msgid "RGB node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:609
msgid ""
"The RGB node has no inputs. It just outputs the Color currently selected in "
"its controls section; a sample of it is shown in the top box. In the example"
" to the right, a gray color with a tinge of red is slected."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:614
msgid ""
"To change the brightness and saturation of the color, :kbd:`LMB` click "
"anywhere within the square gradient. The current saturation is shown as a "
"little circle within the gradient. To change the color itself, click anwhere"
" along the rainbow Color Ramp."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:624
msgid ""
"In this example, our corporate color is teal, but the bozo who made the "
"presentation forgot. So, we multiply his lame black and white image with our"
" corporate color to save him from embarassment in front of the boss when he "
"gives his boring presentation."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:630
#: ../../manual/composite_nodes/types/input.rst:641
msgid "Time node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:654
msgid "Note on output values"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:656
msgid ""
"The :doc:`Map Value </osite_nodes/types/vector#map_value_node>` node can be "
"used to map the output to a more appropriate value. With some time curves, "
"it is possible that the Time node may output a number larger than one or "
"less than zero. To be safe, use the Min/Max clamping function of the Map "
"Value node to limit output."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:662
msgid ""
"You can reverse time (unfortunately, only in Blender and not in the real "
"world) by specifying a Start frame greater than the End frame. The net "
"effect of doing so is to flip the curve around. Warning: doing so is easily "
"overlooked in your node map and can be very confusing (like meeting your "
"mother when she was/is your age in \"Back to the Future\")."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:669
msgid "Time is Relative"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:671
msgid ""
"In Blender, time is measured in frames. The actual duration of a time span "
"depends on how fast those frames whiz by (frame rate). You set the frame "
"rate in your animation settings (:doc:`Scene Context "
"</ce/buttons/scene_context>` F10 ). Common settings range from 5 seconds per"
" frame for slideshows (0.2 fps), to 30 fps for US movies."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:678
msgid "Time Node Examples"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:680
msgid ""
"In the picture below, over the course of a second of time (30 frames), the "
"following time controls are made:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:689
msgid ""
"Common uses for this include a :doc:`\"fade to black\" "
"</composite_nodes/types/convertor#using_setalpha_to_fade_to_black>`, wherein"
" the accelerate time curve (typically exponentially-shaped) feeds a mix "
"value that mixes a constant black color in, so that the blackness "
"accelerates and eventually darkens the image to total black. Other good uses"
" include an increasing soften (blur-out or -in) effect, or :doc:`fade-in "
"</composite_nodes/types/convertor#using_setalpha_to_fade_in_a_title>` a "
"background or foreground, instead of just jumping things into or out of the "
"scene."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:699
msgid ""
"You can even imagine hooking up one blur to a background renderlayer, "
"another inverted blur to a foreground renderlayer, and time-feeding both. "
"This node group would simulate someone focusing the camera lens."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:705
msgid "Examples and suggestions"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:707
msgid ""
"As your imagination runs wild, consider a few ideas that came to me just now"
" on my couch: mixing a clouds texture with a time input to fog up a piece of"
" glass or show spray paint building up on a wall. Consider mixing red and "
"the soften with time (decreasing output) to show what someone sees when "
"waking up from a hard hit on the head. Mix HSV input with a starfield image "
"with time (decreasing output) to show what we might see someday as we "
"accelerate our starship and experience red-shift."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:714
msgid ""
"As a user, you should know that we have arrived at the point where there are"
" many ways to do the same thing in Blender. For example, an old way to make "
"a slide show using Blender, you created multiple image textures, one image "
"for each slide, and assigned them as texture channels to the material for "
"the screen, then created a screen (plane) that filled the cameral view. "
"Using a material ipo, you would adjust the Color influence of each channel "
"at different frames, fading one in as the previous slide faded out. Whew! "
"Rearranging slide and changing the timing was clunky but doable by moving "
"the IPO keys. The *Node* way is to create an image input, one for each slide"
" image. Using the Image input and Time nodes connected to an AlphaOver mixer"
" is much simpler, clearer, and easier to maintain."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:46
msgid "The *Image* is input into the map, along with the following data:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:48
msgid "*Alpha* (transparency) mask"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:53
msgid "*Z* depth map (how far away each pixel is from the camera)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:57
msgid "*Normal* vector set (how light bounces off the surface)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:58
msgid ""
"*Speed* vector set (how fast an object is moving from one frame to the next)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:76
msgid ""
"Using the *Alpha* output socket is crucial in overlaying images on top of "
"one another and letting a background image \"show through\" the image in "
"front of it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:148
msgid ""
"Using the *Z* output socket is crucial in producing realistic images, since "
"items farther away are blurrier (but more on that later)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:183
msgid ""
"Even though things may be animated in our scene, a single image or frame "
"from the animation does not portray any motion; the image from the frame is "
"simply where things are at that particular time. However, from the *Render "
"Layers* node, Blender puts out a vector set that says how particular pixels "
"are moving, or will move, to the next frame. You use this socket to create a"
" :doc:`blurring effect. </ls/composite_nodes/types/filter/vector_blur>`."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:207
msgid ""
"The *Image* node injects any image :doc:`format that is supported by Blender"
" </render/output>`. Besides inputting the actual image, this node can also "
"input *Alpha* and depth (*Z*) values if the image has them. If the image is "
"a MultiLayer format, all saved render passes are input. Use this node to "
"input:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:222
msgid ""
"To select an image file or generated image from the UV/Image Editor, click "
"on the small arrow selector button to the left of the name and pick an "
"existing image (e.g. loaded in the UV editor or elsewhere) or click on *LOAD"
" NEW* to select a file from your hard disk via a file-browser. These images "
"can be e.g. previously rendered images, matte paintings, a picture of your "
"cat, whatever. Blender really doesn't care."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:248
msgid "Alpha/Transparency Channel"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:245
msgid ""
"If a transparency channel is detected, the *Alpha* output socket will supply"
" it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:246
msgid ""
"If it does not have an Alpha channel (e.g. JPG images), Blender will supply "
"one, setting the whole image to completely opaque (an Alpha of 1.00, which "
"will show in a *Viewer* node as white - if connected to the *Image* input "
"socket)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:255
msgid "Z/depth Channel"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:251
msgid ""
"If a Z (depth) channel is detected, the *Z* output socket will supply it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:252
msgid ""
"If it does not have a Z channel (e.g. JPG or PNG images), Blender will "
"supply one, setting the whole image to be at the camera (a depth of 0.00). "
"To view the Z-depth channel, use the Map Value to ColorRamp noodle given "
"above in the Render Layer input node, in the FIXME(TODO: Internal Link; "
"[[#Using the Z value Socket|{{Literal|Render Layer}} input node]])."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:294
msgid ""
"The composite is centered by default, unless a translation has been assigned"
" to a buffer using a *Translate* node."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:297
msgid ""
"So each node in a composite can operate on different sized images, as "
"defined by its inputs. Only the *Composite* output node has a fixed size, as"
" defined by the *Scene buttons* (Format Panel - :kbd:`F10`). The *Viewer* "
"node always shows the size from its input, but when not linked (or linked to"
" a value) it shows a small 320x256 pixel image."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:330
msgid ""
"The *Frs* number button is the number of frames in the sequence that you "
"want to show.  For example, if you want to show 2 seconds of the animation, "
"and are running 30 fps, you would put 60 here."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:334
msgid ""
"The *SFra* number button sets the start frame of the animation; namely, at "
"what point in the animation that you *are going to render* do you want this "
"sequence to start playing.  For example, if you want to introduce this clip "
"ten seconds into the composite output, you would put 300 here (at 30 fps)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:340
msgid ""
"The *First* number button sets the first number in the animated sequence "
"name. For example, if your images were called \"credits-0001.png\", "
"\"credits-0002.png\" through \"credits-0300.png\" and you wanted to start "
"picking up with frame 20, you'd put 20 here."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:344
msgid ""
"To have the movie/sequence start over and repeat when it is done, press the "
"*Cycl* ic button. For example, if you were compositing a fan into a room, "
"and the fan animation lasted 30 frames, the animation would start over at "
"frame 31, 61, 91, and so on, continuously looping. As you scrub from frame "
"to frame, to see the actual video frame used for the current frame of "
"animation, press the auto button to the right of the *Cycl* ic button."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:380
msgid ""
"**No Frame Stretching or Compression:** If the input animation (avi or frame"
" set) was encoded at a frame rate that is *different* from your current "
"settings, the resultant animation will appear to run faster or slower. "
"Blender Nodes do not adjust input video frame rates. Use the scale control "
"inside the :doc:`Video Sequence Editor </sequencer>` to stretch or compress "
"video to the desired speed, and input it here. You can incorporate \"Slow-"
"Mo\" into your video. To do so, *ANIM* ate a video segment at 60 frames per "
"second, and input it via this node, using Render settings that have an "
"animation frame rate of the normal 30 fps; the resulting video will be "
"played at half speed. Do the opposite to mimic Flash running around at "
"hyperspeed."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:543
msgid "The *Texture* node makes 3D textures available to the compositor."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:562
msgid ""
"You can change the *Offset* and a *Scale* (which is called Offs XYZ and Size"
" XYZ in the Materials Texture Map Input panel) for the texture by clicking "
"on the label and setting the sliders, thus affecting how the texture is "
"applied to the image. For animation, note that this is a vector input "
"socket, because the XYZ values are needed."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:568
msgid ""
"Texture nodes can output a straight black-and-white *Value* image (don't "
"mistake this for alpha) and an image (*Color*)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:644
msgid ""
"The Time node generates a *fac* tor value (from 0.00 to 1.00) (that changes "
"according to the curve drawn) as time progresses through your movie "
"(frames)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:647
msgid ""
"The *Start* and *End* NumButtons specify the range of time the values should"
" be output along, and this range becomes the X-axis of the graph. The curve "
"defines the Y-value and hence the factor that is output. In the example to "
"the right, since the timespan is 250 frames and the line is straight from "
"corner to corner, 0.50 would be output at frame 125, and 0.75 will be output"
" at frame 187."
msgstr ""

#~ msgid ""
#~ "The :guilabel:`Image` is input into the map, along with the following data:"
#~ msgstr ""

#~ msgid ":guilabel:`Alpha` (transparency) mask"
#~ msgstr ""

#~ msgid ":guilabel:`Z` depth map (how far away each pixel is from the camera)"
#~ msgstr ""

#~ msgid ":guilabel:`Normal` vector set (how light bounces off the surface)"
#~ msgstr ""

#~ msgid ""
#~ ":guilabel:`Speed` vector set (how fast an object is moving from one frame to"
#~ " the next)"
#~ msgstr ""

#~ msgid ""
#~ "Using the :guilabel:`Alpha` output socket is crucial in overlaying images on"
#~ " top of one another and letting a background image \"show through\" the "
#~ "image in front of it."
#~ msgstr ""

#~ msgid ""
#~ "Using the :guilabel:`Z` output socket is crucial in producing realistic "
#~ "images, since items farther away are blurrier (but more on that later)."
#~ msgstr ""

#~ msgid ""
#~ "Even though things may be animated in our scene, a single image or frame "
#~ "from the animation does not portray any motion; the image from the frame is "
#~ "simply where things are at that particular time. However, from the "
#~ ":guilabel:`Render Layers` node, Blender puts out a vector set that says how "
#~ "particular pixels are moving, or will move, to the next frame. You use this "
#~ "socket to create a :doc:`blurring effect. "
#~ "</ls/composite_nodes/types/filter/vector_blur>`."
#~ msgstr ""

#~ msgid ""
#~ "The :guilabel:`Image` node injects any image :doc:`format that is supported "
#~ "by Blender </render/output>`. Besides inputting the actual image, this node "
#~ "can also input :guilabel:`Alpha` and depth (:guilabel:`Z`) values if the "
#~ "image has them. If the image is a MultiLayer format, all saved render passes"
#~ " are input. Use this node to input:"
#~ msgstr ""

#~ msgid ""
#~ "To select an image file or generated image from the UV/Image Editor, click "
#~ "on the small arrow selector button to the left of the name and pick an "
#~ "existing image (e.g. loaded in the UV editor or elsewhere) or click on "
#~ ":guilabel:`LOAD NEW` to select a file from your hard disk via a file-"
#~ "browser. These images can be e.g. previously rendered images, matte "
#~ "paintings, a picture of your cat, whatever. Blender really doesn't care."
#~ msgstr ""

#~ msgid ""
#~ "Alpha/Transparency Channel - If a transparency channel is detected, the "
#~ ":guilabel:`Alpha` output socket will supply it. - If it does not have an "
#~ "Alpha channel (e.g. JPG images),"
#~ msgstr ""

#~ msgid ""
#~ "Blender will supply one, setting the whole image to completely opaque (an "
#~ "Alpha of 1.00, which will show in a :guilabel:`Viewer` node as white - if "
#~ "connected to the :guilabel:`Image` input socket)."
#~ msgstr ""

#~ msgid ""
#~ "Z/depth Channel - If a Z (depth) channel is detected, the :guilabel:`Z` "
#~ "output socket will supply it. - If it does not have a Z channel (e.g. JPG or"
#~ " PNG images),"
#~ msgstr ""

#~ msgid ""
#~ "Blender will supply one, setting the whole image to be at the camera (a "
#~ "depth of 0.00). To view the Z-depth channel, use the Map Value to ColorRamp "
#~ "noodle given above in the Render Layer input node, in the FIXME(TODO: "
#~ "Internal Link; [[#Using the Z value Socket|{{Literal|Render Layer}} input "
#~ "node]])."
#~ msgstr ""

#~ msgid ""
#~ "The composite is centered by default, unless a translation has been assigned"
#~ " to a buffer using a :guilabel:`Translate` node."
#~ msgstr ""

#~ msgid ""
#~ "So each node in a composite can operate on different sized images, as "
#~ "defined by its inputs. Only the :guilabel:`Composite` output node has a "
#~ "fixed size, as defined by the :guilabel:`Scene buttons` (Format Panel - "
#~ ":kbd:`f10`). The :guilabel:`Viewer` node always shows the size from its "
#~ "input, but when not linked (or linked to a value) it shows a small 320x256 "
#~ "pixel image."
#~ msgstr ""

#~ msgid ""
#~ "The :guilabel:`Frs` number button is the number of frames in the sequence "
#~ "that you want to show.  For example, if you want to show 2 seconds of the "
#~ "animation, and are running 30 fps, you would put 60 here."
#~ msgstr ""

#~ msgid ""
#~ "The :guilabel:`SFra` number button sets the start frame of the animation; "
#~ "namely, at what point in the animation that you *are going to render* do you"
#~ " want this sequence to start playing.  For example, if you want to introduce"
#~ " this clip ten seconds into the composite output, you would put 300 here (at"
#~ " 30 fps)."
#~ msgstr ""

#~ msgid ""
#~ "The :guilabel:`First` number button sets the first number in the animated "
#~ "sequence name. For example, if your images were called \"credits-0001.png\","
#~ " \"credits-0002.png\" through \"credits-0300.png\" and you wanted to start "
#~ "picking up with frame 20, you'd put 20 here."
#~ msgstr ""

#~ msgid ""
#~ "To have the movie/sequence start over and repeat when it is done, press the "
#~ ":guilabel:`Cycl` ic button. For example, if you were compositing a fan into "
#~ "a room, and the fan animation lasted 30 frames, the animation would start "
#~ "over at frame 31, 61, 91, and so on, continuously looping. As you scrub from"
#~ " frame to frame, to see the actual video frame used for the current frame of"
#~ " animation, press the auto button to the right of the :guilabel:`Cycl` ic "
#~ "button."
#~ msgstr ""

#~ msgid ""
#~ "**No Frame Stretching or Compression:** If the input animation (avi or frame"
#~ " set) was encoded at a frame rate that is *different* from your current "
#~ "settings, the resultant animation will appear to run faster or slower. "
#~ "Blender Nodes do not adjust input video frame rates. Use the scale control "
#~ "inside the :doc:`Video Sequence Editor </sequencer>` to stretch or compress "
#~ "video to the desired speed, and input it here. You can incorporate \"Slow-"
#~ "Mo\" into your video. To do so, :guilabel:`ANIM` ate a video segment at 60 "
#~ "frames per second, and input it via this node, using Render settings that "
#~ "have an animation frame rate of the normal 30 fps; the resulting video will "
#~ "be played at half speed. Do the opposite to mimic Flash running around at "
#~ "hyperspeed."
#~ msgstr ""

#~ msgid ""
#~ "The :guilabel:`Texture` node makes 3D textures available to the compositor."
#~ msgstr ""

#~ msgid ""
#~ "You can change the :guilabel:`Offset` and a :guilabel:`Scale` (which is "
#~ "called Offs XYZ and Size XYZ in the Materials Texture Map Input panel) for "
#~ "the texture by clicking on the label and setting the sliders, thus affecting"
#~ " how the texture is applied to the image. For animation, note that this is a"
#~ " vector input socket, because the XYZ values are needed."
#~ msgstr ""

#~ msgid ""
#~ "Texture nodes can output a straight black-and-white :guilabel:`Value` image "
#~ "(don't mistake this for alpha) and an image (:guilabel:`Color`)."
#~ msgstr ""

#~ msgid ""
#~ "The Time node generates a :guilabel:`fac` tor value (from 0.00 to 1.00) "
#~ "(that changes according to the curve drawn) as time progresses through your "
#~ "movie (frames)."
#~ msgstr ""

#~ msgid ""
#~ "The :guilabel:`Start` and :guilabel:`End` NumButtons specify the range of "
#~ "time the values should be output along, and this range becomes the X-axis of"
#~ " the graph. The curve defines the Y-value and hence the factor that is "
#~ "output. In the example to the right, since the timespan is 250 frames and "
#~ "the line is straight from corner to corner, 0.50 would be output at frame "
#~ "125, and 0.75 will be output at frame 187."
#~ msgstr ""
