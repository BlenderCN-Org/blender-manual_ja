# 
msgid ""
msgstr ""
"Project-Id-Version: Blender Manual 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-23 09:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../manual/composite_nodes/editor.rst:5
msgid "Editor"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:7
msgid ""
"FIXME(Template Unsupported: Doc:2.6/Reference/Nodes/Node Editor; "
"{{Doc:2.6/Reference/Nodes/Node Editor}} )"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:12
#: ../../manual/composite_nodes/editor.rst:16
msgid "Buttons for work with Compositing nodes"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:20
msgid "Free Unused Button"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:22
msgid ""
"This button frees up memory space when you have a very complex node map. "
"Recommended."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:26
msgid "Backdrop"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:28
msgid ""
"Use the active viewer node output as a backdrop. When enabled, additional "
"settings appear in the Header and the Properties Panel:"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:34
msgid "Backdrop Channels."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:39
msgid "Backdrop Channels"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:38
msgid ""
"Set the image to be displayed with *Color*, *Color and Alpha*, or just "
"*Alpha*."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:43
msgid "Options of Zoom and Offset of Backdrop."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:46
#: ../../manual/composite_nodes/types/filter.rst:129
msgid "Zoom"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:47
msgid "Sets how big the backdrop image is."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:50
#: ../../manual/composite_nodes/types/color.rst:719
msgid "Offset"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:49
msgid ""
"Change the screen space position of the backdrop, or click the *Move* "
"button, or shortcut :kbd:`Alt-MMB` to manually move it."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:53
msgid "Auto Render"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:55
msgid ""
"Re-render and composite changed layer when edits to the 3d scene are made."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:59
#: ../../manual/composite_nodes/editor.rst:63
msgid "Perfomance for Compositing Nodes in Node Editor"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:66
msgid "Render"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:67
msgid "Set quality when rendering in Node Editor."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:68
msgid "Edit"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:69
msgid "Set quality when editing in Node Editor"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:70
msgid "Chunksi"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:71
msgid ""
"Max size of a title (smaller values give better distribution of multiple "
"threads, but more overhead)."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:72
msgid "OpenCL"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:73
msgid "Enable GPU calculations when working in Node Editor."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:74
msgid "Buffer Groups"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:75
msgid "Enable buffering of group nodes."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:76
msgid "Two Pass"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:77
msgid ""
"Use two pass execution during editing: first calculate fast nodes, second "
"pass calculate all nodes."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:78
msgid "Viewer Border"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:79
msgid "Use boundaries for viewer nodes and composite backdrop."
msgstr ""

#: ../../manual/composite_nodes/editor.rst:82
msgid "Highlight"
msgstr ""

#: ../../manual/composite_nodes/editor.rst:81
msgid "Highlight nodes that are being calculated."
msgstr ""

#: ../../manual/composite_nodes/index.rst:5
msgid "Composite Nodes"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:5
msgid "Introduction"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:7
msgid ""
"Compositing Nodes allow you to assemble and enhance an image (or movie). "
"Using composition nodes, you can glue two pieces of footage together and "
"colorize the whole sequence all at once. You can enhance the colors of a "
"single image or an entire movie clip in a static manner or in a dynamic way "
"that changes over time (as the clip progresses). In this way, you use "
"composition nodes to both assemble video clips together, and enhance them."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:15
msgid "Term: Image"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:17
msgid ""
"We use the term *Image* to refer to a single picture, a picture in a "
"numbered sequence of images, or a frame of a movie clip. A node layout "
"processes one image at a time, no matter what kind of input you provide."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:25
msgid "Default Composition Noodle"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:28
msgid ""
"To process your image, you use nodes to import the image into Blender, "
"change it, optionally merge it with other images, and finally save it."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:31
msgid ""
"The example to the right shows the simplest noodle; an input node threads "
"the camera view to an output node so it can be saved."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:35
msgid ""
"FIXME(Template Unsupported: Doc:2.6/Reference/Nodes/Concepts; "
"{{Doc:2.6/Reference/Nodes/Concepts}} )"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:41
msgid "Accessing and Activating Nodes"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:43
msgid ""
"Access the :doc:`Node Editor </materials/nodes/editor>` and enable "
"*Composite Nodes* by clicking on the *Image* icon."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:49
msgid "Node Editor Header with Composite Nodes enabled"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:54
msgid "Select the Node Editor window"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:57
msgid ""
"To activate nodes for compositing, click the *Use Nodes* checkbox. Blender "
"creates a default starting noodle, consisting of two nodes threaded "
"together."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:63
msgid "Use Composition Nodes"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:66
msgid ""
"To use this mini-map, you must now tell Blender to use the Compositing Node "
"map that has been created, and to composite the image using composition "
"nodes. To do so, switch to the *Render* button area and activate the "
"*Compositing* button located below the *Post Processing* tab. This tells "
"Blender to composite the final image by running it through the composition "
"node map."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:74
msgid ""
"You now have your first noodle, a RenderLayer input node threaded to a "
"Composite output node. From here, you can add and connect many :doc:`types "
"of compositing nodes </composite_nodes/types>`, in a sort of map layout, to "
"your heart's content (or physical memory constraints, whichever comes "
"first)."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:80
#: ../../manual/composite_nodes/types/color.rst:69
#: ../../manual/composite_nodes/types/color.rst:172
#: ../../manual/composite_nodes/types/color.rst:488
#: ../../manual/composite_nodes/types/color.rst:597
#: ../../manual/composite_nodes/types/convertor.rst:294
#: ../../manual/composite_nodes/types/convertor.rst:554
#: ../../manual/composite_nodes/types/distort.rst:321
#: ../../manual/composite_nodes/types/filter.rst:188
#: ../../manual/composite_nodes/types/filter.rst:257
#: ../../manual/composite_nodes/types/filter.rst:460
msgid "Examples"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:82
msgid "You can do just about anything with images using nodes."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:84
msgid ""
"Raw footage from a foreground actor in front of a blue screen, or a rendered"
" object doing something, can be layered on top of a background. Composite "
"both together, and you have composited footage."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:88
msgid "You can change the mood of an image:"
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:90
msgid "To make an image 'feel' colder, a blue tinge is added."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:91
msgid "To convey a flashback or memory, the image may be softened."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:92
msgid ""
"To convey hatred and frustration, add a red tinge or enhance the red. The "
"film 'Sin City' is the most extreme example of this I have ever seen."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:94
msgid "A startling event may be sharpened and contrast-enhanced."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:95
msgid ""
"A happy feeling - you guessed it - add yellow (equal parts red and green, no"
" blue) for bright and sunny."
msgstr ""

#: ../../manual/composite_nodes/introduction.rst:96
msgid ""
"Dust and airborne dirt is often added as a cloud texture over the image to "
"give a little more realism."
msgstr ""

#: ../../manual/composite_nodes/node_controls.rst:5
msgid "Node Controls"
msgstr ""

#: ../../manual/composite_nodes/node_controls.rst:7
msgid ""
"FIXME(Template Unsupported: Doc:2.5/Reference/Nodes/Node_Controls; "
"{{Doc:2.5/Reference/Nodes/Node_Controls}} )"
msgstr ""

#: ../../manual/composite_nodes/node_groups.rst:5
msgid "Node Groups"
msgstr ""

#: ../../manual/composite_nodes/node_groups.rst:7
msgid ""
"FIXME(Template Unsupported: Doc:2.6/Reference/Nodes/Node_Groups; "
"{{Doc:2.6/Reference/Nodes/Node_Groups}} )"
msgstr ""

#: ../../manual/composite_nodes/types.rst:7
msgid "Types of Composite Nodes"
msgstr ""

#: ../../manual/composite_nodes/types.rst:9
msgid ""
"This section is organized by type of nodes, which are grouped based on "
"similar functions:"
msgstr ""

#: ../../manual/composite_nodes/types.rst:12
msgid ""
":doc:`Input </composite_nodes/types/input>` - Adds something to the node "
"map, such as an image or a value."
msgstr ""

#: ../../manual/composite_nodes/types.rst:13
msgid ""
":doc:`Output </composite_nodes/types/output>` - Displays the result in "
"progress as a small image."
msgstr ""

#: ../../manual/composite_nodes/types.rst:14
msgid ""
":doc:`Color </composite_nodes/types/color>` - Manipulates the colors of an "
"image."
msgstr ""

#: ../../manual/composite_nodes/types.rst:15
msgid ""
":doc:`Vector </composite_nodes/types/vector>` - Manipulate the intensities "
"and reflections of an image"
msgstr ""

#: ../../manual/composite_nodes/types.rst:16
msgid ""
":doc:`Filters </composite_nodes/types/filter>` - Process the image to "
"enhance it, working on adjacent pixels."
msgstr ""

#: ../../manual/composite_nodes/types.rst:17
msgid ""
":doc:`Convertors </composite_nodes/types/convertor>` - Separate the image "
"into its component video, or convert formats."
msgstr ""

#: ../../manual/composite_nodes/types.rst:18
msgid ""
":doc:`Mattes </composite_nodes/types/matte>` - Generating mattes to mask off"
" areas of an image."
msgstr ""

#: ../../manual/composite_nodes/types.rst:19
msgid ""
":doc:`Distortion </composite_nodes/types/distort>` - Changing the shape of "
"the image."
msgstr ""

#: ../../manual/composite_nodes/types.rst:20
msgid ""
":doc:`Groups </composite_nodes/node_groups>` - User-defined groups of nodes."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:3
msgid "Composite Color Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:7
msgid ""
"These nodes play with the colors in the image. They adjust the image's color"
" intensity, adjust contrast and intensity, and, most importantly, mix two "
"images together by color, transparency, or distance."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:13
msgid "RGB Curves Node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:17
msgid "RGB Curves node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:20
msgid ""
"For each color component channel (RGB) or the composite (C), this node "
"allows you to define a bezier curve that varies the input (across the "
"bottom, or x-axis) to produce an output value (the y-axis). By default, it "
"is a straight line with a constant slope, so that ``0.5`` along the x-axis "
"results in a ``0.5`` y-axis output. Click and drag along the curve to create"
" a control point and to change the curve's shape. Use the *X* to delete the "
"selected (white) point."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:28
msgid ""
"Clicking on each *C R G B* component displays the curve for that channel. "
"For example, making the composite curve flatter (by clicking and dragging "
"the left-hand point of the curve up) means that a little amount of color "
"will result in a lot more color (a higher Y value). Effectively, this "
"bolsters the faint details while reducing overall contrast. You can also set"
" a curve just for the red, and for example, set the curve so that a little "
"red does not show at all, but a lot of red does."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:36
msgid "Here are some common curves you can use to achieve desired effects:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:41
msgid "Identifiers: A) Lighten B) Negative C) Decrease Contrast D) Posterize"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:45
#: ../../manual/composite_nodes/types/color.rst:456
#: ../../manual/composite_nodes/types/filter.rst:73
#: ../../manual/composite_nodes/types/filter.rst:111
#: ../../manual/composite_nodes/types/filter.rst:175
msgid "Options"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:47
#: ../../manual/composite_nodes/types/color.rst:169
msgid "Fac"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:48
msgid "How much the node should factor in its settings and affect the output."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:49
msgid "Black Level"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:50
msgid ""
"Defines the input color that is mapped to black. Default is black, which "
"does not change the image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:52
msgid "White Level"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:52
msgid ""
"Defines the input color that is mapped to white. Default is white, which "
"does not change the image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:54
msgid ""
"The levels work exactly like the ones in the image viewer. Input colors are "
"scaled linearly to match black/white levels."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:57
msgid ""
"To define the levels, either use LMB on the color patch to bring up the "
"color selection widget or connect some RGBA input to the sockets."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:60
msgid ""
"To only affect the value/contrast (not hue) of the output, set the levels to"
" shades of gray. This is equivalent to setting a linear curve for C."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:63
msgid ""
"If you set any level to a color with a saturation greater than 0, the output"
" colors will change accordingly, allowing for basic color correction or "
"effects. This is equivalent to setting linear curves for R, G and B."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:72
msgid "Color correction using Curves"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:78
msgid "Color correction with curves"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:81
msgid ""
"In this example, the image has way too much red in it, so we run it through "
"an RGB node and reduce the Red channel by about half."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:84
msgid ""
"We added a middle dot so we could make the line into a sideways exponential "
"curve. This kind of curve evens out the amount of a color in an image as it "
"reaches saturation. Also, read on for examples of the Darken and Contrast "
"Enhancement curves."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:90
msgid "Color correction using Black/White Levels"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:96
msgid "Color correction with Black/White Levels"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:99
msgid ""
"Manually adjusting the RGB curves for color correction can be difficult. "
"Another option for color correction is to use the Black and White Levels "
"instead, which really might be their main purpose."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:103
msgid ""
"In this example, the White Level is set to the color of a bright spot of the"
" sand in the background, and the Black Level to the color in the center of "
"the fish's eye. To do this efficiently it's best to bring up an image viewer"
" window showing the original input image. You can then use the levels' color"
" picker to easily choose the appropriate colors from the input image, "
"zooming in to pixel level if necessary. The result can be fine-tuned with "
"the R,G, and B curves like in the previous example."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:111
msgid ""
"The curve for C is used to compensate for the increased contrast that is a "
"side-effect of setting Black and White Levels."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:116
msgid "Effects"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:122
msgid "Changing colors"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:125
msgid ""
"Curves and Black/White Levels can also be used to completely change the "
"colors of an image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:127
msgid ""
"Note that e.g. setting Black Level to red and White Level to blue does not "
"simply substitute black with red and white with blue as the example image "
"might suggest. Levels do color scaling, not substitution, but depending on "
"the settings they can result in the described color substitution."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:132
msgid ""
"(What really happens when setting Black Level to pure red and White Level to"
" pure blue is that the red channel gets inverted, green gets reduced to zero"
" and blue remains unchanged.)"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:134
msgid ""
"Because of this the results of setting arbitrary Black/White Levels or RGB "
"curves is hard to predict, but can be fun to play with."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:139
msgid "Mix Node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:143
msgid ""
"This node mixes a base image (threaded to the top socket) together with a "
"second image (bottom socket) by working on the individual and corresponding "
"pixels in the two images or surfaces. The way the output image is produced "
"is selected in the drop-down menu. The size (output resolution) of the image"
" produced by the mix node is the size of the base image. The alpha and Z "
"channels are mixed as well."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:152
msgid ":term:`Color Blend Modes` for details on each blending mode."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:154
msgid "Color Channels"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:156
msgid ""
"There are two ways to express the channels that are combined to result in a "
"color: RGB or HSV. RGB stands for the Red/Green/Blue pixel format, and HSV "
"stands for the Hue/Saturation/Value pixel format."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:165
msgid "Alpha"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:160
msgid ""
"Click the *Alpha* button to make the mix node use the Alpha (transparency) "
"values of the second (bottom) node. If enabled, the resulting image will "
"have an Alpha channel that reflects both images' channels. Otherwise, (when "
"not enabled, light green) the output image will mix the colors by "
"considering what effect the Alpha channel has of the base (top input socket)"
" image. The Alpha channel of the output image is not affected."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:168
msgid ""
"The amount of mixing of the bottom socket is selected by the Factor input "
"field (*Fac:*). A factor of zero does not use the bottom socket, whereas a "
"value of 1.0 makes full use. In Mix mode, 50:50 (0.50) is an even mix "
"between the two, but in Add mode, .50 means that only half of the second "
"socket's influence will be applied."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:174
msgid ""
"Below are samples of common mix modes and uses, mixing a color or checker "
"with a mask."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:179
msgid ""
"Some explanation of the mixing methods above might help you use the Mix node"
" effectively:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:181
msgid ""
"*Add* - adding blue to blue keeps it blue, but adding blue to red makes "
"purple. White already has a full amount of blue, so it stays white. Use this"
" to shift a color of an image. Adding a blue tinge makes the image feel "
"colder."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:182
msgid ""
"*Subtract* : Taking Blue away from white leaves Red and Green, which "
"combined make Yellow (and you never thought you'd need a color wheel again, "
"eh?). Taking Blue away from Purple leaves Red. Use this to de-saturate an "
"image. Taking away yellow makes an image bluer and more depressing."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:183
msgid ""
"*Multiply* : Black (0.00) times anything leaves black. Anything times White "
"(1.00) is itself. Use this to mask out garbage, or to colorize a black-and-"
"white image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:184
msgid ""
"*Hue* : Shows you how much of a color is in an image, ignoring all colors "
"except what is selected: makes a monochrome picture (style 'Black & Hue')."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:185
msgid "*Mix* : Combines the two images, averaging the two."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:186
msgid ""
"*Lighten* : Like bleach, makes your whites whiter. Use with a mask to "
"lighten up a little."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:187
msgid ""
"*Difference* : Kinda cute in that it takes out a color. The color needed to "
"turn Yellow into White is Blue. Use this to compare two verrry similar "
"images to see what had been done to one to make it the other; sorta like a "
"change log for images. You can use this to see a watermark (see `Using Mix "
"to Watermark images`_) you have placed in an image for theft detection."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:188
msgid ""
"*Darken*, with the colors set here, is like looking at the world through "
"rose-colored glasses (sorry, I just couldn't resist)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:192
msgid "Contrast Enhancement using Mix"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:194
msgid ""
"Here is a small map showing the effects of two other common uses for the RGB"
" Curve: **Darken** and **Contrast Enhancement**. You can see the effect each"
" curve has independently, and the combined effect when they are **mixed** "
"equally."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:202
msgid ""
"Example node setup showing \"Darken\", \"Enhance Contrast\" and \"Mix\" "
"nodes for composition."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:205
msgid ""
"As you can hopefully see, our original magic monkey was overexposed by too "
"much light. To cure an overexposure, you must both darken the image and "
"enhance the contrast. Other paint programs usually provide a slider type of "
"control, but Blender, ah the fantastic Blender, provides a user-definable "
"curve to provide precise control."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:210
msgid ""
"In the top RGB curve, *Darken*, only the right side of the curve was "
"lowered; thus, any X input along the bottom results in a geometrically less "
"Y output. The *Enhance Contrast* RGB 'S' curve scales the output such that "
"middle values of X change dramatically; namely, the middle brightness scale "
"is expanded, and thus whiter whites and blacker blacks are output. To make "
"this curve, simply click on the curve and a new control point is added. Drag"
" the point around to bend the curve as you wish. The Mix node combines these"
" two effects equally, and Suzanne feels much better. And NOBODY wants a "
"cranky monkey on their hands."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:222
msgid "Using Mix to Watermark images"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:224
msgid ""
"In the old days, a pattern was pressed into the paper mush as it dried, "
"creating a mark that identified who made the paper and where it came from. "
"The mark was barely perceptible except in just the right light. Probably the"
" first form of subliminal advertising. Nowadays, people watermark their "
"images to identify them as personal intellectual property, for subliminal "
"advertising of the author or hosting service, or simply to track their "
"image's proliferation throughout the web. Blender provides a complete set of"
" tools for you to both encode your watermark and to tell if an image has "
"your watermark."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:235
msgid "Encoding Your Watermark in an Image"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:237
msgid ""
"First, construct your own personal watermark. You can use your name, a word,"
" or a shape or image not easily replicated. While neutral gray works best "
"using the encoding method suggested, you are free to use other colors or "
"patterns. It can be a single pixel or a whole gradient; it's up to you. In "
"the example below, we are encoding the watermark in a specific location in "
"the image using the Translate node; this helps later because we only have to"
" look in a specific location for the mark. We then use the RGB to BW node to"
" convert the image to numbers that the Map Value node can use to make the "
"image subliminal. In this case, it reduces the mark to one-tenth of its "
"original intensity. The Add node adds the corresponding pixels, make the "
"ones containing the mark ever-so-slightly brighter."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:252
msgid "Embedding your mark in an Image using a Mark and Specific Position"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:255
msgid ""
"Of course, if you *want* people to notice your mark, don't scale it so much,"
" or make it a contrasting color. There are also many other ways, using other"
" mix settings and fancier rigs. Feel free to experiment!"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:259
msgid "Additional uses"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:261
msgid ""
"You can also use this technique, using settings that result in visible "
"effects, in title sequences to make the words appear to be cast on the "
"water's surface, or as a special effect to make words appear on the "
"possessed girl's forearm. yuk."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:267
msgid "Decoding an Image for your Watermark"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:269
msgid ""
"When you see an image that you think might be yours, use the node map below "
"to compare it to your stock image (pre-watermarked original). In this map, "
"the Mix node is set to Difference, and the Map Value node amplifies any "
"difference. The result is routed to a viewer, and you can see how the "
"original mark stands out, clear as a bell:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:278
msgid "Checking an image for your watermark"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:281
msgid ""
"Various image compression algorithms lose some of the original; the "
"difference shows as noise. Experiment with different compression settings "
"and marks to see which works best for you by having the encoding map in one "
"scene, and the decoding map in another. Use them while changing Blender's "
"image format settings, reloading the watermarked image after saving, to get "
"an acceptable result. In the example above, the mark was clearly visible all"
" the way up to JPEG compression of 50%."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:290
msgid "Using Dodge and Burn (History Lesson)"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:292
msgid ""
"Use the dodge and burn mix methods in combination with a mask to affect only"
" certain areas of the image. In the old darkroom days, when, yes, I actually"
" spent hours in a small stinky room bathed in soft red light, I used a "
"circle cutout taped to a straw to dodge areas of the photo as the exposure "
"was made, casting a shadow on the plate and thus limiting the light to a "
"certain area."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:298
msgid ""
"To do the opposite, I would burn in an image by holding a mask over the "
"image. The mask had a hole in it, letting light through and thus 'burning' "
"in the image onto the paper. The same equivalent can be used here by mixing "
"an alpha mask image with your image using a dodge mixer to lighten an area "
"of your photo. Remember that black is zero (no) effect, and white is one "
"(full) effect. And by the way, ya grew to like the smell of the fixer, and "
"with a little soft music in the background and the sound of the running "
"water, it was very relaxing. I kinda miss those dayz."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:309
msgid "Hue Saturation Node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:313
msgid ""
"As an alternative to RGB editing, color can be thought of as a mix of Hues, "
"namely a normalized value along the visible spectrum from infra-red to "
"ultraviolet (the rainbow, remember \"Roy G. Biv\"). The amount of the color "
"added depends on the saturation of that color; the higher the saturation, "
"the more of that pigment is added. Use the saturation slider of this node to"
" \"bring out\" the colors of a washed-out image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:320
msgid ""
"This node takes an input image and runs the color of the image (and the "
"light it reflects and radiates) 'up' through a factor (0.0-1.0) and applies "
"a saturation of color effect of a hue to the image:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:330
msgid "Hue:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:325
msgid ""
"The **Hue** slider specifies how much to shift the hue of the image. Hue 0.5"
" (in the middle) does not shift the hue or affect the color of the image. As"
" Hue shifts left, the colors shift as more cyan is added; a blue image goes "
"bluer, then greener, then yellow. A red image goes violet, then purple, "
"blue, and finally teal.  Shifting right (increasing Hue from 0.5 to 1.0) "
"introduces reds and greens. A blue image goes purple, plum, red, orange, and"
" then yellow. A red image goes golden, olive, green, and cyan."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:332
msgid "Sat:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:333
msgid ""
"**Saturation** affect the amount of pigment in the image.  A saturation of 0"
" actually *removes* hues from the color, resulting in a black-and-white "
"grayscale image. A saturation of 1.0 blends in the hue, and 2.0 doubles the "
"amount of pigment and brings out the colors."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:334
msgid "Val:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:335
msgid ""
"**Value** affects the overall amount of the color in the image. Increasing "
"values make an image lighter; decreaing values shift an image darker."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:338
msgid "Fac:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:337
msgid ""
"**Factor** determines how much this node affects the image. A factor of 0 "
"means that the input image is not affected by the Hue and Saturation "
"settings. A factor of 1 means they rule, with .5 being a mix."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:341
msgid "Hue/Saturation tips"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:343
msgid "Some things to keep in mind that might help you use this node better:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:346
msgid "Hues are vice versa."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:346
msgid ""
"A blue image, with a Hue setting at either end of the spectrum (0 or 1), is "
"output as yellow (recall that white, minus blue, equals yellow). A yellow "
"image, with a Hue setting at 0 or 1, is blue."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:349
msgid "Hue and Saturation work together."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:349
msgid ""
"So, a Hue of .5 keeps the blues the same shade of blue, but the saturation "
"slider can deepen or lighten the intensity of that color."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:353
msgid "Gray & White are neutral hues."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:352
msgid ""
"A gray image, where the RGB values are equal, has no hue. Therefore, this "
"node can only affect it with the *Val* slider. This applies for all shades "
"of gray, from black to white; wherever the values are equal."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:357
msgid "Changing the effect over time."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:356
msgid ""
"The Hue and Saturation values are set in the node by the slider, but you can"
" feed a Time input into the Factor to bring up (or down) the effect change "
"over time."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:359
msgid "Tinge"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:361
msgid ""
"This HSV node simply shifts hues that are already there. To colorize a gray "
"image, or to ADD color to an image, use a mix node to add in a static color "
"from an RGB input node with your image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:365
msgid "HSV Example"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:369
msgid ""
"Here, the image taken by a cheap digital camera in poor lighting at night "
"using a flash (can we do it any worse, eh?) is adjusted by decreasing the "
"Hue (decreasing reds and revealing more blues and greens), decreasing "
"Saturation (common in digital cameras, and evens out contrast) and "
"increasing Value (making it all lighter)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:377
msgid "Bright/Contrast"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:383
msgid "A basic example"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:386
msgid "Bright"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:387
msgid ""
"A multiplier-type factor by which to increase the overall brightness of the "
"image. Use a negative number to darken an image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:390
#: ../../manual/composite_nodes/types/color.rst:727
msgid "Contrast"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:389
msgid ""
"A scaling type factor by which to make brighter pixels brighter but keeping "
"the darker pixels dark. Higher values make details stand out. Use a negative"
" number to decrease the overall contrast in the image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:393
#: ../../manual/composite_nodes/types/input.rst:378
msgid "Notes"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:400
msgid ""
"It is possible that this node will put out a value set that has values "
"beyond normal range, i. e. values > 1 or < 0. If you will be using the "
"output to mix with other images in the normal range, you should clamp the "
"values using the Map Value node (with the Min and Max enabled), or put "
"through a ColorRamp node (with all normal defaults)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:406
msgid ""
"Either of these nodes will scale the values back to normal range. In the "
"example image, we want to amp up the specular pass. The bottom thread shows "
"what happens if we do not clamp the values; the specular pass has valued "
"much less than 1 in the dark areas; when added to the medium gray, it makes "
"black. Passing the brightened image through either the Map Value or the "
"ColorRamp produces the desired effect."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:415
#: ../../manual/composite_nodes/types/color.rst:722
msgid "Gamma"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:422
msgid ""
"A reason for applying gamma correction to the final render is to correct "
"lighting issues. Lighting issues that can be corrected by a gamma correction"
" node are light attenuation with distance, light falloff at terminators, and"
" light and shadow superpositions. Simply think about the renderer as a "
"virtual camera. By applying a gamma correction to your render, you are just "
"replicating what digital camera do with photos. Digital cameras gamma "
"correct their photos, so you do the same thing. The gamma correction is, "
"indeed, 0.45, not 2.2."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:431
msgid ""
"But reverse gamma correction on textures and colors have another very "
"important consequence when you are using rendering techniques such as "
"radiosity or GI. When doing the GI calculations, all textures and colors are"
" taken to mean reflectance. If you do not reverse gamma correct your "
"textures and colors, then the GI render will look way too bright because the"
" reflected colors are all way too high and thus a lot more light is bouncing"
" around than it should."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:438
msgid ""
"Gamma correction in Blender enters in a few places. The first is in this "
"section with the nodes, both this node and the Tonemap node, and the second "
"is in calculating Radiosity. In the noodle to the left, the split viewer "
"shows the before and after effect of applying a gamma correction."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:445
msgid "Invert"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:452
msgid ""
"This handy node inverts the colors in the input image, producing a negative."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:458
#: ../../manual/composite_nodes/types/color.rst:687
msgid "Factor"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:459
#: ../../manual/composite_nodes/types/color.rst:686
msgid "Controls the amount of influence the node exerts on the output image"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:460
msgid "Color"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:461
msgid ""
"The input image. In this case, a red sphere on a black transparent "
"background"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:462
#: ../../manual/composite_nodes/types/convertor.rst:510
msgid "RGB"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:463
msgid ""
"Invert the colors from white. In this example, red inverted is cyan (teal)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:466
msgid "A"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:465
msgid "Invert the alpha (transparency) channel as well. Handy for masking."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:469
msgid "AlphaOver Node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:473
msgid "AlphaOver node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:476
msgid ""
"Use this node to layer images on top of one another. This node takes two "
"images as input, combines them by a factor, and outputs the image. Connect "
"the Background image to the top input, and the foreground image to the lower"
" input. Where the foreground image pixels have an alpha greater than 0 "
"(namely, have some visibility), the background image will be overlaid."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:482
msgid ""
"Use the *Factor* slider to 'merge' the two pictures. A factor less than 1.00"
" will make the foreground more transparent, allowing the background to bleed"
" through."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:494
msgid "Assembling a composite Image using AlphaOver"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:497
msgid ""
"In this example, an image of a Toucan is superimposed over a wooden "
"background. Use the PreMultiply button when the foreground image and "
"background images have a combined Alpha that is greater than 1.00; otherwise"
" you will see an unwanted halo effect. The resulting image is a composite of"
" the two source images."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:507
msgid "Animated See-Through/Sheer SFX using AlphaOver - Frame 11"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:510
msgid ""
"In this example, we use the Factor control to make a sheer cloth or onion-"
"skin effect. You can animate this effect, allowing the observer to 'see-"
"through' walls (or any foreground object) by hooking up a Time node to feed "
"the Factor socket as shown below. In this example, over the course of 30 "
"frames, the Time node makes the AlphaOver node produce a picture that starts"
" with the background wood image, and slowly bleeds through the Toucan. This "
"example shows frame 11 just as the Toucan starts to be revealed."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:517
msgid ""
"AlphaOver does not work on the colors of an image, and will not output any "
"image when one of the sockets is unconnnected."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:522
msgid "Strange Halos or Outlines"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:524
msgid ""
"To clarify the premultiplied-alpha button: An alpha channel has a value of "
"between 0 and 1. When you make an image transparent (to composite it over "
"another one), you are really multiplying the RGB pixel values by the alpha "
"values (making the image transparent (0) where the alpha is black (0), and "
"opaque (1) where it is white (1))."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:530
msgid ""
"So, to composite image A over image B, you get the alpha of image A and "
"multiply it by image A, thus making the image part of A opaque and the rest "
"transparent. You then inverse the alphas of A and multiply image B by it, "
"thus making image B transparent where A is opaque and vice versa. You then "
"add the resultant images and get the final composite."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:537
msgid ""
"A pre-multiplied alpha is when the image (RGB) pixels are already multiplied"
" by the alpha channel, therefore the above compositing op doesn't work too "
"well, and you have to hit 'convert pre-mult'. This is only an issue in semi "
"transparent area, and edges usually. The issue normally occurs in Nodes when"
" you have combined, with alpha, two images, and then wish to combine that "
"image with yet another image. The previously combined image was previously "
"multiplied (pre-mult) and needs to be converted as such (hence, *Convert "
"PreMul*)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:546
msgid ""
"If you don't pay attention and multiply twice, you will get a white or clear"
" halo around your image where they meet, since your alpha value is being "
"squared or cubed. It also depends on whether or not you have rendered your "
"image as a pre-mult, or straight RGBA image."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:555
msgid "Layering Images using AlphaOver Premul"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:559
msgid "Z-Combine Node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:563
msgid "Z Combine node"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:566
msgid ""
"The Z-Combine node takes two images and two Z-value sets as input. It "
"overlays the images using the provided Z values to detect which parts of one"
" image are in front of the other. If both Z values are equal, it uses the "
"top image. It puts out the combined image, with the combined Z-depth map, "
"allowing you to thread multiple Z-combines together."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:571
msgid ""
"Z-Combine chooses whichever Z-value is less when deciding which image pixel "
"to use. Normally, objects are in front of the camera and have a positive Z "
"value. If one Z-value is negative, and the other positive, Z-Combine will "
"use the image corresponding to the negative value. You can think of a "
"negative Z value as being behind the camera. When choosing between two "
"negative Z-values, Z-Combine will use whichever is more negative."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:577
msgid ""
"Alpha values carry over from the input images. Not only is the image pixel "
"chosen, but also its alpha channel value. So, if a pixel is partially or "
"totally transparent, the result of the Z-Combine will also be partially "
"transparent; in which case the background image will show through the "
"foreground (chosen) pixel. Where there are sharp edges or contrast, the "
"alpha map will automatically be anti-aliased to smooth out any artifacts."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:584
msgid ""
"However, you can obtain this by making an AlphaOver of two Z-Combine, one "
"normal, the other having inverted (reversed?) Z-values as inputs, obtained "
"using for each of them a *MapValue* node with a *Size* field set to -1.0:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:593
msgid "Alpha and Z-Combine node."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:603
msgid "Choosing closest pixels"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:606
msgid ""
"In the example to the right, render output from two scenes are mixed using "
"the Z-Offset node, one from a sphere of size 1.30, and the other a cube of "
"size 1.00. The sphere and square are located at the same place. The cube is "
"tipped forward, so the corner in the center is closer to the camera than the"
" sphere surface; so Z-Offset chooses to use the cube's pixels. But the "
"sphere is slightly larger (a size of 1.30 versus 1.00), so it does not fit "
"totally 'inside' the cube. At some point, as the cube's sides recede back "
"away from the camera, the sphere's sides are closer. When this happens, "
"Z-offset uses the sphere's pixels to form the resulting picture."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:615
msgid ""
"This node can be used to combine a foreground with a background matte "
"painting. Walt Disney pioneered the use of multi-plane mattes, where three "
"or four partial mattes were painted on glass and placed on the left and "
"right at different Z positions; mininal camera moves to the right created "
"the illusion of depth as Bambi moved through the forest."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:621
msgid "Valid Input"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:623
msgid ""
"Z Input Sockets do not accept fixed values; they must get a vector set (see "
"Map Value node). Image Input Sockets will not accept a color, since it does "
"not have UV coordinates."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:630
msgid "Mix and Match Images"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:633
msgid ""
"You can use Z-Combine to merge two images as well, using the Z-values put "
"out by two renderlayers. Using the Z-values from the sphere and cube scenes "
"above, but threading different images, yields the example to the right."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:643
msgid "Z-Combine in action"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:646
msgid ""
"In this noodle (you may click the little expand-o-matic icon in the bottom "
"right to view it to full size), we mix a render scene with a flat image. In "
"the side view of the scene, the purple cube is 10 units away from camera, "
"and the gray ball is 20. The 3D cursor is about 15 units away from camera. "
"We Z-in the image at a location of 15, thus inserting it in-between the cube"
" and the ball. The resulting image appears to have the cube on the table."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:654
msgid "Invisible Man Effect"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:656
msgid ""
"If you choose a foreground image which has a higher Alpha than the "
"background, and then mix the Z-combine with a slightly magnified background,"
" the outline of the transparent area will distort the background, enough to "
"make it look like you are seeing part of the background through an invisible"
" yet Fresnel-lens object."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:660
msgid "Color Balance"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:662
msgid ""
"The Color Balance node can adjust the color and values of an image using two"
" different correction formulas."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:665
msgid ""
"The *Lift, Gammma, Gain* formula uses *Lift*, *Gamma*, and *Gain* "
"calculations to adjust an image.\\ *Lift* increases the value of dark "
"colors, *Gamma* will adjust midtones, and *Gain* adjusts highlights."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:669
msgid ""
"The *Offset, Power, Slope* formula uses *Offset*, *Power*, and *Slope*: "
"``out = (i * s + o) ^ p``"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:672
msgid "where:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:674
msgid "``out``"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:675
msgid "The color graded pixel code value."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:676
msgid "``i``"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:677
msgid "The input pixel code value (0=black, 1=white)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:678
msgid "``s``"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:679
msgid "Slope (any number 0 or greater, nominal value is 1.0)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:680
msgid "``o``"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:681
msgid "Offset (any number, nominal value is 0)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:683
msgid "``p``"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:683
msgid "Power (any number greater than 0, nominal value is 1.0)."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:690
msgid "Hue Correct"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:692
msgid ""
"The Hue Correct node is able to adjust the Hue, Saturation, and Value of an "
"image, with an input curve."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:695
msgid ""
"By default, the curve is a straight line, meaning there is no change. The "
"spectrum allows you to raise or lower HSV levels for each range of pixel "
"colors. To change a H, S, or V level, move the curve points up or down. "
"Pixels with hue values each point in the horizontal position of the graph "
"will be changed depending on the shape of the curve."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:703
msgid "Tone Map"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:705
msgid ""
"Tone mapping is a technique used in image processing and computer graphics "
"to map one set of colors to another in order to approximate the appearance "
"of high dynamic range images in a medium that has a more limited dynamic "
"range."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:709
msgid ""
"Essentially, tone mapping addresses the problem of strong contrast reduction"
" from the scene values (radiance) to the displayable range while preserving "
"the image details and color appearance important to appreciate the original "
"scene content."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:714
msgid "The Tone Map node has two methods of calculation:"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:722
msgid "Rh Simple"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:717
msgid "Key"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:718
msgid "The value the average luminance is mapped to."
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:720
msgid ""
"Normally always 1, but can be used as an extra control to alter the "
"brightness curve"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:722
msgid "If not used, set to 1"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:735
msgid "R/D Photoreceptor"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:725
msgid "Intensity"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:726
msgid "If less than zero, darkens image; otherwise, makes it brighter"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:728
msgid "Set to 0 to use estimate from input image"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:729
msgid "Adaptation"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:730
msgid "If 0, global; if 1, based on pixel intensity"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:735
msgid "Color Correction"
msgstr ""

#: ../../manual/composite_nodes/types/color.rst:732
msgid "If 0, same for all channels; if 1, each independent"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:4
msgid "Composite Convertor Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:6
msgid ""
"As the name implies, these nodes convert the colors or other properties of "
"various data (e.g. images) in some way. They also split out or re-combine "
"the different color channels that make up an image, allowing you to work on "
"each channel independently. Various color channel arrangements are "
"supported, including traditional RGB and HSV formats, and the newest High "
"Definition Media Interface (HDMI) formats."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:15
msgid "ColorRamp Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:17
msgid ""
"The ColorRamp Node is used for mapping values to colors with the use of a "
"gradient. It works exactly the same way as a :doc:`colorband for textures "
"and materials </materials/properties/ramps>`, using the Factor value as a "
"slider or index to the color ramp shown, and outputting a color value and an"
" alpha value from the output sockets."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:22
msgid ""
"By default, the ColorRamp is added to the node map with two colors at "
"opposite ends of the spectrum. A completely black black is on the left "
"(Black as shown in the swatch with an Alpha value of 1.00) and a whitewash "
"white is on the right. To select a color, :kbd:`LMB` click on the thin "
"vertical line/band within the colorband. The example picture shows the black"
" color selected, as it is highlighted white. The settings for the color are "
"shown above the colorband as (left to right): color swatch, Alpha setting, "
"and interpolation type."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:32
msgid ""
"To change the hue of the selected color in the colorband, :kbd:`LMB` click "
"on the swatch, and use the popup color picker control to select a new color."
" Press :kbd:`Enter` to set that color."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:37
msgid ""
"To add colors, hold :kbd:`Ctrl` down and :kbd:`Ctrl-LMB` click inside the "
"gradient. Edit colors by clicking on the rectangular color swatch, which "
"pops up a color-editing dialog. Drag the gray slider to edit Alpha values. "
"Note that you can use textures for masks (or to simulate the old \"Emit\" "
"functionality) by connecting the alpha output to the factor input of an RGB "
"mixer."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:44
msgid ""
"To delete a color from the colorband, select it and press the Delete button."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:46
msgid ""
"When using multiple colors, you can control how they transition from one to "
"another through an interpolation mixer. Use the interpolation buttons to "
"control how the colors should band together: Ease, Cardinal, Linear, or "
"Spline."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:51
msgid ""
"Use the A: button to define the Alpha value of the selected color for each "
"color in the range."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:55
msgid "Using ColorRamp to create an Alpha Mask"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:57
msgid ""
"A powerful but often overlooked feature of the ColorRamp is to create an "
"Alpha Mask, or a mask that is overlaid on top of another image, and, like a "
"mask, allows some of the background to show through. The example map below "
"shows how to use the Color Ramp node to do this:"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:65
msgid "Using the ColorRamp node to create an alpha mask"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:68
msgid ""
"In the map above, a black and white swirl image, which is lacking an alpha "
"channel, is fed into the ColorRamp node as a *Fac* tor. (Technically, we "
"should have converted the image to a value using the RGB-to-BW node, buy "
"hey, this works just as well since we are using a BW image as input.)"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:73
msgid ""
"We have set the ColorRamp node to a purely transparent color on the left end"
" of the spectrum, and a fully Red color on the right. As seen in the viewer,"
" the ColorRamp node puts out a mask that is fully transparent where the "
"image is black. Black is zero, so ColorRamp uses the 'color' at the left end"
" of the spectrum, which we have set to transparent. The ColorRamp image is "
"fully red and opaque where the image is white (1.00)."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:80
msgid ""
"We verify that the output image mask is indeed transparent by overlaying it "
"on top of a pumpkin image. For fun, we made that AlphaOver output image 0.66"
" transparent so that we can, in the future, overlay the image on a flashing "
"white background to simulate a scary scene with lighting flashes."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:87
msgid "Using ColorRamp to Colorize an Image"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:89
msgid ""
"The real power of ColorRamp is that multiple colors can be added to the "
"color spectrum. This example compositing map takes a boring BW image and "
"makes it a flaming swirl!"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:95
msgid ""
"In this example, we have mapped the shades of gray in the input image to "
"three colors, blue, yellow, and red, all fully opaque (Alpha of 1.00). Where"
" the image is black, ColorRamp substitutes blue, the currently selected "
"color. Where it is some shade of gray, ColorRamp chooses a corresponding "
"color from the spectrum (bluish, yellow, to reddish). Where the image is "
"fully white, ColorRamp chooses red."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:103
msgid "RGB to BW Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:105
msgid "This node converts an RGB input and outputs a greyscale image."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:109
msgid "Set Alpha Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:113
msgid "Set Alpha node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:116
msgid ""
"This node adds an alpha channel to a picture. Some image formats, such as "
"JPEG, do not support an alpha channel. In order to overlay a JPEG image on "
"top of a background, you must add an alpha channel to it using this node."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:120
msgid ""
"The *Image* input socket is optional. If an input image is not supplied, the"
" base color shown in the swatch will be used. To change the color, "
":kbd:`LMB` click the swatch and use the color-picker control to choose or "
"specify a color you want."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:124
msgid ""
"The amount of *Alpha* (1.00 being totally opaque and 0.00 being totally "
"transparent) can be set for the whole picture using the input field. "
"Additionally, the Alpha factor can be set by feeding its socket."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:130
msgid ""
"This is not, and is not intended to be, a general-purpose solution to the "
"problem of compositing an image that doesn't contain Alpha information. You "
"might wish to use \"Chroma Keying\" or \"Difference Keying\" (as discussed "
"elsewhere) if you can. This node is most often used (with a suitable input "
"being provided by means of the socket) in those troublesome cases when you "
"*can't,* for some reason, use those techniques directly."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:138
msgid "Using SetAlpha to Fade to Black"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:140
msgid ""
"To transition the audience from one scene or shot to another, a common "
"technique is to \"fade to black\". As its name implies, the scene fades to a"
" black screen. You can also \"fade to white' or whatever color you wish, but"
" black is a good neutral color that is easy on the eyes and intellectually "
"\"resets\" the viewer's mind. The node map below shows how to do this using "
"the Set Alpha node."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:149
msgid "Fade To Black"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:152
msgid ""
"In the example above, the alpha channel of the swirl image is ignored. "
"Instead, a :doc:`time node </composite_nodes/types/input#time_node>` "
"introduces a factor from 0.00 to 1.00 over 60 frames, or about 2 seconds, to"
" the Set Alpha node. Note that the time curve is exponentially-shaped, so "
"that the overall blackness will fade in slowly and then accelerate toward "
"the end. The Set Alpha node does not need an input image; instead the flat "
"(shadeless) black color is used. The Set Alpha Node uses the input factor "
"and color to create a black image that has an alpha set which goes from 0.00"
" to 1.00 over 60 frames, or completely transparent to completely opaque. "
"Think of alpha as a multiplier for how vivid you can see that pixel. These "
"two images are combined by our trusty AlphaOver node completely (a *Fac* tor"
" of 1.00) to produce the composite image. The SetAlpha node will thus, "
"depending on the frame being rendered, produce a black image that has some "
"degree of transparency. Set up and Animate, and you have an image sequence "
"that fades to black over a 2-second period."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:167
msgid "No Scene information used"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:169
msgid ""
"This example node map does not use the RenderLayer. To produce this 2 second"
" animation, no blender scene information was used. This is an example of "
"using Blender's powerful compositing abilities separate from its modeling "
"and animation capabilities. (A Render Layer could be substituted for the "
"Image layer, and the \"fade-network\" effect will still produce the same "
"effect)"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:173
msgid "Using SetAlpha to Fade In a Title"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:175
msgid ""
"To introduce your animation, you will want to present the title of your "
"animation over a background. You can have the title fly in, or fade it in. "
"To fade it in, use the SetAlpha node with the Time node as shown below."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:183
msgid "Using Set Alpha to Fade in a Title"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:186
msgid ""
"In the above example, a Time curve provides the Alpha value to the input "
"socket. The current RenderLayer, which has the title in view, provides the "
"image. As before, the trusty AlphaOver node mixes (using the alpha values) "
"the background swirl and the alphaed title to produce the composite image. "
"Notice the *ConvertPre* -Multiply button is NOT enabled; this produces a "
"composite where the title lets the background image show through where even "
"the background image is transparent, allowing you to layer images on top of "
"one another."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:195
msgid "Using SetAlpha to Colorize a BW Image"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:199
msgid "Using Set Alpha to Colorize an Image"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:201
msgid ""
"In the example above, notice how the blue tinge of the render input colors "
"the swirl. You can use the Set Alpha node's color swatch with this kind of "
"node map to add a consistent color to a BW image."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:204
msgid ""
"In the example map to the right, use the *Alpha* value of the SetAlpha node "
"to give a desired degree of colorization. Thread the input image and the Set"
" Alpha node into an AlphaOver node to colorize any black and white image in "
"this manner. Note the *ConvertPre* -Multiply button is enabled, which tells "
"the AlphaOver node not to multiply the alpha values of the two images "
"together."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:212
msgid "ID Mask Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:216
msgid "ID Mask node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:219
msgid ""
"This node will use the Object Index pass (see RenderLayers) to produce an "
"anti-aliased alpha mask for the object index specified. The mask is opaque "
"where the object is, and transparent where the object isn't. If the object "
"is partially transparent, the alpha mask matches the object's transparency. "
"This post-process function fills in the jaggies with interpolated values."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:225
msgid "Object Index"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:227
msgid ""
"Object indices are only output from a RenderLayers node or stored in a "
"multilayer OpenEXR format image."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:232
msgid "Setting an Object Index"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:235
msgid ""
"You can specify, for any of the objects in your scene, an Object Index as "
"shown the right (the currently select object has an index of 2). When "
"rendered, if Object Index passes are enabled, its index will be 2, and "
"setting the ID Mask node to 2 will show where that object is in the scene."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:240
msgid ""
"This node is extremely well suited to removing the aliases shown as output "
"from the Defocus node or DOF noodles caused by some objects being close to "
"camera against objects far away."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:245
#: ../../manual/composite_nodes/types/convertor.rst:251
#: ../../manual/composite_nodes/types/convertor.rst:303
#: ../../manual/composite_nodes/types/distort.rst:265
#: ../../manual/composite_nodes/types/filter.rst:132
#: ../../manual/composite_nodes/types/filter.rst:299
#: ../../manual/composite_nodes/types/input.rst:573
#: ../../manual/composite_nodes/types/input.rst:620
#: ../../manual/composite_nodes/types/matte.rst:213
msgid "Example"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:254
msgid ""
"In this example, the left rear red cube is assigned PassIndex 1, and the "
"right cube PassIndex 2. Where the two cubes intersect, there is going to be "
"noticeable pixelation (jaggies) because they come together at a sharp angle "
"and are different colors. Using the mask from object 1, which is smoothed "
"(anti-aliased) at the edges, we use a Mix node set on Multiply to multiply "
"the smoothed edges against the image, thus removing those nasty (Mick) "
"Jaggies. Thus, being smoothed out, the Rolling Stones gather no moss. (I "
"really hope you get that obscure reference :)"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:263
msgid ""
"Note that the mask returns white where the object is fully visible to the "
"camera (not behind anything else) and black for the part of the object that "
"is partially or totally obscured by a fully or partially opaque object in "
"front of it. If something else is in front of it, even if that thing is "
"partially transparent and you can see the object in a render, the mask will "
"not reflect that partially obscured part."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:272
msgid "Math Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:276
msgid "Math node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:279
msgid ""
"This node performs the selected math operation on an image or buffer. All "
"common math functions are supported. If only an image is fed to one Value "
"socket, the math function will apply the other Value consistently to every "
"pixel in producing the output Value. Select the math function by clicking "
"the up-down selector where the \"Add\" selection is shown."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:284
msgid ""
"The trig functions of Sine, Cosine, Tangent use only the top socket and "
"accept values in radians between 0 and 2*pi for one complete cycle."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:287
msgid ""
"FIXME(Template Unsupported: Version; {{Version|2.44}} ) **Known bug** : the "
"Top socket must get the image if the bottom socket is left as a value."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:297
msgid "Manual Z-Mask"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:306
msgid ""
"This example has one scene input by the top RenderLayer node, which has a "
"cube that is about 10 BU from the camera. The bottom RenderLayer node inputs"
" a scene  (FlyCam) with a plane that covers the left half of the view and is"
" 7 BU from the camera. Both are fed through their respective Map Value nodes"
" to divide the Z buffer by 20 (multiply by .05, as shown in the Size field) "
"and clamped to be a Min/Max of 0.0/1.0 respectively."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:314
msgid ""
"For the Minimum function, the node selects those Z values where the "
"corresponding pixel is closer to the camera; so it chooses the Z values for "
"the plane and part of the cube. The background has an infinite Z value, so "
"it is clamped to 1.0 (shown as white). In the maximum example, the Z values "
"of the cube are greater than the plane, so they are chosen for the left "
"side, but the plane (FlyCam) Renderlayer's Z are infinite (mapped to 1.0) "
"for the right side, so they are chosen."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:324
msgid "Using Sine Function to Pulsate"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:328
msgid ""
"This example has a Time node putting out a linear sequence from 0 to 1 over "
"the course of 101 frames. The green vertical line in the curve widget shows "
"that frame 25 is being put out, or a value of .25. That value is multiplied "
"by 2*pi and converted to 1.0 by the Sine function, since we all know that "
"Sine(2*pi/4)=Sine(pi/2)=+1.0."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:333
msgid ""
"Since the Sine function can put out values between -1.0 and 1.0, the Map "
"Value node scales that to 0.0 to 1.0 by taking the input (-1 to 1), adding 1"
" (making 0 to 2), and multiplying the result by one half (thus scaling the "
"output between 0 and 1). The default ColorRamp converts those values to a "
"grayscale. Thus, medium gray corresponds to a 0.0 output by the sine, black "
"to -1.0, and white to 1.0. As you can see, Sine(pi/2)=1.0.  Like having your"
" own visual color calculator! Animating this noodle provides a smooth cyclic"
" sequence through the range of grays."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:342
msgid ""
"Use this function to vary, for example, the alpha channel of an image to "
"produce a fading in/out effect. Alter the Z channel to move an scene in/out "
"of focus. Alter a color channel value to make a color \"pulse\"."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:349
msgid "Brightening/Scaling a Channel"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:353
msgid ""
"This example has a Multiply node increasing the luminance channel (Y) of the"
" image to make it brighter. Note that you should use a Map Value node with "
"Min() and Max () enabled to clamp the output to valid values. With this "
"approach you could use a logarithmic function to make a high-dynamic range "
"image. For this particular example, there is also a Brighten/Contrast node "
"that might give simpler control over brightness."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:362
msgid "Quantize/Restrict Color Selection"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:364
msgid ""
"In this example, we want to restrict the color output to only 256 possible "
"values. Possible use of this is to see what the image will look like on an "
"8-bit cell phone display. To do this, we want to restrict the R, G and B "
"values of any pixel to be one of a certain value, such that when they are "
"combined, will not result in more than 256 possible values. The number of "
"possible values of an output is the number of channel values multiplied by "
"each other, or Q = R * G * B."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:371
msgid ""
"Since there are 3 channels and 256 values, we have some flexibility how to "
"quantize each channel, since there are a lot of combinations of R*G*B that "
"would equal 256. For example, if {R,G,B} = {4,4,16}, then 4 * 4 * 16 = 256. "
"Also, {6,6,7} would give 252 possible values. The difference in appearance "
"between {4,4,16} and {6,6,7} is that the first set (4,4, 16} would have "
"fewer shades of red and green, but lots of shades of blue. The set {6,6, 7} "
"would have a more even distribution of colors. To get better image quality "
"with fewer color values, give more possible values to the predominant colors"
" in the image."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:383
msgid "Theory"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:385
msgid ""
"`Two Approaches to Quantizing to 6 values "
"<http://wiki.blender.org/index.php/File:Manual-Compositing-Node-"
"Math_ColorBand>`__"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:387
msgid ""
"To accomplish this quantization of an image to 256 possible values, lets use"
" the set {6,6,7}. To split up a continuous range of values between 0 and 1 "
"(the full Red spectrum) into 6 values, we need to construct an algorithm or "
"function that takes any input value but only puts out 6 possible values, as "
"illustrated by the image to the right. We want to include 0 as true black, "
"with five other colors in between. The approach shown produces "
"{0,.2,.4,.6,.8,1}. Dividing 1.0 by 5 equals .2, which tells us how far apart"
" each quantified value is from the other."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:395
msgid ""
"So, to get good even shading, we want to take values that are 0.16 or less "
"and map them to 0.0; values between 0.16 and 0.33 get fixed to 0.2; "
"colorband values between 0.33 and 0.5 get quantized to 0.4, and so on up to "
"values between 0.83 and 1.0 get mapped to 1.0."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:401
msgid "Function f(x)"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:403
msgid ""
"An algebraic function is made up of primitive mathematical operations (add, "
"subtract, multiply, sine, cosine, etc) that operate on an input value to "
"provide a desired output value."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:406
msgid ""
"`Spreadsheet showing a function <http://wiki.blender.org/index.php/File"
":Manual-Compositing-Node-Math_spreadsheet>`__"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:409
msgid ""
"The theory behind this function is scaled truncation. Let us suppose we want"
" a math function that takes in a range of values between 0 and 1, such as "
".552, but only outputs a value of 0.0, 0.2, 0.4, etc. We can imagine then "
"that we need to get that range 0 to 1 powered up to something 0 to 6 so that"
" we can chop off and make it a whole number. So, with six divisions, how can"
" we do that? The answer is we multiply the range by 6. The output of that "
"first math multiply node is a range of values between 0 and 6. To get even "
"divisions, because we are using the rounding function (see documentation "
"above), we want any number plus or minus around a whole number will get "
"rounded to that number. So, we subtract a half, which shifts everything "
"over. The Round() function then makes that range 0 to 5. We then divide by 5"
" to get back a range of numbers between 0 and 1 which can then be combined "
"back with the other color channels. Thus, you get the function"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:423
msgid "f(x,n)=round[ x*n-1/2 ] /(n-1)"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:425
msgid ""
"where n is the number of possible output values, and x is the input pixel "
"color and f(x,n) is the output value. There's only one slight problem, and "
"that is for the value exactly equal to 1, the formula result is 1.2, which "
"is an invalid value. This is because the round function is actually a "
"roundup function, and exactly 5.5 is rounded up to 6. So, by subtracting "
".501, we compensate and thus 5. 499 is rounded to 5. At the other end of the"
" spectrum, pure black, or 0, when .501 subtracted, rounds up to 0 since the "
"Round() function does not return a negative number."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:433
msgid ""
"Sometimes using a spreadsheet can help you figure out how to put these nodes"
" together to get the result that you want. Stepping you through the formula "
"for n=6 and x=0.70, locate the line on the spreadsheet that has the 8-bit "
"value 179 and R value 0.7. Multiplying by 6 gives 4.2. Subtracting 1/2 gives"
" 3.7, which rounds up to 4. 4 divided by 5 = .8. Thus, f(0.7, 6) = 0.8 or an"
" 8-bit value of 204. You can see that this same 8-bit value is output for a "
"range of input values. Yeah! Geeks Rule! This is how you program Blender to "
"do compositing based on Algebra. Thank a Teacher if you understand this."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:444
msgid "Reality"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:451
msgid ""
"To implement this function in Blender, consider the noodle above. First, "
"feed the image to the Separate RGB node. For the Red channel, we string the "
"math nodes into a function that takes each red color, multiplies (scales) it"
" up by the desired number of divisions (6), offsets it by 0.5, rounds the "
"value to the nearest whole number, and then divides the image pixel color by"
" 5. So, the transformation is {0..1} becomes {0..6}, subtracting centers the"
" medians to {-0.5...5.5} and the rounding to the nearest whole number "
"produces {0,1,2,3,4, 5} since the function rounds down, and then dividing by"
" five results in six values {0.0,0.2,0.4,0.6,0.8,1.0}."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:461
msgid ""
"The result is that the output value can only be one of a certain set of "
"values, stair-stepped because of the rounding function of the math node "
"noodle. Copying this one channel to operate on Green and Blue gives the "
"noodle below. To get the 6:6:7, we set the three multiply nodes to {6,6,7} "
"and the divide nodes to {5,5,6}."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:466
msgid ""
"If you make this into a node group, you can easily re-use this setup from "
"project to project. When you do, consider using a math node to drive the "
"different values that you would have to otherwise set manually, just to "
"error-proof your work."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:472
msgid "Summary"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:474
msgid ""
"Normally, an output render consists of 32- or 24-bit color depth, and each "
"pixel can be one of millions of possible colors. This noodle example takes "
"each of the Red, Green and Blue channels and normalizes them to one of a few"
" values. When all three channels are combined back together, each color can "
"only be one of 256 possible values."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:481
msgid ""
"While this example uses the Separate/Combine RGB to create distinct colors, "
"other Separate/Combine nodes can be used as well. If using the YUV values, "
"remember that U and V vary between -0.5 and +0.5, so you will have to first "
"add on a half to bring the range between 0 and 1, and then after dividing, "
"subtract a half to bring in back into standard range."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:487
msgid ""
"The JPG or PNG image format will store each of the colors according to their"
" image standard for color depth (e.g. JPG is 24-bit), but the image will be "
"very very small, since reducing color depth and quantizing colors is "
"essentially what the JPEG compression algorithm accomplishes."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:492
msgid ""
"You do not have to reduce the color depth of each channel evenly. For "
"example, if blue was the dominant color in an image, to preserve image "
"quality, you could reduce Red to 2 values, Green to 4, and let the blue take"
" on 256/(2*4) or 32 values. If using the HSV, you could reduce the "
"Saturation  and Value to 2 values (0 or 1.0) by Multiply by 2 and Divide by "
"2, and restrict the Hue to 64 possible values."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:498
msgid ""
"You can use this noodle to quantize any channel; alpha, speed (vector), "
"z-values, and so forth."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:502
msgid "Combine/Separate Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:504
msgid ""
"All of these node do essentially the same thing: they split out an image "
"into (or recombine an image from) its composite color channels. Each format "
"supports the Alpha (transparency) channel. The standard way of representing "
"color in an image is called a *color space*. There are several color spaces "
"supported:"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:511
msgid ""
"Red-Green-Blue traditional primary colors, also broadcast directly to most "
"computer monitors"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:520
msgid "HSV"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:513
msgid ""
"Three values, often considered as more intuitive than the RGB system (nearly"
" only used on computers):"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:515
msgid "Hue"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:516
msgid ""
"the **Hue** of the color (in some way, choose a 'color' of the rainbow);"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:517
msgid "Saturation"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:518
msgid ""
"the **quantity** of hue in the color (from desaturate - shade of gray - to "
"saturate - brighter colors)"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:520
msgid "Value: the **luminosity** of the color"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:520
msgid ""
"(from 'no light' - black - to 'full light' - 'full' color, or white if "
"Saturation is 0.0)."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:522
msgid "YUV"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:523
msgid ""
"Luminance-Chrominance standard used in broadcasting analog PAL (European) "
"video."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:526
msgid "YCbCr"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:525
msgid ""
"Luminance-ChannelBlue-ChannelRed Component video for digital broadcast use, "
"whose standards have been updated for HDTV and commonly referred to as the "
"HDMI format for component video."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:528
msgid "See the global wikipedia for more information on color spaces."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:532
msgid "Separate/Combine RGBA Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:536
msgid "Separate RGBA node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:539
msgid ""
"This node separates an image into its red, green, blue and alpha channels. "
"There's a socket for each channel on the right."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:545
msgid "Combine RGBAnode"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:548
msgid ""
"This node combines separate input images as each color and alpha channel, "
"producing a composite image. You use this node combine the channels after "
"working on each color channel separately."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:561
msgid ""
"In this first example, we take the Alpha channel and blur it, and then "
"combine it back with the colors. When placed in a scene, the edges of it "
"will blend in, instead of having a hard edge. This is almost like anti-"
"aliasing, but in a three-dimensional sense. Use this noodle when adding CG "
"elements to live action to remove any hard edges. Animating this effect over"
" a broader scale will make the object appear to \"phase\" in and out, as a "
"\"out-of-phase\" time-traveling sync effect."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:575
msgid ""
"In this fun little noodle we make all the reds become green, and all the "
"green both Red and Blue, and remove Blue from the image completely. Very "
"cute. Very fun."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:581
msgid "Separate/Combine HSVA Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:585
msgid "Separate HSVA node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:588
msgid ""
"This node separates an image into image maps for the hue, saturation, value "
"and alpha channels."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:590
msgid ""
"Use and manipulate the separated channels for different purposes; i.e. to "
"achieve some compositing/color adjustment result. For example, you could "
"expand the Value channel (by using the multiply node) to make all the colors"
" brighter. You could make an image more relaxed by diminishing (via the "
"divide or map value node) the Saturation channel. You could isolate a "
"specific range of colors (by clipping the Hue channel via the Colorramp "
"node) and change their color (by the Add/Subtract mix node)."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:601
msgid "Separate/Combine YUVA Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:605
msgid "Separate YUVA node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:608
msgid ""
"This node converts an RGBA image to YUVA color space, then splits each "
"channel out to its own output so that they can be manipulated independently."
" Note that U and V values range from -0.5 to +0.5."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:615
msgid "Combine YUVA node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:618
msgid ""
"Combines the channels back into a composite image. If you do not connect any"
" input socket, you can set a default value for the whole image for that "
"channel using the numeric controls shown."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:623
msgid "Separate/Combine YCbCrA Node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:627
msgid "Separate YCbCrA node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:630
msgid ""
"This node converts an RGBA image to YCbCrA color space, then splits each "
"channel out to its own output so that they can be manipulated independently:"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:633
msgid "Y: Luminance, 0=black, 1=white"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:634
msgid "Cb: Chrominance Blue, 0=Blue, 1=Yellow"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:635
msgid "Cr: Chrominance Red, 0=Red, 1=Yellow"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:639
msgid ""
"If running these channels through a ColorRamp to adjust value, use the "
"Cardinal scale for accurate representation. Using the Exponential scale on "
"the luminance channel gives high-contrast effect."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:646
msgid "Combine YCbCrA node"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:649
msgid ""
"So, I kinda think you get the idea, and I was trying to think of some other "
"creative way to write down the same thing, but I can't. So, you'll have to "
"figure this node out on your own."
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:655
msgid "Alpha Convert"
msgstr ""

#: ../../manual/composite_nodes/types/convertor.rst:657
msgid "TODO"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:7
msgid "Composite Distort Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:9
msgid ""
"These nodes distort the image in some fashion, operating either uniformly on"
" the image, or by using a mask to vary the effect over the image."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:14
msgid "Translate Node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:18
msgid "Translate node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:21
msgid ""
"The translate node translates (moves) an image by the specified amounts in "
"the X and Y directions. X and Y are in pixels, and can be positive or "
"negative. To shift an image up and to the left, for example, you would "
"specify a negative X offset and a positive Y."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:26
msgid ""
"Use this node to position an image into the final composite image. Usually, "
"the output of this node is routed to an AlphaOver or Mix node to mix it with"
" a base image. In the example below, the RenderLayer input from one scene "
"(box) is translated over to the left (a negative X translation) and "
"alphaovered with a Hello scene RenderLayer input"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:36
msgid "Example: Using the Translate Node to Roll Credits"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:38
msgid ""
"At the end of your fantastic animation, you'll want to give credit where "
"credit is due. This is called rolling the credits and you see the names of "
"everyone involved scroll up over a background image or sequence. The mini-"
"map below shows an example of how to roll credits using the Translate node."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:48
msgid "Using the Translate Node to Roll Credits"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:51
msgid ""
"In this node map, the RenderLayer input has a list of the people involved "
"and is 150 pixels high; it is the image input into the Translate Node. The Y"
" value (vertical) offset of the Translate node comes from a scaled time "
"factor that varies from -150 to 150 over 30 frames. The Translated image is "
"overlaid on top of a background swirl image. So, over the course of 30 "
"frames, the Translate node shifts the image from down by 150 pixels (off the"
" bottom of the screen), up through and overlaid on top of the swirl, and "
"finally off the screen to the top. These frames are generated when the "
"Render Animation buttons are set and Anim is pressed. Right now, frame 21 is"
" showing Moe and Curly, and Larry has scrolled off the screen."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:62
msgid "Alpha channel"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:64
msgid ""
"Be sure to save your credits image in a format that supports an alpha "
"channel, such as PNG, so that the AlphaOver node can overlay it on the "
"background and let the background show through."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:67
msgid ""
"You *could* have parented and animated all of the text to roll up past your "
"camera, but rendering would have taken forever. Using the translate node is "
"much faster to composite, and more flexible. To add someone to the list, "
"simply change the credits image and re-animate. Since it is simple image "
"manipulation, Blender is blazingly fast at regenerating your credits. "
"Similarly, changing the background is rock simple as well; simply load up a "
"different background image and re-Animate."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:76
msgid "Example: Moving a Matte"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:78
msgid ""
"In some 2D and 3D animations and movies, a matte painting is used as the "
"background. In most scenes it is still, however you can easily move it using"
" the Translate node. Mattes are huge; the example used below is actually "
"1440x600 pixels, even though the scene being rendered is for TV. This "
"oversizing gives us room to move the matte around. The example noodle below "
"introduces a dancing \"Hello!\" from stage right in frames 1-30. As the "
"\"Hello\" reaches center stage, we fake a camera move by moving the matte to"
" the left, which makes it look like the \"Hello!\" is still moving as the "
"camera moves with it."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:90
msgid "Moving a Matte in back of a moving Animation (frame 60)"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:93
msgid ""
"Use the Map Value node to scale the X (left to right) offsets that feed the "
"Translate node. Note that *offsets* are used to position the dancing "
"\"Hello!\" down to look like it is walking along the street (in the render "
"scene, it is centered on camera and just dances in place). The matte is "
"adjusted up to fake a camera height of an observer, bringing the horizon up."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:101
msgid "Example: Shake, Rattle and Roll"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:103
msgid ""
"A real world effect is the shaking of the camera. BOOM! We expect to feel "
"the impact and see it rock our world. In our virtual CG world, though, we "
"are in the vaccuum of space. So, we have to fake a camera being shook. There"
" are two points in the development cycle to do this: at *Render-Scene* time,"
" and at *Composite* time."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:109
msgid ""
"At *Render-Scene* time, the modeler would introduce an Ipo curve and "
"keyframes that rotate and/or move the camera for a short amount of time. The"
" advantage to render-scene shake is that the artist handles it and the "
"editor does not have to worry about it; one less thing to do thank goodness."
" The disadvantage is that the artist may only be modeling the actors, and "
"not the background scenery, props, or matte, so any shake they introduce "
"does not transfer to the set, props, or backdrop. Therefore, it is best to "
"introduce camera shake after all scenes have been rendered and assembled and"
" when they are being composited."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:119
msgid ""
"There are two aspects to being bumped, or tripping over the tripod, or "
"having an explosion go off next to you, or an airplane have a near miss as "
"it flies by, or throwing up on a long sea voyage, or surviving an "
"earthquake: *camera motion* and *image blur* (I know you were thinking "
"expletives and changing your underpants, but this is about compositing)."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:126
msgid ""
"**Camera Motion** happens because the camera physically gets moved; but its "
"mass and its tripod also acts as a dampening device, softening out and "
"absorbing the initial bump. The cameraman also acts as a dampener, and also "
"as a corrector, trying to get the camera back to where it was pointed "
"originally."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:128
msgid ""
"There can be quite a delay between the shock and the correction; for "
"example, a lone actor/cameraman may trip on the tripod coming out from "
"behind the camera, come into frame, realize the camera is off, and then come"
" back to correct it. It all depends on the artistic effect and story you "
"want to convey."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:133
msgid ""
"The *image blur* comes into play because the shake happens so rapidly that "
"the image is blurred in the direction of the shake. However, the blur is "
"more when the camera is being pushed back into position, and less when the "
"camera is at the extreme of its deflection, since it is decelerating at the "
"apex of its movement. Like motion, blur is the most during the initial "
"shock, and less as things slow down and get under control. Also, the camera "
"may go out of focus and come back into focus at the end of the shake."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:141
msgid ""
"To use Blender nodes to mimic Camera Motion, use the noodle shown below. The"
" noodle has a Blur group on top that feeds a Translate group below it."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:147
msgid "SFX: Camera Shake"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:150
msgid ""
"In the above example, we use a Time curve that mimics the intensity and "
"duration of a typical BOOM!. In this case, both curves have four peaks "
"within a 16-frame period to mimic a BOOM! (in fact one curve was constructed"
" and then duplicated to make the other, to ensure that the bulk of both "
"curves was exactly the same). Notice how the curve dampens (decreases in "
"magnitude as time progresses) as discussed above. Notice how the curve slows"
" down (increasing period) to mimic the cameraman getting it back under "
"control. Notice that the curve is sinusoidal to mimic over-correction and "
"vibration."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:160
msgid ""
"BOOM! to the Left: The translate curve starts at 0.5. Maximum deflection up "
"is fully a half, yet down is only a quarter. This offset mimics a BOOM! off "
"to our left, since the camera shakes more to the right, away from the BOOM!"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:164
msgid ""
"Motion and Blur are the same but different: Notice that the two curves are "
"identical except for the highlighted start and end dots; we want zero blur "
"and zero offsets before and after the shake, but minimum blur when there is "
"maximum translate. The two Map Value node settings are different to achieve "
"this; the math is left to the reader."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:170
msgid ""
"Use this Blender noodle to mimic camera shake. The amount of shake is set by"
" the *Size* values, and the blur should be proportional to the amount and "
"direction of motion (predominantly X in this example). Use the Time start "
"and end to vary the duration of the shake; ten seconds for an earthquake, "
"one minute for a ship rolling in the seas, a half second as an F-14 flies by"
" and takes your ear off. *Author's note: I noticed cool camera shakes while "
"watching the Halo 3 previews.*"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:181
msgid "Rotate Node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:185
msgid "Rotate node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:188
msgid ""
"This node rotates an image. Positive values rotate clockwise and negative "
"ones counterclockwise."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:193
msgid "Scale Node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:197
msgid "Scale node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:200
msgid ""
"This node scales the size of an image. Scaling can be either absolute or "
"relative. If Absolute toggle is on, you can define the size of an image by "
"using real pixel values. In relative mode percents are used."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:204
msgid ""
"For instance X: 0.50 and Y: 0. 50 would produce image which width and height"
" would be half of what they used to be. When expanding an image greatly, you"
" might want to blur it somewhat to remove the square corners that might "
"result. Unless of course you want that effect; in which case, ignore what I "
"just said."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:210
msgid ""
"Use this node to match image sizes. Most nodes produce an image that is the "
"same size as the image input into their top image socket. So, if you want to"
" uniformly combine two images of different size, you must scale the second "
"to match the resolution of the first."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:217
msgid "Flip Node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:221
msgid "Flip node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:224
msgid ""
"This node flips an image at defined axis that can be either X or Y. Also "
"flipping can be done on both X and Y axis' simultaneously."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:227
msgid ""
"You can use this node to just flip or use it as a part of mirror setting. "
"Mix half of the image to be mirrored with its flipped version to produce "
"mirrored image."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:232
msgid "Displace Node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:234
msgid ""
"Ever look down the road on a hot summer day? See how the image is distorted "
"by the hot air? That's because the light is being bent by the air; the air "
"itself is acting like a lens. This fancy little node does the same thing; it"
" moves an input image's pixels based on an input vector mask (the vector "
"mask mimics the effect of the hot air)."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:240
msgid ""
"This can be useful for a lot of things, like hot air distortion, quick-and-"
"dirty refraction, compositing live footage behind refracting objects like "
"looking through bent glass or glass blocks, and more! Remember what HAL saw "
"in 2001:Space Odyssey; that distorted wide-angle lens? Yup, this node can "
"take a flat image and apply a mask to produce that image."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:246
msgid "The amount of displacement in the X and Y directions is determined by"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:248
msgid "The value of the mask's channels:"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:249
msgid "The scaling of the mask's channels"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:251
msgid ""
"The (red) channel 1's value determines displacement along the positive or "
"negative X axis. The (green) channel 2's value determines displacement along"
" the positive or negative Y axis."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:254
msgid ""
"If both the channels' values are equal (i.e. a greyscale image), the input "
"image will be displaced equally in both X and Y directions, and also "
"according to the X scale and Y scale buttons. These scale button act as "
"multipliers to increase or decrease the strength of the displacement along "
"their respective axes. They need to be set to non-zero values for the node "
"to have any effect."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:260
msgid ""
"Because of this, you can use the displace node in two ways, with a greyscale"
" mask (easy to paint, or take from a procedural texture), or with a vector "
"channel or RGB image, such as a normal pass, which will displace the pixels "
"based on the normal direction."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:271
msgid "Music Video Distortion Example Using Displace"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:274
msgid ""
"In this example, she's singing about dreams of the future. So, to represent "
"this, we use a moving clouds texture (shot just by rendering the cloud "
"texture on a moving plane) as the displacement map. Now, the colors in a "
"black and white image go from zero (black) to one (white), which, if fed "
"directly without scaling would only shift the pixels one position. So, we "
"scale their effect in the X and Y direction."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:281
msgid ""
"Upon reviewing it, sometimes stretching in both the X and Y direction made "
"her face look fat, and we all can guess her reaction to looking fat on "
"camera. SO, we scale it only half as much in the X so her face looks longer "
"and thinner. Now, a single image does not do justice to the animation effect"
" as the cloud moves, and this simple noodle does not reflect using blur and "
"overlays to enhance (and complicate) the effect, but this is the core."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:288
msgid ""
"Photos courtesy of Becca, no rights reserved. See also some movies of this "
"node in action, made by the wizard programmer himself, by following this "
"`external link <http://lists.blender.org/pipermail/bf-blender-"
"cvs/2006-December/008773.html>`__"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:294
msgid "Map UV Node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:298
msgid ""
"So, I think we all agree that the problem is...we just don't know what we "
"want. The same is true for directors. Despite our best job texturing our "
"models, in post production, inevitably the director changes their mind. "
"\"Man, I really wish he looked more ragged. Who did makeup, anyway?\" comes "
"the remark. While you can do quite a bit of coloring in post production, "
"there are limits. Well, now this little node comes along and you have the "
"power to **re-texture your objects** *after* **they have been rendered**. "
"Yes, you read that right; it's not a typo and I'm not crazy. At least, not "
"today."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:307
msgid ""
"Using this node (and having saved the UV map in a multilayer OpenEXR format "
"image sequence), you can apply new flat image textures to all objects (or "
"individual objects if you used the very cool :doc:`ID Mask Node "
"</composite_nodes/types/convertor#id_mask_node>` to enumerate your objects) "
"in the scene."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:309
msgid ""
"Thread the new UV Texture to the Image socket, and the UV Map from the "
"rendered scene to the UV input socket. The resulting image is the input "
"image texture distorted to match the UV coordinates. That image can then be "
"overlay mixed with the original image to paint the texture on top of the "
"original. Adjust alpha and the mix factor to control how much the new "
"texture overlays the old."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:316
msgid ""
"Of course, when painting the new texture, it helps to have the UV maps for "
"the original objects in the scene, so keep those UV texture outlines around "
"even after all shooting is done."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:327
msgid "Adding a Grid UV Textures for Motion Tracking"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:330
msgid ""
"In the example to the right, we have overlaid a grid pattern on top of the "
"two Emo heads after they have been rendered. During rendering, we enabled "
"the UV layer in the RenderLayer tab (Buttons window, Render Context, "
"RenderLayer tab). Using a mix node, we mix that new UV Texture over the "
"original face. We can use this grid texture to help in any motion tracking "
"that we need to do."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:342
msgid "Adding UV Textures in Post-Production"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:345
msgid ""
"In this example, we overlay a flag on top of a cubie-type thing, and we "
"ensure that we Enable the Alpha pre-multiply button on the Mix node. The "
"flag is used as additional UV Texture on top of the grid. Other examples "
"include the possibility that we used an unauthorized product box during our "
"initial animation, and we need to substitute in a different product sponsor "
"after rendering."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:351
msgid ""
"Of course, this node does NOT give directors the power to rush pre-"
"production rendering under the guise of \"we'll fix it later\", so maybe you"
" don't want to tell them about this node. Let's keep it to ourselves for "
"now."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:357
msgid "Crop Node"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:359
msgid "The Crop Node takes an input image and crops it to a selected region."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:361
msgid "Crop Image Size"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:362
msgid ""
"When enabled, the image size is cropped to the specified region. When "
"disabled, image remains the same size, and uncropped areas become "
"transparent pixels."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:363
msgid "Relative"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:364
msgid ""
"When enabled, crop dimensions are a percentage of the image's width and "
"height. When disabled, the range of the sliders are the width and height of "
"the image in pixels."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:367
msgid "Crop Region Values"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:366
msgid ""
"These sliders define the lower, upper, left, and right borders if the crop "
"region."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:370
msgid "Lens Distortion"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:372
msgid "Use this node to simulate distortions that real camera lenses produce."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:374
msgid "Distort"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:375
msgid ""
"This creates a bulging or pinching effect from the center of the image."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:377
msgid "Dispersion"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:377
msgid ""
"This simulates chromatic aberration, where different wavelengths of light "
"refract slightly differently, creating a rainbow colored fringe."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:379
msgid "Projector"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:380
msgid ""
"Enable or disable slider projection mode. When on, distortion is only "
"applied horizontally. Disables *Jitter* and *Fit*."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:381
msgid "Jitter"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:382
msgid "Adds jitter to the distortion. Faster, but noisier."
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:386
msgid "Fit"
msgstr ""

#: ../../manual/composite_nodes/types/distort.rst:384
msgid ""
"Scales image so black areas are not visible. Only works for positive "
"distortion."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:7
msgid "Composite Filter Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:9
msgid ""
"Filters process the pixels of an image to highlight additional details or "
"perform some sort of post-processing effect on the image."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:14
msgid "Filter Node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:18
msgid "Filter node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:21
msgid ""
"The Filter node implements various common image enhancement filters. The "
"supported filters are, if not obvious, named after the mathematical genius "
"who came up with them:"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:25
msgid "Soften"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:26
msgid "Slightly blurs the image."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:27
msgid "Sharpen"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:28
msgid "Increases the contrast, especially at edges"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:29
msgid "Laplace"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:30
msgid "Softens around edges"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:31
msgid "Sobel"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:32
msgid "Creates a negative image that highlights edges"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:33
msgid "Prewitt"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:34
msgid "Tries to do Sobel one better."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:35
msgid "Kirsch"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:36
msgid ""
"Improves on the work done by those other two flunkies, giving a better "
"blending as you approach an edge."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:39
msgid "Shadow"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:38
msgid "Performs a relief emboss/bumpmap effect, darkening outside edges."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:45
msgid "The Filter node has seven modes, shown here."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:48
msgid ""
"The *Soften*, *Laplace*, *Sobel*, *Prewitt* and *Kirsch* all perform edge-"
"detection (in slightly different ways) based on vector calculus and set "
"theory equations that would fill six blackboards with gobbledy gook. "
"Recommended reading for insomniacs."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:55
msgid "Blur Node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:59
#: ../../manual/composite_nodes/types/filter.rst:147
msgid "Blur node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:62
msgid ""
"The Blur node blurs an image, using one of seven blur modes (set using the "
"upper-left popup button), and a radius defined by the X and Y number "
"buttons. By default these are set to zero, so to enable the node you must "
"set one or both to a value greater then 0. You can optionally connect a "
"value image to the Size input node, to control the blur radius with a mask. "
"The values must be mapped between 0-1 for best effect, as they will be "
"multiplied with the X and Y number button values."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:75
msgid ""
"The X and Y values are the number of pixels over which to spread the blur "
"effect."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:77
msgid ""
"The Bokeh button (only visible as Bok or Bo on some screen setups) will "
"force the blur node to use a circular blur filter.  This gives higher "
"quality results, but is slower then using a normal filter.  The Gam button "
"(for \"gamma\") makes the Blur node gamma-correct the image before blurring "
"it."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:87
msgid ""
"Blur node blur modes using 15% of image size as XY, no Bokeh/Gamma. Click "
"expand to see details"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:90
msgid ""
"The difference between them is how they handle sharp edges and smooth "
"gradients and preserve the highs and the lows. In particular (and you may "
"have to closely examine the full-resolution picture to see this):"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:94
msgid "Flat"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:95
msgid "Simply blurs everything uniformly"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:96
msgid "Tent"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:97
msgid "Preserves the high and the lows better making a linear falloff"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:98
msgid "Quadratic"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:99
msgid "CatRom keeps sharp-contrast edges crisp."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:102
msgid "Cubic, Mitch"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:101
msgid ""
"Preserve the highs but give almost a out-of-focus blur while smoothing sharp"
" edges"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:105
msgid "Directional Blur Node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:107
msgid ""
"Blurs an image in a specified direction and magnitude. Can be used to fake "
"motion blur."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:113
#: ../../manual/composite_nodes/types/filter.rst:178
msgid "Iterations"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:114
msgid ""
"Controls how may times the image is duplicated to create the blur effect. "
"Higher values give smoother results."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:115
msgid "Wrap"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:116
msgid ""
"Wraps the image on the X and Y axis to fill in areas that become transparent"
" from the blur effect."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:118
msgid "Center"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:118
msgid ""
"Sets the position where the blur center is. This makes a difference if the "
"angle, spin, and/or zoom are used."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:120
msgid "Distance"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:121
msgid "How large the blur effect is."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:123
msgid "Angle"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:123
msgid "Image is blurred at this angle from the center"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:125
msgid "Spin"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:126
msgid ""
"Rotates the image each iteration to create a spin effect, from the center "
"point."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:128
msgid "Scales the image each iteration, creating the effect of a zoom."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:134
msgid ""
"An example blend file, in fact the one used to create the image above, `is "
"available here. <http://wiki.blender.org/index.php/Media:Manual-Node-"
"Blur.blend>`__ The .blend file takes one image from the RenderLayer "
"\"Blurs\" and blurs it while offsetting it (Translate) and then combining it"
" (AlphaOver) to build up the progressive sequence of blurs. Play with the "
"Value and Multiply nodes to change the amount of blurring that each "
"algorithm does."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:143
msgid "Bilateral Blur Node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:150
msgid ""
"The bilateral blur node performs a high quality adaptive blur on the source "
"image. It can be used for various purposes like: smoothing results from "
"blenders raytraced ambient occlusion smoothing results from various unbiased"
" renderers, to fake some performance-heavy processes, like blurry "
"refractions/reflections, soft shadows, to make non-photorealistic "
"compositing effects."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:159
msgid "Inputs"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:164
msgid "Bilateral blur has 2 inputs:"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:162
msgid ""
"*Image*, for the image to be blurred. *Determinator*, which is non-"
"obligatory, and is used only if connected."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:166
msgid ""
"if only 1st input is connected, the node blurs the image depending on the "
"edges present in the source image. If the Determinator is connected, it "
"serves as the source for defining edges/borders for the blur in the image. "
"This has great advantage in case the source image is too noisy, but normals "
"in combination with zbuffer can still define exact borders/edges of objects."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:178
msgid ""
"Defines how many times the filter should perform the operation on the image."
" It practically defines the radius of blur."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:181
msgid "Color Sigma"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:181
msgid ""
"Defines the threshold for which color differences in the image should be "
"taken as edges."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:185
msgid "Space sigma"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:184
msgid "A fine-tuning variable for blur radius."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:194
msgid "Bilateral smoothed buffered shadow"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:201
msgid "Bilateral smoothed AO"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:208
msgid "Bilateral faked blurry refraction+smoothed reytraced soft shadow"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:212
msgid "Vector (Motion) Blur Node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:216
msgid "Vector Blur node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:219
msgid ""
"Motion blur is the effect of objects moving so fast they blur. Because CG "
"animations work by rendering individual frames, they have no real knowledge "
"of what was where in the last frame, and where it is now."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:223
msgid ""
"In Blender, there are two ways to produce motion blur.  The first method "
"(which produces the most correct results) works by rendering a single frame "
"up to 16 times with slight time offsets, then accumlating these images "
"together; this is called Motion Blur and is activated on the Render panel.  "
"The second (and much faster) method is the Compositor node Vector Blur."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:230
msgid "To use, connect the appropriate passes from a Render Result node."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:234
msgid ""
"Make sure to enable the Speed (called Vec) pass in the Render Layers panel "
"for the render layer you wish to perform motion blur on."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:237
msgid ""
"Maximum Speed: Because of the way vector blur works, it can produce streaks,"
" lines and other artifacts.  These mostly come from pixels moving too fast; "
"to combat these problems, the filter has minimum and maximum speed settings,"
" which can be used to limit which pixels get blurred (e.g. if a pixel is "
"moving really, really fast but you have maximum speed set to a moderate "
"amount, it won't get blurred)."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:243
msgid ""
"Minimum Speed: Especially when the camera itself moves, the mask created by "
"the vectorblur node can become the entire image. A very simple solution is "
"to introduce a small threshold for moving pixels, which can efficiently "
"separate the hardly-moving pixels from the moving ones, and thus create nice"
" looking masks. You can find this new option as 'min speed'. This minimum "
"speed is in pixel units. A value of just 3 will already clearly separate the"
" background from foreground."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:251
msgid "Hint"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:253
msgid ""
"You can make vector blur results a little smoother by passing the Speed pass"
" through a blur node (but note that this can make strange results, so it's "
"only really appropriate for still images with lots of motion blur)."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:259
msgid ""
"An in-depth look at how to use the Vector Blur node :doc:`can be found here "
"</ls/composite_nodes/types/filter/vector_blur>`."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:261
msgid ""
"As far as we know, this node represents a `new approach to calculating "
"motion blur <http://www.blender.org/development/release-logs/blender-242"
"/vector-blur/>`__. Use vector blur in compositing with confidence instead of"
" motion blur. In face, when compositing images, it is necessary to use "
"vector blur since there isn't \"real\" motion. In this `example blend file "
"<http://download.blender.org/demo/test/driven_hand_blur.blend>`__, you will "
"find a rigged hand reaching down to pick up a ball. Based on how the hand is"
" moving (those vectors), the image is blurred in that direction. The fingers"
" closest to the camera (the least Z value) are blurred more, and those "
"farther away (the forearm) is blurred the least."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:272
msgid "Known Bugs"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:274
msgid ""
"FIXME(Template Unsupported: Version; {{Version|2.44}} ) Does not work when "
"reading from a multilayer OpenEXR sequence set"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:281
msgid "Dilate/Erode Node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:285
msgid "Dilate/Erode node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:288
msgid ""
"This node blurs individual color channels. The color channel (or a black and"
" white image) is connected to the *Mask* input socket, and the *Distance* is"
" set manually (by clicking on the arrows or the value) or automatically from"
" a value node or a time-and-map-value noodle. A positive value of *Distance*"
" expands the influence of a pixel on its surrounding pixels, thus blurring "
"that color outward. A negative value erodes its influence, thus increases "
"the constrast of that pixel relative to its surrounding pixels, thus "
"sharpening it relative to surrounding pixels of the same color."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:305
msgid "Magenta tinge"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:308
msgid ""
"In the above example image, we wanted to take the rather boring array of "
"ball bearings and spruce it up; make it hot, baby. So, we dilated the red "
"and eroded the green, leaving the blue alone. If we had dilated both red and"
" green...(hint: red and green make yellow). The amount of influence is "
"increased by increasing the *Distance* values. `Blend file available here. "
"<http://wiki.blender.org/uploads/5/51/Derotest.blend>`__"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:317
msgid "Defocus"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:319
msgid ""
"This single node can be used to emulate depth of field using a "
"postprocessing method. It can also be used to blur the image in other ways, "
"not necessarily based on 'depth' by connecting something other than a "
"Zbuffer. In essence, this node blurs areas of an image based on the input "
"zbuffer map/mask."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:326
msgid "Camera Settings"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:330
msgid "DofDist setting for the camera."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:333
msgid ""
"The *Defocus* node uses the actual camera data in your scene if supplied by "
"a *RenderLayer* node."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:336
msgid ""
"To set the point of focus, the camera now has a *Distance* parameter, which "
"is shorthand for Depth of Field Distance. Use this camera parameter to set "
"the focal plane of the camera (objects Depth of Field Distance away from the"
" camera are in focus). Set *Distance* in the main *Camera* edit panel; the "
"button is right below the *Depth of Field*."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:343
msgid ""
"To make the focal point visible, enable the camera *Limits* option, the "
"focal point is then visible as a yellow cross along the view direction of "
"the camera."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:348
msgid "Node Inputs"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:352
msgid "Defocus node"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:355
msgid ""
"The node requires two inputs, an image and a zbuffer, the latter does not "
"need to be an actual zbuffer, but can also be another (grayscale) image used"
" as mask, or a single value input, for instance from a time node, to vary "
"the effect over time."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:362
msgid "Node Setting"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:364
msgid "The settings for this node are:"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:370
msgid "Bokeh Type menu"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:367
msgid ""
"Here you set the number of iris blades of the virtual camera's diaphragm. It"
" can be set to emulate a perfect circle (*Disk*) or it can be set to have 3 "
"(*Triangle*), 4 (*Square*), 5 (*Pentagon*), 6 (*Hexagon*), 7 (*Heptagon*) or"
" 8 blades (*Octagon*). The reason it does not go any higher than 8 is that "
"from that point on the result tends to be indistinguishable from a *Disk* "
"shape anyway."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:374
msgid "Rotate"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:373
msgid ""
"This button is not visible if the *Bokeh Type* is set to *Disk*. It can be "
"used to add an additional rotation offset to the Bokeh shape. The value is "
"the angle in degrees."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:380
msgid "Gamma Correct"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:377
msgid ""
"Exactly the same as the *Gamma* option in Blender's general *Blur* node (see"
" FIXME(TODO: Internal Link; [[#Blur Node|Blur Node]])). It can be useful to "
"further brighten out of focus parts in the image, accentuating the Bokeh "
"effect."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:384
msgid "Defocus node using Z-Buffer"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:393
msgid "fStop"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:388
msgid ""
"This is the most important parameter to control the amount of focal blur: it"
" simulates the aperture *f* of a real lens(' iris) - without modifying the "
"luminosity of the picture, however! As in a real camera, the *smaller* this "
"number is, the more-open the lens iris is, and the *shallower* the depth-of-"
"field will be. The default value 128 is assumed to be infinity: everything "
"is in perfect focus. Half the value will double the amount of blur. This "
"button is not available if *No zbuffer* is enabled."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:402
msgid "Maxblur"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:396
msgid ""
"Use this to limit the amount of blur of the most out of focus parts of the "
"image. The value is the maximum blur radius allowed. This can be useful "
"since the actual blur process can sometimes be very slow. (The more blur, "
"the slower it gets.) So, setting this value can help bring down processing "
"times, like for instance when the world background is visible, which in "
"general tends to be the point of maximum blur (not always true, objects very"
" close to the lens might be blurred even more). The default value of 0 means"
" there is no limit to the maximum blur amount."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:414
msgid "BThreshold"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:405
msgid ""
"The defocus node is not perfect: some artifacts may occur. One such example "
"is in-focus objects against a blurred background, which have a tendency to "
"bleed into the edges of the sharp object. The worst-case scenario is an "
"object in-focus against the very distant world background: the differences "
"in distance are very large and the result can look quite bad. The node tries"
" to prevent this from occurring by testing that the blur difference between "
"pixels is not too large, the value set here controls how large that blur "
"difference may be to consider it 'safe.' This is all probably quite "
"confusing, and fortunately, in general, there is no need to change the "
"default setting of 1. Only try changing it if you experience problems around"
" any in-focus object."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:424
#: ../../manual/composite_nodes/types/filter.rst:478
msgid "Preview"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:417
msgid ""
"As already mentioned, processing can take a long time. So to help make "
"editing parameters somewhat 'interactive', there is a preview mode which you"
" can enable with this button. Preview mode will render the result using a "
"limited amount of (quasi)random samples, which is a *lot* faster than the "
"'perfect' mode used otherwise. The sampling mode also tends to produce "
"grainy, noisy pictures (though the more samples you use, the less noisy the "
"result). This option is on by default. Play around with the other parameters"
" until you are happy with the results, and only then disable the preview "
"mode for the final render."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:429
msgid "Samples"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:427
msgid ""
"Only visible when *Preview* is set. Sets the amount of samples to use to "
"sample the image. The higher, the smoother the image, but also the longer "
"the processing time. For preview, the default of 16 samples should be "
"sufficient and is also the fastest."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:446
msgid "No zbuffer"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:432
msgid ""
"Sometimes you might want to have more control to blur the image. For "
"instance, you may want to only blur one object while leaving everything else"
" alone (or the other way around), or you want to blur the whole image "
"uniformly all at once. The node therefore allows you to use something other "
"than an actual zbuffer as the *Z* input. For instance, you could connect an "
"image node and use a grayscale image where the color designates how much to "
"blur the image at that point, where white is maximum blur and black is no "
"blur. Or, you could use a Time node to uniformly blur the image, where the "
"time value controls the maximum blur for that frame. It may also be used to "
"obtain a possibly slightly-better DoF blur, by using a fake depth shaded "
"image instead of a zbuffer. (A typical method to create the fake depth "
"shaded image is by using a linear blend texture for all objects in the scene"
" or by using the 'fog/mist' fake depth shading method.) This also has the "
"advantage that the fake depth image can have anti-aliasing, which is not "
"possible with a real zbuffer. *No zbuffer* will be enabled automatically "
"whenever you connect a node that is not image based (e.g. time node/value "
"node/etc)."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:457
msgid "Zscale"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:449
msgid ""
"Only visible when *No zbuffer* enabled. When *No zbuffer* is used, the input"
" is used directly to control the blur radius. And since usually the value of"
" a texture is only in the numeric range 0.0 to 1.0, its range is too narrow "
"to control the blur properly. This parameter can be used to expand the range"
" of the input (or for that matter, narrow it as well, by setting it to a "
"value less than one). So for *No zbuffer*, this parameter therefore then "
"becomes the main blur control (similar to *fStop* when you *do* use a "
"zbuffer)."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:467
msgid ""
"In this `blend file example "
"<http://wiki.blender.org/uploads/7/79/Doftest.blend>`__, the ball array "
"image is blurred as if it was taken by a camera with a f-stop of 2.8 "
"resulting in a farily narrow depth of field centered on 7.5 blender units "
"from the camera. As the balls receed into the distance, they get blurrier."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:474
msgid "Hints"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:477
msgid ""
"In general, use preview mode, change parameters to your liking, only then "
"disable preview mode for the final render. This node is compute intensive, "
"so watch your console window, and it will give you status as it computes "
"each render scan line."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:481
msgid "Edge Artifacts"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:481
msgid ""
"For minimum artifacts, try to setup your scene such that differences in "
"distances between two objects that may visibly overlap at some point are not"
" too large."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:499
msgid "\"Focus Pull\""
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:484
msgid ""
"Keep in mind that this is not 'real' DoF, only a post-processing simulation."
" Some things cannot be done which would be no problem for real DoF at all. A"
" typical example is a scene with some object very close to the camera, and "
"the camera focusing on some point far behind it. In the real world, using "
"shallow depth of field, it is not impossible for nearby objects to become "
"completely invisible, in effect allowing the camera to see 'behind' it. "
"Hollywood cinematographers use this visual characteristic to good effect to "
"achieve the popular \"focus pull\" effect, where the focus shifts from a "
"nearby to a distant object, such that the \"other\" object all but "
"disappears.  Well, this is simply not possible to do with the current post-"
"processing method in a single pass. If you really want to achieve this "
"effect, quite satisfactorily, here's how:"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:495
msgid ""
"Split up your scene into \"nearby\" and \"far\" objects, and render them in "
"two passes."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:496
msgid ""
"Now, combine the two the two results, each with their own \"defocus\" nodes "
"driven by the same Time node, but with one of them inverted. (e.g. using a "
"\"Map Value\" node with a Size of -1.)  As the defocus of one increases, the"
" defocus on the other decreases at the same rate, creating a smooth "
"transition."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:513
msgid "Aliasing at Low f-Stop Values"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:502
msgid ""
"At very low values, less than 5, the node will start to remove any "
"oversampling and bring the objects at DoFDist very sharply into focus. If "
"the object is against a constrasting background, this may lead to visible "
"stairstepping (aliasing) which OSA is designed to avoid. If you run into "
"this problem:"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:507
msgid ""
"Do your own OSA by rendering at twice the intended size and then scaling "
"down, so that adjacent pixels are blurred togther"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:509
msgid "Use the blur node with a setting of 2 for x and y"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:510
msgid ""
"Set DoFDist off by a little, so that the object in focus is blurred by the "
"tiniest bit."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:511
msgid ""
"Use a higher f-Stop, which will start the blur, and then use the Z socket to"
" a Map Value to a Blur node to enhance the blur effect."
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:513
msgid "Rearrange the objects in your scene to use a lower-contrast background"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:520
msgid "No ZBuffer"
msgstr ""

#: ../../manual/composite_nodes/types/filter.rst:516
msgid ""
"A final word of warning, since there is no way to detect if an actual "
"zbuffer is connected to the node, be VERY careful with the *No ZBuffer* "
"switch. If the *Zscale* value happens to be large, and you forget to set it "
"back to some low value, the values may suddenly be interpreted as huge blur-"
"radius values that will cause processing times to explode."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:8
msgid "Composite Input Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:10
msgid "Input nodes *produce* information from some source."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:12
msgid "For instance, an input could be:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:14
msgid "taken directly from the active camera in a selected scene,"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:15
msgid "from a JPG, PNG, etc. file as a static picture,"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:16
msgid "a movie clip (such as an animation sequence or home movie), or"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:17
msgid "just a color."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:19
msgid ""
"These nodes generate the information that feeds other nodes.  As such, they "
"have no input-connectors; only outputs."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:24
#: ../../manual/composite_nodes/types/input.rst:35
msgid "Render Layers Node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:26
#: ../../manual/composite_nodes/types/input.rst:195
#: ../../manual/composite_nodes/types/input.rst:531
#: ../../manual/composite_nodes/types/input.rst:585
#: ../../manual/composite_nodes/types/input.rst:602
#: ../../manual/composite_nodes/types/input.rst:632
msgid "Reference"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:38
msgid ""
"This node is the starting place to getting a picture of your scene into the "
"compositing node map."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:41
msgid ""
"This node inputs an image from a scene within your blend file. Select the "
"scene and the active render layer from the yellow selection list at the "
"bottom of the node. Blender uses the active camera for that scene to create "
"an image of the objects specified in the :doc:`RenderLayer "
"</render/post_process/layers>`."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:46
msgid "The *Image* is input into the map, along with the following data:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:48
msgid "*Alpha* (transparency) mask"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:50
msgid ""
"Depending on the Renderlayer passes that are enabled, other sockets are "
"available. By default the Z is enabled:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:53
msgid "*Z* depth map (how far away each pixel is from the camera)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:55
msgid "The example shows that two other passes are enabled:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:57
msgid "*Normal* vector set (how light bounces off the surface)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:58
msgid ""
"*Speed* vector set (how fast an object is moving from one frame to the next)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:60
msgid ""
"Use the re-render button (Small landscape icon - to the right of the "
"Renderlayer name) to re-render the scene and refresh the image and map."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:63
msgid ""
"You may recall that a .blend file may contain many scenes. The Renderlayer "
"node can pick up the scene info from any available scene by selecting the "
"scene from the left-hand selector. If that *other* scene also uses the "
"compositor and/or sequencer, you should note that the scene information "
"taken is the raw information (pre-compositing and pre-sequencing). If you "
"wish to use composited information from another scene, you will have to "
"render that scene to a multilayer OpenEXR frameset as an intermediate file "
"store, and then use the Image input node instead."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:74
msgid "Using the Alpha Socket"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:76
msgid ""
"Using the *Alpha* output socket is crucial in overlaying images on top of "
"one another and letting a background image \"show through\" the image in "
"front of it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:79
msgid ""
"In a Blender scene, your objects are floating out there in virtual space. "
"While some objects are in front of one another (Z depth), there is no "
"ultimate background. Your world settings can give you the illusion of a "
"horizon, but it's just that: an illusion. Further, some objects are semi-"
"transparent; this is called having an Alpha value. A semi-transparent object"
" allows light (and any background image) to pass through it to the camera. "
"When you render an image, Blender puts out, in addition to a pretty image, a"
" map of what solid objects actually are there, and where infinity is, and a "
"map of the alpha values for semi-transparent objects. You can see this map "
"by mapping it to a blue screen:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:92
msgid "Viewing the Alpha values"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:95
msgid ""
"In the little node map above, we have connected the Alpha output socket of "
"the RenderLayer node to a Map Value node (explained later, but basically "
"this node takes a set of values and maps them to something we can use). The "
"Color Ramp node (also explained later in detail) takes each value and maps "
"it to a color that we can see with our eyes. Finally, the output of the "
"Color Ramp is output to a Composite viewer to show you, our dear reader, a "
"picture of the Alpha  values. Notice that we have set up the map so that "
"things that are perfectly solid (opaque) are white, and things that are "
"perfectly transparent (or where there is nothing) are blue."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:108
msgid "Optional Sockets"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:110
msgid ""
"For any of the optional sockets to appear on the node, you MUST have the "
"corresponding pass enabled. In order for the output socket on the "
"RenderLayer node to show, that pass must be enabled in the RenderLayer panel"
" in the Buttons window. For example, in order to be able to have the Shadow "
"socket show up on the RenderLayer input node, you must have the \"Shad\" "
"button enabled in the Buttons window, Scene Render buttons, Renderlayer "
"panel. See the RenderLayer tab (Buttons window, Output frame, Render Layers "
"tab, Passes selector buttons) for Blender to put out the values "
"corresponding to the socket."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:119
msgid ""
"For a simple scene, a monkey and her bouncy ball, the following picture "
"expertly provides a great example of what each pass looks like:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:128
msgid "The available sockets are:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:130
msgid "Z: distance away from the camera, in Blender Units"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:131
msgid "Normal (Nor): How the color is affected by light coming from the side"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:132
msgid "UV: how the image is distorted by the UV mapping"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:133
msgid "Speed (Vec): How fast the object is moving, and in what direction"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:134
msgid "Color (Col): the RGB values that color the image that you see"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:135
msgid "Diffuse: the softening of colors as they diffuse through the materials"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:136
msgid ""
"Specular: the degree of shininess added to colors as they shine in the light"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:137
msgid "Shadow: shadows cast by objects onto other objects"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:138
msgid "AO: how the colors are affected by Ambient Occlusion in the world"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:139
msgid ""
"Reflect (Ref): for mirror type objects, the colors they reflect and are thus"
" not part of their basic material"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:140
msgid "Refract: how colors are bent by passing through transparent objects"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:141
msgid ""
"Radio (Radiosity): colors that are emitted by other objects and cast onto "
"the scene"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:142
msgid ""
"IndexOB: a numeric ordinal (index) of each object in the scene, as seen by "
"the camera."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:146
msgid "Using the Z value Socket"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:148
msgid ""
"Using the *Z* output socket is crucial in producing realistic images, since "
"items farther away are blurrier (but more on that later)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:151
msgid ""
"Imagine a camera hovering over an X-Y plane. When looking through the camera"
" at the plane, Y is up/down and X is left/right, just like when you are "
"looking at a graph. The camera is up in the air though, so it has a Z value "
"from the X-Y plane, and, from the perspective of the camera, the plane, in "
"fact all the objects that the camera can see, have a Z value as a distance "
"that they are away from it. In addition to the pretty colors of an image, a "
"RenderLayer input node also generates a Z value map. This map is a whole "
"bunch of numbers that specify how far away each pixel in the image is away "
"from the camera. You can see this map by translating it into colors, or "
"shades of gray:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:165
msgid "Viewing the Z values"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:168
msgid ""
"In the little node map above, we have connected the Z output socket of the "
"RenderLayer node to a Map Value node (explained later). This node takes a "
"set of values and maps them to something we can use. The Color Ramp node "
"(also explained later in detail) takes each value and maps it to a shade of "
"gray that we can see with our eyes. Finally, the output of the colorramp is "
"output to a Composite viewer to show you, our dear reader, a picture of the "
"Z values. Notice that we have set up the Map Value node so that things "
"closer to the camera appear blacker (think: black is 0, less Z means a "
"smaller number) and pixels/items farther away have an increasing Z distance "
"and therefore get whiter. We chose a Size value of 0.05 to see Z values "
"ranging from 0 to 20 (20 is 1/0.05)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:181
msgid "Using the Speed Socket"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:183
msgid ""
"Even though things may be animated in our scene, a single image or frame "
"from the animation does not portray any motion; the image from the frame is "
"simply where things are at that particular time. However, from the *Render "
"Layers* node, Blender puts out a vector set that says how particular pixels "
"are moving, or will move, to the next frame. You use this socket to create a"
" :doc:`blurring effect. </ls/composite_nodes/types/filter/vector_blur>`."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:193
#: ../../manual/composite_nodes/types/input.rst:204
msgid "Image node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:207
msgid ""
"The *Image* node injects any image :doc:`format that is supported by Blender"
" </render/output>`. Besides inputting the actual image, this node can also "
"input *Alpha* and depth (*Z*) values if the image has them. If the image is "
"a MultiLayer format, all saved render passes are input. Use this node to "
"input:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:211
msgid "A single image from a file (such as a JPG picture)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:212
msgid "Part or all of an animation sequence (such as the 30th to 60th frame)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:213
msgid "Part or all of a movie clip (such as an AVI file)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:214
msgid ""
"the image that is currently in the UV/Image Editor (and possibly being "
"painted)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:215
msgid "an image that was loaded in the UV/Image Editor"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:217
msgid ""
"Animated image sequences or video files can also be used. See FIXME(TODO: "
"Internal Link; [[#Animations|Animations]] ) below."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:222
msgid ""
"To select an image file or generated image from the UV/Image Editor, click "
"on the small arrow selector button to the left of the name and pick an "
"existing image (e.g. loaded in the UV editor or elsewhere) or click on *LOAD"
" NEW* to select a file from your hard disk via a file-browser. These images "
"can be e.g. previously rendered images, matte paintings, a picture of your "
"cat, whatever. Blender really doesn't care."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:229
msgid ""
"If the image is part of a sequence, manually click the Image Type selector "
"to the right of the name, and select *Sequence*. Additional controls will "
"allow you to define how much of the sequence to pull in (see Animations "
"below). If the file is a video file, these controls will automatically "
"appear."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:236
msgid "Image Channels"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:238
msgid ""
"When the image is loaded, the available channels will be shown as sockets on"
" the node. As a minimum, the Image, Alpha, and Z channels are made "
"available. The picture may or may not have an alpha (transparency) and/or Z "
"(depth) channel, depending on the format. If the image format does not "
"support A and/or Z, default values are supplied (1.0 for A, 0.0 for Z)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:248
msgid "Alpha/Transparency Channel"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:245
msgid ""
"If a transparency channel is detected, the *Alpha* output socket will supply"
" it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:246
msgid ""
"If it does not have an Alpha channel (e.g. JPG images), Blender will supply "
"one, setting the whole image to completely opaque (an Alpha of 1.00, which "
"will show in a *Viewer* node as white - if connected to the *Image* input "
"socket)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:255
msgid "Z/depth Channel"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:251
msgid ""
"If a Z (depth) channel is detected, the *Z* output socket will supply it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:252
msgid ""
"If it does not have a Z channel (e.g. JPG or PNG images), Blender will "
"supply one, setting the whole image to be at the camera (a depth of 0.00). "
"To view the Z-depth channel, use the Map Value to ColorRamp noodle given "
"above in the Render Layer input node, in the FIXME(TODO: Internal Link; "
"[[#Using the Z value Socket|{{Literal|Render Layer}} input node]])."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:257
msgid "Formats"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:259
msgid ""
"Blender supports many image formats. Currently only the OpenEXR image format"
" stores RGB (color), A (alpha), and Z (depth) buffer information in a single"
" file, if enabled."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:265
msgid "Saving/Retrieving Render Passes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:269
msgid ""
"Blender can save the individual Render Layers and specific passes in a "
"MultiLayer file format, which is an extension of the OpenEXR format. In this"
" example, we are reading in frames 50 to 100 of a RenderLayer that were "
"generated some time ago. The passes that were saved were the Image, Alpha, "
"Z, Specular and AO passes."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:274
msgid ""
"To create a MultiLayer image set when initially rendering, simply disable Do"
" Composite, set your Format to MultiLayer, enable the Render Layer passes "
"you wish to save over the desired frame range, and Animate. Then, in "
"Blender, enable Compositing Nodes and Do Composite, and use the Image input "
"node to read in the EXR file. When you do, you will see each of the saved "
"passes available as sockets for you to use in your compositing noodle."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:283
msgid "Image Size"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:285
msgid ""
"Size matters - Pay attention to image resolution and color depth when mixing"
" and matching images. Aliasing (rough edges), color *flatness*, or distorted"
" images can all be traced to mixing inappropriate resolutions and color "
"depths."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:289
msgid ""
"The compositor can mix images with any size, and will only perform "
"operations on pixels where images have an overlap. When nodes receive inputs"
" with differently sized Images, these rules apply:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:293
msgid "The first/top Image input socket defines the output size."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:294
msgid ""
"The composite is centered by default, unless a translation has been assigned"
" to a buffer using a *Translate* node."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:297
msgid ""
"So each node in a composite can operate on different sized images, as "
"defined by its inputs. Only the *Composite* output node has a fixed size, as"
" defined by the *Scene buttons* (Format Panel - :kbd:`F10`). The *Viewer* "
"node always shows the size from its input, but when not linked (or linked to"
" a value) it shows a small 320x256 pixel image."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:305
msgid "Animations"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:309
msgid ""
"To use image sequences or movies within your composition, press the face or "
"little film strip button located to the right of the selector. As you click,"
" a pop-up will offer you four choices:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:313
msgid "Generated -"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:314
msgid "Sequence - a sequence of frames, each frame in a separate file."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:315
msgid "Movie - a sequence of frames packed into a single .avi or .mov file"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:316
msgid "Image - a single frame or still image in a file"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:318
msgid ""
"A Movie or Image can be named anything, but a Sequence must have a digit "
"sequence somewhere in its filename, for example fire0001set.jpg, "
"fire0002set.jpg, fire0003set.jpg and so on. The number indicates the frame."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:323
msgid ""
"If a Sequence or Movie is selected, an additional set of controls will "
"appear that allows you to select part or all of the sequence. Use these "
"controls to specify which frames, out of the original sequence, that you "
"want to introduce into the animation you are about to render. You can start "
"at the beginning and only use the beginning, or even pick out a set of "
"frames from the middle of an existing animation."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:330
msgid ""
"The *Frs* number button is the number of frames in the sequence that you "
"want to show.  For example, if you want to show 2 seconds of the animation, "
"and are running 30 fps, you would put 60 here."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:334
msgid ""
"The *SFra* number button sets the start frame of the animation; namely, at "
"what point in the animation that you *are going to render* do you want this "
"sequence to start playing.  For example, if you want to introduce this clip "
"ten seconds into the composite output, you would put 300 here (at 30 fps)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:340
msgid ""
"The *First* number button sets the first number in the animated sequence "
"name. For example, if your images were called \"credits-0001.png\", "
"\"credits-0002.png\" through \"credits-0300.png\" and you wanted to start "
"picking up with frame 20, you'd put 20 here."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:344
msgid ""
"To have the movie/sequence start over and repeat when it is done, press the "
"*Cycl* ic button. For example, if you were compositing a fan into a room, "
"and the fan animation lasted 30 frames, the animation would start over at "
"frame 31, 61, 91, and so on, continuously looping. As you scrub from frame "
"to frame, to see the actual video frame used for the current frame of "
"animation, press the auto button to the right of the *Cycl* ic button."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:353
msgid "Generated Images"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:355
msgid ""
"`Using the Nodes to modify a painting in progress in the UV/Image window "
"<http://wiki.blender.org/index.php/File:Manual-Compositing-Node-Image-"
"Generagedjpg>`__ Blender features :doc:`Texture Paint "
"</textures/paint/painting_the_texture>` which works in the UV/Image Editor, "
"that allows you to paint on the fly, and the image is kept in memory or "
"saved. If sync lock is enabled (the lock icon in the header), changes are "
"broadcast throughout Blender as soon as you lift the mouse button. One of "
"the places that the image can go is to the Image Input node. The example "
"shows a painting session going on in the right-hand UV/Image Editor window "
"for the painting \"Untitled\". Create this image via Image?New in the "
"UV/Image Editor. Refer to the texture paint section of the user maual for "
"more info on using Texture Paint."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:367
msgid ""
"In the left-hand window, the Image input node was used to select that "
"\"Untitled\" image. Notice that the Image type icon is blank, indicating "
"that it is pulling in a Generated image. That image is colorized by the "
"noodle, with the result used as a backdrop in the Node Editor Window."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:372
msgid ""
"Using this setup and the Generated Image type is like painting and post-"
"processing as you continue painting. Changes to either the painting or the "
"post-pro noodle are dynamic and real-time."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:380
msgid ""
"**No Frame Stretching or Compression:** If the input animation (avi or frame"
" set) was encoded at a frame rate that is *different* from your current "
"settings, the resultant animation will appear to run faster or slower. "
"Blender Nodes do not adjust input video frame rates. Use the scale control "
"inside the :doc:`Video Sequence Editor </sequencer>` to stretch or compress "
"video to the desired speed, and input it here. You can incorporate \"Slow-"
"Mo\" into your video. To do so, *ANIM* ate a video segment at 60 frames per "
"second, and input it via this node, using Render settings that have an "
"animation frame rate of the normal 30 fps; the resulting video will be "
"played at half speed. Do the opposite to mimic Flash running around at "
"hyperspeed."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:390
msgid ""
"AVI (Audio Video Interlaced) files are encoded and often compressed using a "
"routine called a *Codec*. You must have a codec installed on your machine "
"and available to Blender that understands and is able to read the file, in "
"order for Blender to be able to de-code and extract frames from the file. If"
" you get the error message **FFMPEG or unsupported video format** when "
"trying to load the file, you need to get a Codec that understands the video "
"file. Contact the author of the file and find out how it was encoded. An "
"outside package, such as VirtualDub, might help you track this information "
"down. Codecs are supplied by video device manufacturers, Microsoft, DivX, "
"and Xvid, among others, and can often be downloaded from their web sites for"
" free."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:403
msgid "Splicing Video Sequences using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:405
msgid ""
"The above animation controls, coupled with a little mixing, is all you need "
"to splice video sequences together. There are many kinds of splices:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:408
msgid "Cut Splice - literally the ends of the footage are just stuck together"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:409
msgid "Fade In - The scene fades in, usually from black"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:410
msgid "Fade Out - The scene fades out, usually to black"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:411
msgid ""
"Mix - Toward the end of one scene, the images from the next scene meld in as"
" the first scene fades"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:412
msgid ""
"Winking and Blinking - fading one cut out while the other fades in, "
"partially or totally through black"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:413
msgid ""
"Bumps and Wipes - one cut bumps the other one out of frame, or wipes over it"
" (like from the top left corner down)"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:417
msgid "Cut Splicing using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:419
msgid ""
"In the example noodle below, we have two pieces of footage that we want to "
"cut splice together."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:421
msgid "Magic Monkey - named 0001.png through 0030.png"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:422
msgid "Credits - named credits0001.png through credits0030.png"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:424
msgid ""
"The editor has reviewed the Credits and thought the first two frames could "
"be thrown away (onto the cutting room floor, as they say) along with the "
"last 8, leaving 20 frames from the total shot. Not shown in this image, but "
"crucial, is that in the Output panel, we set our render output filename to "
"\"Monkey-Credits-\", and our Animation start and end frames to 1 and 50 (30 "
"from the Monkey, 20 from the credits). Notice the Time node; it tells the "
"Mix node to use the top image until frame 30, and then, at frame 31, changes"
" the Mix factor to 1, which means to use the bottom set of images."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:435
msgid "Cut Splice using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:438
msgid ""
"Upon pressing the ANIM button, Blender will composite the animation. If you "
"specified an image format for output, for example, PNG, Blender will create "
"50 files, named \"Monkey-Credits-0001.png\" through \"Monkey-"
"Credits-0050.png\". If you specified a movie format as output, such as AVI-"
"JPEG, then Blender will create only one file, \"Monkey-Credits-.avi\", "
"containing all 50 frames."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:444
msgid ""
"Use cut scenes for rapid-fire transition, conveying a sense of energy and "
"excitement, and to pack in a lot of action in a short time. Try to avoid "
"cutting from a dark scene to a light one, because it's hard on the eyes. It "
"is very emotionally contrasting, and sometimes humorous and ironic, to cut "
"from a very active actor in one scene to a very still actor in another "
"scene, a la old Road Runner and Coyote scenes."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:453
msgid "Fade Splicing using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:455
msgid ""
"In the previous topic, we saw how to cut from one sequence to another. To "
"fade in or out, we simply replace one set of images with a flat color, and "
"expand  the Time frame for the splice. In the image below, beginning at "
"frame 20, we start fading **out** to cyan:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:463
msgid "Fading Out using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:466
msgid ""
"Cyan was chosen because that is the color of the Monkey at that time, but "
"you can just as easily choose any color. The image below shows frame 30, "
"when we have almost faded completely."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:470
msgid ""
"To fade **in**, change the Mix node and plug the image sequence into the "
"bottom socket, and specify a flat color for the top socket."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:475
#: ../../manual/composite_nodes/types/input.rst:486
msgid "Mix Splice using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:477
msgid ""
"To mix, or crossover, from one scene to the next, start feeding the second "
"scene in while the first is mixing out. The noodle below shows frame 25 of a"
" mix crossover special effect to transition from one scene to the next, "
"beginning at frame 20 with the transition completed by frame 30. Action "
"continues in the first scene as it fades out and is mixed with action that "
"starts in the second scene."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:489
msgid ""
"Use this effect to convey similarities between the two scenes. For example, "
"Scene 1 is the robber walking down the street, ending with the camera "
"focusing in on his feet. Scene 2 is a cop walking down the street after him,"
" starting with his feet and working its way up to reveal that the cop is "
"following the robber."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:496
msgid "Wink Splice using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:498
msgid ""
"A Wink is just like blinking your eyes; one scene fades to black and the "
"other fades in. To use Blender to get this effect, build on the Cut and Fade"
" splices discussed above to yield:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:504
msgid "A Wink using Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:507
msgid ""
"In the above example, showing frame 27, we have adjusted some parameters to "
"show you the power of Blender and how to use its Nodes to achieve just the "
"blended crossover effect you desire:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:510
msgid ""
"Postfeed: Even though there were only 15 frames of animation in the Toucan "
"strip, the cutover (top Time node) does not occur until frame 30. Blender "
"continues to put out the last frame of an animation, *automatically "
"extending it for you*, for frames out of the strip's range."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:514
msgid ""
"Prefeed: Even though the swirl does not start playing until frame 34, "
"Blender supplies the first frame of it for Frames 31 through 33. In fact, it"
" supplies this image all the way back to frame 1."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:517
msgid ""
"Partial Fade: Notice the second 'wink' Time node. Like a real wink, it does "
"not totally fade to black; only about 75%. When transitioning between scenes"
" where you want some visual carryover, use this effect because there is not "
"a break in perceptual sequence."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:522
msgid "Multiple Feeds"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:524
msgid ""
"The above examples call out two feeds, but by replicating the Input, Time "
"and Mix nodes, you can have multiple feeds at any one time; just set the "
"Time node to tell the Mixer when to cut over to using it."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:529
msgid "Texture Node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:540
msgid "Texture node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:543
msgid "The *Texture* node makes 3D textures available to the compositor."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:545
msgid ""
"The Texture node makes 3D textures available to the compositor. A texture, "
"from the list of textures available in the current blend file, is selected "
"and introduced through the value and/or color socket."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:552
msgid ""
"Please read up on the Blender Library system for help on importing and "
"linking to textures in other blender files."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:557
msgid ""
"**You cannot edit the textures themselves in the node window**. To use this "
"node, create and edit the texture in the normal texture buttons, then select"
" the texture from the menu button on the node."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:562
msgid ""
"You can change the *Offset* and a *Scale* (which is called Offs XYZ and Size"
" XYZ in the Materials Texture Map Input panel) for the texture by clicking "
"on the label and setting the sliders, thus affecting how the texture is "
"applied to the image. For animation, note that this is a vector input "
"socket, because the XYZ values are needed."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:568
msgid ""
"Texture nodes can output a straight black-and-white *Value* image (don't "
"mistake this for alpha) and an image (*Color*)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:577
msgid ""
"In the example above, we want to simulate some red plasma gas out there in "
"space. So, we fog up an image taken from the Hubble telecscope of Orion and "
"take the ever-so-useful Cloud texture and use it to mix in red with the "
"image."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:583
msgid "Value node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:592
msgid ""
"The Value node has no inputs; it just outputs a numerical value (floating "
"point spanning 0.00 to 1.00) currently entered in the NumButton displayed in"
" its controls selection."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:596
msgid ""
"Use this node to supply a constant, fixed value to other nodes' value or "
"factor input sockets."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:600
msgid "RGB node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:609
msgid ""
"The RGB node has no inputs. It just outputs the Color currently selected in "
"its controls section; a sample of it is shown in the top box. In the example"
" to the right, a gray color with a tinge of red is slected."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:614
msgid ""
"To change the brightness and saturation of the color, :kbd:`LMB` click "
"anywhere within the square gradient. The current saturation is shown as a "
"little circle within the gradient. To change the color itself, click anwhere"
" along the rainbow Color Ramp."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:624
msgid ""
"In this example, our corporate color is teal, but the bozo who made the "
"presentation forgot. So, we multiply his lame black and white image with our"
" corporate color to save him from embarassment in front of the boss when he "
"gives his boring presentation."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:630
#: ../../manual/composite_nodes/types/input.rst:641
msgid "Time node"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:644
msgid ""
"The Time node generates a *fac* tor value (from 0.00 to 1.00) (that changes "
"according to the curve drawn) as time progresses through your movie "
"(frames)."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:647
msgid ""
"The *Start* and *End* NumButtons specify the range of time the values should"
" be output along, and this range becomes the X-axis of the graph. The curve "
"defines the Y-value and hence the factor that is output. In the example to "
"the right, since the timespan is 250 frames and the line is straight from "
"corner to corner, 0.50 would be output at frame 125, and 0.75 will be output"
" at frame 187."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:654
msgid "Note on output values"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:656
msgid ""
"The :doc:`Map Value </osite_nodes/types/vector#map_value_node>` node can be "
"used to map the output to a more appropriate value. With some time curves, "
"it is possible that the Time node may output a number larger than one or "
"less than zero. To be safe, use the Min/Max clamping function of the Map "
"Value node to limit output."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:662
msgid ""
"You can reverse time (unfortunately, only in Blender and not in the real "
"world) by specifying a Start frame greater than the End frame. The net "
"effect of doing so is to flip the curve around. Warning: doing so is easily "
"overlooked in your node map and can be very confusing (like meeting your "
"mother when she was/is your age in \"Back to the Future\")."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:669
msgid "Time is Relative"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:671
msgid ""
"In Blender, time is measured in frames. The actual duration of a time span "
"depends on how fast those frames whiz by (frame rate). You set the frame "
"rate in your animation settings (:doc:`Scene Context "
"</ce/buttons/scene_context>` F10 ). Common settings range from 5 seconds per"
" frame for slideshows (0.2 fps), to 30 fps for US movies."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:678
msgid "Time Node Examples"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:680
msgid ""
"In the picture below, over the course of a second of time (30 frames), the "
"following time controls are made:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:686
msgid "See:"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:688
msgid "No Effect"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:689
msgid "Slow Down"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:690
msgid "Freeze"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:691
msgid "Accelerate"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:692
msgid "Reverse"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:695
msgid ""
"Common uses for this include a :doc:`\"fade to black\" "
"</composite_nodes/types/convertor#using_setalpha_to_fade_to_black>`, wherein"
" the accelerate time curve (typically exponentially-shaped) feeds a mix "
"value that mixes a constant black color in, so that the blackness "
"accelerates and eventually darkens the image to total black. Other good uses"
" include an increasing soften (blur-out or -in) effect, or :doc:`fade-in "
"</composite_nodes/types/convertor#using_setalpha_to_fade_in_a_title>` a "
"background or foreground, instead of just jumping things into or out of the "
"scene."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:705
msgid ""
"You can even imagine hooking up one blur to a background renderlayer, "
"another inverted blur to a foreground renderlayer, and time-feeding both. "
"This node group would simulate someone focusing the camera lens."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:711
msgid "Examples and suggestions"
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:713
msgid ""
"As your imagination runs wild, consider a few ideas that came to me just now"
" on my couch: mixing a clouds texture with a time input to fog up a piece of"
" glass or show spray paint building up on a wall. Consider mixing red and "
"the soften with time (decreasing output) to show what someone sees when "
"waking up from a hard hit on the head. Mix HSV input with a starfield image "
"with time (decreasing output) to show what we might see someday as we "
"accelerate our starship and experience red-shift."
msgstr ""

#: ../../manual/composite_nodes/types/input.rst:720
msgid ""
"As a user, you should know that we have arrived at the point where there are"
" many ways to do the same thing in Blender. For example, an old way to make "
"a slide show using Blender, you created multiple image textures, one image "
"for each slide, and assigned them as texture channels to the material for "
"the screen, then created a screen (plane) that filled the cameral view. "
"Using a material ipo, you would adjust the Color influence of each channel "
"at different frames, fading one in as the previous slide faded out. Whew! "
"Rearranging slide and changing the timing was clunky but doable by moving "
"the IPO keys. The *Node* way is to create an image input, one for each slide"
" image. Using the Image input and Time nodes connected to an AlphaOver mixer"
" is much simpler, clearer, and easier to maintain."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:7
msgid "Composite Matte Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:9
msgid ""
"These nodes give you the essential tools for working with blue-screen or "
"green-screen footage, where live action is shot in front of a blue or green "
"backdrop for replacement by a matte painting or virtual background."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:13
msgid ""
"In general, hook up these nodes to a viewer, set your UV/Image Editor to "
"show the viewer node, and play with the sliders in real-time using a sample "
"image from the footage, to get the settings right. In some cases, small "
"adjustments can eliminate artifacts or foreground image degredation. For "
"example, taking out too much green can result in foreground actors looking "
"'flat' or blueish/purplish."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:19
msgid ""
"You can and should chain these nodes together, refining your color "
"correction in successive refinements, using each node's strengths to operate"
" on the previous node's output. There is no \"one stop shopping\" or one "
"\"does-it-all\" node; they work best in combination."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:24
msgid ""
"Usually, green screen is shot in a stage with consistent lighting from shot "
"to shot, so the same settings will work across multiple shots of raw "
"footage. Footage shot outside under varying lighting conditions (and wind "
"blowing the background) will complicate matters and mandate lower falloff "
"values."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:29
msgid "Garbage Matte"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:31
msgid ""
"Garbage matte is not a node, but a technique where the foreground is "
"outlined using a closed curve (bezier or nurbs). Only the area within the "
"curve is processed using these matte nodes; everything else is garbage and "
"thus discarded."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:38
msgid "Difference Key Node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:42
msgid "Difference Key node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:45
msgid ""
"The difference key node determines how different each channel is  from the "
"given key in the selected color space. If the differences are below a user "
"defined threshold then the pixel is considered transparent. Difference "
"matting does not rely on a certain background color, but can have less than "
"optimal results if there is a significant amount of background color in the "
"foreground object."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:51
msgid "There are two inputs to this node."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:53
msgid "The first is an input *Image* that is to be keyed."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:54
msgid ""
"The *Key Color* can be input as an RGB value or selected using the color "
"picker by clicking on the *Key Color* box to bring up the color dialog, then"
" clicking on the eye dropper tool and selecting a color."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:56
msgid ""
"The selectable color spaces are *RGB* (default), *HSV*, *YUV*, and *YCbCr*."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:59
msgid ""
"You can adjust the tolerance of each color in the colorspace individually so"
" that you can have more red variance or blue variance in what you would "
"allow to be transparent. I find that about 0.15 (or 15%) is plenty of "
"variance if the background is evenly lit. Any more unevenness and you risk "
"cutting into the foreground image."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:64
msgid ""
"When the *Falloff* value is high, pixels that are close to the *Key Color* "
"are more transparent than pixels that are not as close to the *Key Color* "
"(but still considered close enough to be keyed).  When the *Falloff* value "
"is low, it does not matter how close the pixel color (*Image*) is to the "
"*Key Color*, it is transparent."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:70
#: ../../manual/composite_nodes/types/matte.rst:167
#: ../../manual/composite_nodes/types/matte.rst:208
#: ../../manual/composite_nodes/types/matte.rst:303
msgid ""
"The outputs of this node are the *Image* with an alpha channel adjusted for "
"the keyed selection and a black and white *Matte* (i.e the alpha mask)."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:74
msgid "Simple Example"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:80
msgid "Using the  Difference Key Node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:83
msgid ""
"In the example to the right (click to expand), we have a purple cube with "
"yellow marbeling in front of a very unevenly lit green screen. We start "
"building our noodle by threading the image to a difference key, and using "
"the eyedropper, pick a key color very close to the edge of the cube, around "
"where the halo is  at the corner on the left-hand side; a fairly bright "
"green. We thread two viewers from the output sockets so we can see what (if "
"anything) the node is doing. We add an AlphaOver node, threading the Matte "
"to the **TOP** socket and the image to the **BOTTOM** socket. Very "
"Important, because 0 time blue is not the same as blue times zero. You "
"always want your mask to go to the top socket of the AlphaOver. Premultiply "
"is set and a full multiply is on so that we completely remove the green. In "
"this example, we thread the output of the alphaover to a SplitViewer node so"
" we can compare our results; the original is threaded to the bottom input of"
" the SplitViewer, so that original is on the left, processed is on the "
"right."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:99
msgid ""
"We set our variance to .15, and see what we get. What we get (not shown) is "
"a matte that masks around the cube, but not on the right and around the "
"edges where the green is darker; that shade it is too far away from our key "
"color. So, since it is the green that is varying that we want to remove, we "
"increase the Green variation to 1.00 (not shown). Whoa! All the Green "
"disappears (all green within a 100% variation of our green key color is "
"*all* the green), along with the top of the box! Not good. So, we start "
"decreasing the green until we settle on 55% (shown)."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:110
msgid "Chaining Example"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:116
msgid "Chaining  Difference Key Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:119
msgid ""
"We pay out the wazoo for our highly talented (and egotistical I might add) "
"Mr. Cube to come into the studio and do a few takes. We told him NOT to wear"
" a green tie, but when we look at our footage, lo and behold, there he is "
"with a green striped tie on. When we use our simple noodle, the green "
"stripes on his tie go alpha, and the beach background shows through. So, we "
"call him up and, too late, he's on his way back to Santa Monica and it "
"wasn't in his contract and it wasn't his fault, after all, we're supposed to"
" have all this fancy postpro software yada yada and he hangs up. Geez, these"
" actors."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:128
msgid ""
"So, we chain two Difference Key nodes as shown to the right, and problem "
"solved. What we did was lower the variation percentage on the first to "
"remove some of the green, then threaded that to a second (lower) difference "
"key, where we sampled the green more toward the shadow side and outside "
"edge. By keeping both variations low, none of the green in his tie is "
"affected; that shade is outside the key's +/- variation tolerances."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:137
msgid "Chroma Key Node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:141
msgid "Chroma Key node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:144
msgid ""
"The *Chroma Key* node determines if a pixel is foreground or background (and"
" thereby should be transparent) based on its chroma values. This is useful "
"for compositing images that have been shot in front of a green or blue "
"screen."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:148
#: ../../manual/composite_nodes/types/matte.rst:198
#: ../../manual/composite_nodes/types/matte.rst:285
msgid "There is one input to this node, the *Image* that is to be keyed."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:150
#: ../../manual/composite_nodes/types/matte.rst:200
#: ../../manual/composite_nodes/types/matte.rst:287
msgid "Control this node using:"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:153
msgid "Green / Blue buttons"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:153
msgid "Basic selection of what color the background is supposed to be."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:156
msgid "Cb Slope and Cr Slope (chroma channel) sliders"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:156
msgid ""
"Determines how quickly the processed pixel values go from background to "
"foreground, much like falloff."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:159
msgid "Cb Pos and Cr Pos sliders"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:159
msgid ""
"Determines where the processing transition point for foreground and "
"background is in the respective channel."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:162
msgid "Threshold"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:162
msgid ""
"Determines if additional detail is added to the pixel if it is transparent."
"  This is useful for pulling shadows from an image even if they are in the "
"green screen area."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:165
msgid "Alpha threshold"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:165
msgid ""
"The setting that determines the tolerance of pixels that should be "
"considered transparent after they have been processed. A low value means "
"that only pixels that are considered totally transparent will be "
"transparent, a high value means that pixels that are mostly transparent will"
" be considered transparent."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:172
msgid "Color Key"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:176
msgid "Color Key node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:179
msgid ""
"The color key node creates a matte based on a specified color of the input "
"image. The sliders represent threshold values for *Hue*, *Saturation*, and "
"*Value*. Higher values in this node's context mean a wider range of colors "
"from the specified will be added to the matte."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:186
msgid "Luminance Key Node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:190
msgid "Luminance Key node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:193
msgid ""
"The *Luminance Key* node determines background objects from foreground "
"objects by the difference in the luminance (brightness) levels.  For "
"example, this is useful when compositing stock footage of explosions (very "
"bright) which are normally shot against a solid, dark background."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:202
msgid ""
"The *High* value selector determines the lowest values that are considered "
"foreground. (which is supposed to be - relatively - light: from this value "
"to 1.0)."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:203
msgid ""
"The *Low* value selector determines the hightes values that are considered "
"to be background objects. (which is supposed to be - relatively - dark: from"
" 0.0 to this value)."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:205
#: ../../manual/composite_nodes/types/matte.rst:300
msgid ""
"It is possible to have a separation between the two values to allow for a "
"gradient of transparency between foreground and background objects."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:219
msgid "Using Luma Key...with a twist"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:222
msgid ""
"For this example, let's throw you a ringer. Here, the model was shot against"
" a *white* background. Using the Luminance Key node, we get a matte out "
"where the background is white, and the model is black; the opposite of what "
"we want. If we wanted to use the matte, we have to switch the white and the "
"black. How to do this? ColorRamp to the rescue - we set the left color White"
" Alpha 1.0, and the right color to be Black Alpha 0.0. Thus, when the "
"Colorramp gets in black, it spits out white, and vice versa. The reversed "
"mask is shown; her white outline is useable as an alpha mask now."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:232
msgid ""
"Now to mix, we don't really need the AlphaOver node; we can just use the "
"mask as our Factor input. In this kinda weird case, we can use the matte "
"directly; we just switch the input nodes. As you can see, since the matte is"
" white (1.0) where we don't want to use the model picture, we feed the "
"background photo to the bottom socket (recall the mix node uses the top "
"socket where the factor is 0.0, and the bottom socket where the factor is "
"1.0). Feeding our original photo into the top socket means it will be used "
"where the Luminance Key node has spit out Black. Voila, our model is "
"teleported from Atlanta to aboard a cruise ship docked in Miami."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:244
msgid "Color Spill Node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:248
msgid "Color Spill node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:251
msgid ""
"The *Color Spill* node reduces one of the RGB channels so that it is not "
"greater than any of the others. This is common when compositing images that "
"were shot in front of a green or blue screen. In some cases, if the "
"foreground object is reflective, it will show the green or blue color; that "
"color has \"spilled\" onto the foreground object. If there is light from the"
" side or back, and the foreground actor is wearing white, it is possible to "
"get \"spill\" green (or blue) light from the background onto the foreground "
"objects, coloring them with a tinge of green or blue. To remove the green "
"(or blue) light, you use this fancy node."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:261
msgid "There is one input to this node, the *Image* to be processed."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:263
msgid ""
"The *Enhance* slider allows you to reduce the selected channel's input to "
"the image greater than the color spill algorithm normally allows. This is "
"useful for exceptionally high amounts of color spill."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:267
msgid "The outputs of this node are the image with the corrected channels."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:271
msgid "Channel Key Node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:277
msgid "Channel Key node"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:280
msgid ""
"The *Channel Key* node determines background objects from foreground objects"
" by the difference in the selected channel's levels.  For example in YUV "
"color space, this is useful when compositing stock footage of explosions "
"(very bright) which are normally shot against a solid, dark background."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:289
msgid "Color Space"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:290
msgid "buttons selects what color space the channels will represent."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:291
msgid "Channel"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:292
msgid "buttons selects the channel to use to determine the matte."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:294
msgid "High"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:294
msgid ""
"value selector determines the lowest values that are considered foreground. "
"(which is supposed to be - relatively - height values: from this value to "
"1.0)."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:298
msgid "Low"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:297
msgid ""
"value selector determines the highest values that are considered to be "
"background objects. (which is supposed to be - relatively - low values: from"
" 0.0 to this value)."
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:308
msgid "Distance Key"
msgstr ""

#: ../../manual/composite_nodes/types/matte.rst:310
msgid "..."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:7
msgid "Composite Output Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:9
msgid ""
"At any point, you may want to see or save the working image in progress, "
"especially right after some operation by a node. Simply create another "
"thread from the image output socket of the node to an Output node to see a "
"mini-picture."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:13
msgid ""
"Only one Viewer and one Composite Node is active, which is indicated with a "
"red sphere icon in the Node header. Clicking on Viewer Nodes makes them "
"active. The active Composite Node is always the first, and you should only "
"use one anyway."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:20
msgid "Viewer"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:24
msgid "Viewer node"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:27
msgid ""
"The *Viewer* node is a temporary, in-process viewer. Plug it in wherever you"
" would like to see an image or value-map in your node-tree."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:30
msgid ""
":kbd:`LMB` click on the image to update it, if it wasn't done automatically."
" You can use as many of these as you would like. It is possible to "
"automatically plug a Viewer node to any other node by pressing :kbd:`Shift-"
"Ctrl-LMB` on it."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:34
msgid "Using the UV/Image Editor Window"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:36
msgid ""
"The *Viewer* node allows results to be displayed in the UV/Image Editor. The"
" image is facilitated by selecting the *IM:Viewer Node* on the window's "
"header. The UV/Image Editor will display the image from the currently "
"selected viewer node."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:40
msgid ""
"To save the image being viewed, use the *Image→Save As* menu to save the "
"image in a file."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:43
msgid ""
"The UV/Image Editor also has three additional options in its header to view "
"Images with or without Alpha, or to view the Alpha or Z itself. Holding "
":kbd:`LMB` in the Image display allows you to sample the values."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:49
msgid "Composite"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:53
msgid "Composite node"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:56
msgid ""
"The Composite node is where the actual output from the compositor is "
"connected to the renderer. Connecting a node to the *Composite* node will "
"output the result of that node's full tree to the Renderer; leaving this "
"node unconnected will result in a blank image. This node is updated after "
"each render, but also if you change things in your node-tree (provided at "
"least one finished input node is connected)."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:62
msgid ""
"You can connect three channels: the actual RGBA image, the Alpha image, and "
"the Z (depth) image. You should only have one Composite node in your map so "
"that only one final image is rendered when the *Compositing* button is "
"pressed on the Render Options Post-Processing panel. Otherwise, "
"unpredictable results may occur."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:70
msgid "Saving your Composite Image"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:72
msgid ""
"The RENDER button renders a single frame or image. Save your image using "
":kbd:`F3` or the *File→Save Image* menu. The image will be saved using the "
"image format settings on the Render panel."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:76
msgid ""
"To save a sequence of images, for example, if you input a movie clip or used"
" a Time node with each frame in its own file, use the *ANIM* button and its "
"settings. If you might want to later overlay them, be sure to use an image "
"format that supports an Alpha channel (such as PNG). If you might want to "
"later arrange them front to back or create a depth of field effect, use a "
"format that supports a Z-depth channel (such as EXR)."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:83
msgid ""
"To save a composition as a movie clip (all frames in a single file), use an "
"AVI or Quicktime format, and use the *ANIM* button and its settings."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:88
msgid "SplitViewer Node"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:92
msgid "SplitViewer node"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:95
msgid ""
"The *SplitViewer* node takes two images and displays one half of each on "
"each side (top socket on the right half, bottom socket input on the left). "
"Use this node for making side-by-side comparisons of two renderings/images, "
"perhaps from different renderlayers or from different scenes. When "
"transitioning between scenes, you want to be sure the stop action is "
"seamless; use this node to compare the end of one scene with the beginning "
"of another to ensure they align."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:104
msgid "File Output Node"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:108
msgid "File Output node"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:111
msgid ""
"This node puts out an RGBA image, in the format selected, for each frame "
"range specified, to the filename entered, as part of a frameset sequence. "
"This means that the name of the file will be the name you enter plus a "
"numeric frame number, plus the filename extension (based on format). Based "
"on the format you choose, various quality/compression options may be shown."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:117
msgid ""
"To support subsequent arrangement and layering of images, the node can "
"supply a Z-depth map. However, please note that only the OpenEXR image "
"formats save the Z information."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:120
msgid ""
"The image is saved whenever Blender feels like it. Just kidding; whenever "
"you press the Render button, the current frame image is saved. When you "
"press the Anim button, the frameset sequence (specified in the Start and End"
" frame) is saved."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:125
msgid ""
"This node saves you from doing (or forgetting to do) the Save Image after a "
"render; the image is saved automagically for you. In addition, since this "
"node can be hooked in anywhere in the noodle, you can save intermediate "
"images automatically. Neat, huh?"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:130
msgid "Filespecs"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:132
msgid ""
"As with all filename entries, use // at the beginning of the field to "
"shorthand reference the current directory of the .blend file. You can also "
"use the .. breadcrumb to go up a directory."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:136
msgid "Levels Node"
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:138
msgid ""
"The Levels Node takes an image as an input, and can output a 1D value based "
"on the levels of an image. It can read the input's *Combined RGB*, *Red*, "
"*Green*, *Blue*, or *Luminance* channels."
msgstr ""

#: ../../manual/composite_nodes/types/output.rst:143
msgid ""
"It can output a *Mean* value, or average of values, or a *Standard "
"deviation*, which measures the diversity of values."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:7
msgid "Composite Vector Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:10
msgid "Vector Nodes"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:12
msgid ""
"Vector nodes manipulate information about how light interacts with the "
"scene, multiplying vector sets, and other wonderful things that normal "
"humans barely comprehend (except math geniuses, who may not be considered "
"'normal'). Even if you aren't a math wiz, you'll find these nodes to be very"
" useful."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:17
msgid ""
"Vectors, in general, are two or three element values, for example, RGB color"
" value, and surface normals are vectors. Vectors are also important for "
"calculating shading."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:22
msgid "Normal Node"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:24
msgid ""
"The Normal node generates a normal vector and a dot product. Click and Drag "
"on the sphere to set the direction of the normal."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:27
msgid ""
"This node can be used to input a new normal vector into the mix. For "
"example, use this node as an input to a Color Mix node. Use an Image input "
"as the other input to the Mixer. The resulting colorized output can be "
"easily varied by moving the light source (click and dragging the sphere)."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:35
msgid "Vector Curves Node"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:39
msgid ""
"The Vector Curves node maps an input vector image's x, y, and z components "
"to a diagonal curve.  The three channels are accessed via the X, Y, and Z "
"buttons at the top of the node.  Add points to the curve by clicking on it."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:43
msgid ""
"Note that dragging a point across another will switch the order of the two "
"points (e.g. if point A is dragged across point B, then point B will become "
"point A and point A will become point B)."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:47
msgid ""
"Use this curve to slow things down or speed them up from the original scene."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:51
msgid "Map Value Node"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:55
msgid "Map Value node"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:58
msgid ""
"Map Value node is used to scale, offset and clamp values (value refers to "
"each vector in the set). The formula for how this node works is:"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:61
msgid "Offs"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:62
msgid "will add a number to the input value"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:63
msgid "Size"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:64
msgid "will scale (multiply) that value by a number"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:72
msgid "Min/Max"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:66
msgid ""
"you can set the minimum and maximum numbers to clamp (cut off) the value "
"too. Min and Max must be individually enabled by :kbd:`LMB` clicking on the "
"label for them to clamp. :kbd:`Shift-LMB` on the value to change it."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:71
msgid ""
"If Min is enabled and the value is less than Min, set the ouput value to Min"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:72
msgid ""
"If Max is enabled and the input value is greater than Max, set the ouput "
"value to Max"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:74
msgid ""
"This is particularly useful in achieving a depth-of-field effect, where you "
"can use the Map Value node to map a Z value (which can be 20 or 30 or even "
"500 depending on the scene) to to range between 0-1, suitable for connecting"
" to a Blur node."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:81
msgid "Using Map Value to Multiply values"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:85
msgid "Using Map Value to multiply"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:88
msgid ""
"You can also use the map value node to multiply values to achieve an output "
"number that you desire. In the mini-map to the right, the Time node ouputs a"
" value between 0.00 and 1. 00 evenly scaled over 30 frames. The *first* Map "
"Value node multiplies the input by 2, resulting in an output value that "
"scales from 0.00 to 2.00 over 30 frames. The *second* Map Value node "
"subtracts 1 from the input, giving working values between -1.00 and 1.00, "
"and multiplies that by 150, resulting in an output value between -150 and "
"150 over a 30-frame sequence."
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:98
msgid "Normalize"
msgstr ""

#: ../../manual/composite_nodes/types/vector.rst:100
msgid ""
"Normalizing a vector scales its magnitude, or length, to a value of 1, but "
"keeps its direction intact."
msgstr ""

#: ../../manual/composite_nodes/usage.rst:5
msgid "Using Nodes"
msgstr ""

#: ../../manual/composite_nodes/usage.rst:7
msgid ""
"FIXME(Template Unsupported: Doc:2.6/Reference/Nodes/Using_Nodes; "
"{{Doc:2.6/Reference/Nodes/Using_Nodes}} )"
msgstr ""
